{
  "doc/api/Sparks.Trader.Api.AddressData.html": {
    "href": "doc/api/Sparks.Trader.Api.AddressData.html",
    "title": "AddressData 类 | SparksTrader文档",
    "keywords": "AddressData 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class AddressData 继承 object AddressData 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 属性 City public string City { get; set; } 属性值 string Country public string Country { get; set; } 属性值 string State public string State { get; set; } 属性值 string Street public string Street { get; set; } 属性值 string Zip public string Zip { get; set; } 属性值 string"
  },
  "doc/api/Sparks.Trader.Api.AlertAction.html": {
    "href": "doc/api/Sparks.Trader.Api.AlertAction.html",
    "title": "AlertAction 类 | SparksTrader文档",
    "keywords": "AlertAction 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public abstract class AlertAction 继承 object AlertAction Derived EmailAlertAction PopupAlertAction SoundAlertAction SymbolAlertCondition 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 AlertAction() public AlertAction() AlertAction(EAlertActionType) public AlertAction(EAlertActionType actionType = EAlertActionType.ShowPopup) 参数 actionType EAlertActionType 属性 ActionType [Browsable(false)] public EAlertActionType ActionType { get; protected set; } 属性值 EAlertActionType"
  },
  "doc/api/Sparks.Trader.Api.AlertCondition.html": {
    "href": "doc/api/Sparks.Trader.Api.AlertCondition.html",
    "title": "AlertCondition 类 | SparksTrader文档",
    "keywords": "AlertCondition 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class AlertCondition 继承 object AlertCondition 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "doc/api/Sparks.Trader.Api.ChartDragEventArgs.html": {
    "href": "doc/api/Sparks.Trader.Api.ChartDragEventArgs.html",
    "title": "ChartDragEventArgs 类 | SparksTrader文档",
    "keywords": "ChartDragEventArgs 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class ChartDragEventArgs : ChartMouseEventArgs 继承 object ChartMouseEventArgs ChartDragEventArgs 继承成员 ChartMouseEventArgs.ToString() ChartMouseEventArgs.ChartArea ChartMouseEventArgs.MousePoint ChartMouseEventArgs.TimeValue ChartMouseEventArgs.BarIndex ChartMouseEventArgs.YValue ChartMouseEventArgs.LeftButton ChartMouseEventArgs.RightButton ChartMouseEventArgs.MiddleButton ChartMouseEventArgs.XButton1 ChartMouseEventArgs.XButton2 ChartMouseEventArgs.ChangedButton ChartMouseEventArgs.ButtonState ChartMouseEventArgs.CtrlKey ChartMouseEventArgs.ShiftKey ChartMouseEventArgs.AltKey object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) 构造函数 ChartDragEventArgs(IChartArea, Point, int?, DateTime, double, bool, bool, bool) public ChartDragEventArgs(IChartArea chartArea, Point point, int? barIndex, DateTime timeValue, double yValue, bool ctrlKey, bool altKey, bool shiftKey) 参数 chartArea IChartArea point Point barIndex int? timeValue DateTime yValue double ctrlKey bool altKey bool shiftKey bool"
  },
  "doc/api/Sparks.Trader.Api.ChartKeyboardEventArgs.html": {
    "href": "doc/api/Sparks.Trader.Api.ChartKeyboardEventArgs.html",
    "title": "ChartKeyboardEventArgs 类 | SparksTrader文档",
    "keywords": "ChartKeyboardEventArgs 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class ChartKeyboardEventArgs 继承 object ChartKeyboardEventArgs 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) 构造函数 ChartKeyboardEventArgs(IChartArea, EKey, EModifierKeys) public ChartKeyboardEventArgs(IChartArea chartArea, EKey key, EModifierKeys eModifiers) 参数 chartArea IChartArea key EKey eModifiers EModifierKeys 属性 AltKey True if Alt key was pressed otherwise False public bool AltKey { get; } 属性值 bool ChartArea The chart that the event/callback occurred public IChartArea ChartArea { get; } 属性值 IChartArea CtrlKey True if Ctrl key was pressed otherwise False public bool CtrlKey { get; } 属性值 bool EModifiers Modifiers key that was used with the Key public EModifierKeys EModifiers { get; } 属性值 EModifierKeys Key Keyboard key public EKey Key { get; } 属性值 EKey ShiftKey True if Shift key was pressed otherwise False public bool ShiftKey { get; } 属性值 bool 方法 ToString() Returns a string that represents the current object. public override string ToString() 返回 string A string that represents the current object."
  },
  "doc/api/Sparks.Trader.Api.ChartMouseEventArgs.html": {
    "href": "doc/api/Sparks.Trader.Api.ChartMouseEventArgs.html",
    "title": "ChartMouseEventArgs 类 | SparksTrader文档",
    "keywords": "ChartMouseEventArgs 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class ChartMouseEventArgs 继承 object ChartMouseEventArgs Derived ChartDragEventArgs ChartMouseWheelEventArgs 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) 构造函数 ChartMouseEventArgs(IChartArea, Point, int?, DateTime?, double, bool, bool, bool, EMouseButtonState, EMouseButtonState, EMouseButtonState, EMouseButtonState, EMouseButtonState, EMouseButton?) public ChartMouseEventArgs(IChartArea chartArea, Point mouse, int? barIndex, DateTime? timeValue, double yValue, bool ctrlKey = false, bool altKey = false, bool shiftKey = false, EMouseButtonState left = EMouseButtonState.Released, EMouseButtonState right = EMouseButtonState.Released, EMouseButtonState middle = EMouseButtonState.Released, EMouseButtonState xButton1 = EMouseButtonState.Released, EMouseButtonState xButton2 = EMouseButtonState.Released, EMouseButton? changedButton = null) 参数 chartArea IChartArea mouse Point barIndex int? timeValue DateTime? yValue double ctrlKey bool altKey bool shiftKey bool left EMouseButtonState right EMouseButtonState middle EMouseButtonState xButton1 EMouseButtonState xButton2 EMouseButtonState changedButton EMouseButton? 属性 AltKey public bool AltKey { get; } 属性值 bool BarIndex Gets the exact bar index of the mouse event. public int? BarIndex { get; } 属性值 int? ButtonState Read-only access to the button state. public EMouseButtonState? ButtonState { get; } 属性值 EMouseButtonState? ChangedButton Read-only access to the button being described. public EMouseButton? ChangedButton { get; } 属性值 EMouseButton? ChartArea public IChartArea ChartArea { get; } 属性值 IChartArea CtrlKey public bool CtrlKey { get; } 属性值 bool LeftButton The state of the left button. public EMouseButtonState LeftButton { get; } 属性值 EMouseButtonState MiddleButton The state of the middle button. public EMouseButtonState MiddleButton { get; } 属性值 EMouseButtonState MousePoint public Point MousePoint { get; } 属性值 Point RightButton The state of the right button. public EMouseButtonState RightButton { get; } 属性值 EMouseButtonState ShiftKey public bool ShiftKey { get; } 属性值 bool TimeValue Gets the time value on the X-axis where the mouse event occurs. public DateTime? TimeValue { get; } 属性值 DateTime? XButton1 The state of the first extended button. public EMouseButtonState XButton1 { get; } 属性值 EMouseButtonState XButton2 The state of the second extended button. public EMouseButtonState XButton2 { get; } 属性值 EMouseButtonState YValue Gets the Y-axis value of the mouse event. public double YValue { get; } 属性值 double 方法 ToString() Returns a string that represents the current object. public override string ToString() 返回 string A string that represents the current object."
  },
  "doc/api/Sparks.Trader.Api.ChartMouseWheelEventArgs.html": {
    "href": "doc/api/Sparks.Trader.Api.ChartMouseWheelEventArgs.html",
    "title": "ChartMouseWheelEventArgs 类 | SparksTrader文档",
    "keywords": "ChartMouseWheelEventArgs 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class ChartMouseWheelEventArgs : ChartMouseEventArgs 继承 object ChartMouseEventArgs ChartMouseWheelEventArgs 继承成员 ChartMouseEventArgs.ChartArea ChartMouseEventArgs.MousePoint ChartMouseEventArgs.TimeValue ChartMouseEventArgs.BarIndex ChartMouseEventArgs.YValue ChartMouseEventArgs.LeftButton ChartMouseEventArgs.RightButton ChartMouseEventArgs.MiddleButton ChartMouseEventArgs.XButton1 ChartMouseEventArgs.XButton2 ChartMouseEventArgs.ChangedButton ChartMouseEventArgs.ButtonState ChartMouseEventArgs.CtrlKey ChartMouseEventArgs.ShiftKey ChartMouseEventArgs.AltKey object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) 构造函数 ChartMouseWheelEventArgs(ChartMouseEventArgs, int) public ChartMouseWheelEventArgs(ChartMouseEventArgs args, int delta) 参数 args ChartMouseEventArgs delta int ChartMouseWheelEventArgs(IChartArea, Point, int?, DateTime, double, int, bool, bool, bool) public ChartMouseWheelEventArgs(IChartArea chartArea, Point point, int? barIndex, DateTime timeValue, double yValue, int delta, bool ctrlKey, bool altKey, bool shiftKey) 参数 chartArea IChartArea point Point barIndex int? timeValue DateTime yValue double delta int ctrlKey bool altKey bool shiftKey bool 属性 Delta Gets the number of detents the mouse wheel has rotated. A detent is one notch of the mouse wheel. public int Delta { get; protected set; } 属性值 int 方法 ToString() Returns a string that represents the current object. public override string ToString() 返回 string A string that represents the current object."
  },
  "doc/api/Sparks.Trader.Api.ChartPoint.html": {
    "href": "doc/api/Sparks.Trader.Api.ChartPoint.html",
    "title": "ChartPoint 类 | SparksTrader文档",
    "keywords": "ChartPoint 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 图标点 public class ChartPoint 继承 object ChartPoint 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) 构造函数 ChartPoint() public ChartPoint() ChartPoint(DateTime, double) public ChartPoint(DateTime x, double y) 参数 x DateTime y double 属性 X public DateTime X { get; set; } 属性值 DateTime Y 数量轴Y public double Y { get; set; } 属性值 double 方法 ToString() Returns a string that represents the current object. public override string ToString() 返回 string A string that represents the current object."
  },
  "doc/api/Sparks.Trader.Api.ChartScrollEventArgs.html": {
    "href": "doc/api/Sparks.Trader.Api.ChartScrollEventArgs.html",
    "title": "ChartScrollEventArgs 类 | SparksTrader文档",
    "keywords": "ChartScrollEventArgs 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class ChartScrollEventArgs 继承 object ChartScrollEventArgs 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 ChartScrollEventArgs(IChart, IChartArea, int, double, double) public ChartScrollEventArgs(IChart chart, IChartArea chartArea, int barsDelta, double bottomYDelta, double topYDelta) 参数 chart IChart chartArea IChartArea barsDelta int bottomYDelta double topYDelta double 属性 BarsDelta Gets a value that indicates the amount of bars that the chart was scrolled for public int BarsDelta { get; } 属性值 int BottomYDelta Gets the lowest value of the bars delta. public double BottomYDelta { get; } 属性值 double The bottom y delta. Chart Gets the chart. public IChart Chart { get; } 属性值 IChart ChartArea Gets the chart area. public IChartArea ChartArea { get; } 属性值 IChartArea TopYDelta Gets the highest value of the bars delta. public double TopYDelta { get; } 属性值 double The top y delta."
  },
  "doc/api/Sparks.Trader.Api.Constants.html": {
    "href": "doc/api/Sparks.Trader.Api.Constants.html",
    "title": "Constants 类 | SparksTrader文档",
    "keywords": "Constants 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public static class Constants 继承 object Constants 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 字段 DatetimeDefault public static DateTime DatetimeDefault 字段值 DateTime DoubleDefault public const double DoubleDefault = NaN 字段值 double"
  },
  "doc/api/Sparks.Trader.Api.DigitsAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.DigitsAttribute.html",
    "title": "DigitsAttribute 类 | SparksTrader文档",
    "keywords": "DigitsAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 精度特性 [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class DigitsAttribute : Attribute 继承 object Attribute DigitsAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 DigitsAttribute(int) public DigitsAttribute(int digits) 参数 digits int 属性 Digits public int Digits { get; set; } 属性值 int"
  },
  "doc/api/Sparks.Trader.Api.DirectoryAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.DirectoryAttribute.html",
    "title": "DirectoryAttribute 类 | SparksTrader文档",
    "keywords": "DirectoryAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class DirectoryAttribute : Attribute 继承 object Attribute DirectoryAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "doc/api/Sparks.Trader.Api.DisallowInBacktesting.html": {
    "href": "doc/api/Sparks.Trader.Api.DisallowInBacktesting.html",
    "title": "DisallowInBacktesting 类 | SparksTrader文档",
    "keywords": "DisallowInBacktesting 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Property|AttributeTargets.Field|AttributeTargets.Interface|AttributeTargets.Parameter, Inherited = false)] public sealed class DisallowInBacktesting : Attribute 继承 object Attribute DisallowInBacktesting 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "doc/api/Sparks.Trader.Api.EAccessRights.html": {
    "href": "doc/api/Sparks.Trader.Api.EAccessRights.html",
    "title": "EAccessRights 枚举 | SparksTrader文档",
    "keywords": "EAccessRights 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [Flags] public enum EAccessRights 字段 FileSystem = 1 Access to file system. FullAccess = 1073741824 The unlimited access rights. Internet = 2 Access to Internet or other networks. None = 0 Algorithm doesn’t require any access rights. Registry = 4 Access to windows registry."
  },
  "doc/api/Sparks.Trader.Api.EAlertActionType.html": {
    "href": "doc/api/Sparks.Trader.Api.EAlertActionType.html",
    "title": "EAlertActionType 枚举 | SparksTrader文档",
    "keywords": "EAlertActionType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EAlertActionType 字段 PlaySound = 8 SendEmail = 4 ShowPopup = 2"
  },
  "doc/api/Sparks.Trader.Api.EAlertConditionType.html": {
    "href": "doc/api/Sparks.Trader.Api.EAlertConditionType.html",
    "title": "EAlertConditionType 枚举 | SparksTrader文档",
    "keywords": "EAlertConditionType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EAlertConditionType 字段 [Display(Name = \"穿越\", GroupName = \"到价提醒\")] Crossing = 3 [Display(Name = \"下跌\", GroupName = \"到价提醒\")] CrossingDown = 2 [Display(Name = \"上穿\", GroupName = \"到价提醒\")] CrossingUp = 1"
  },
  "doc/api/Sparks.Trader.Api.EAlertFreq.html": {
    "href": "doc/api/Sparks.Trader.Api.EAlertFreq.html",
    "title": "EAlertFreq 枚举 | SparksTrader文档",
    "keywords": "EAlertFreq 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EAlertFreq 字段 OncePerBar = 2 OncePerBarClose = 3 OncePerMinute = 4 OnlyOnce = 1"
  },
  "doc/api/Sparks.Trader.Api.EAlertLevel.html": {
    "href": "doc/api/Sparks.Trader.Api.EAlertLevel.html",
    "title": "EAlertLevel 枚举 | SparksTrader文档",
    "keywords": "EAlertLevel 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EAlertLevel 字段 Error = 4 Info = 1 Warn = 2"
  },
  "doc/api/Sparks.Trader.Api.EAlertSoundDuration.html": {
    "href": "doc/api/Sparks.Trader.Api.EAlertSoundDuration.html",
    "title": "EAlertSoundDuration 枚举 | SparksTrader文档",
    "keywords": "EAlertSoundDuration 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EAlertSoundDuration 字段 [Display(Name = \"1分钟\")] M1 = 5 [Display(Name = \"仅一次\")] Once = 1 [Display(Name = \"10秒\")] S10 = 3 [Display(Name = \"30秒\")] S30 = 4 [Display(Name = \"5秒\")] S5 = 2"
  },
  "doc/api/Sparks.Trader.Api.EAlertSource.html": {
    "href": "doc/api/Sparks.Trader.Api.EAlertSource.html",
    "title": "EAlertSource 枚举 | SparksTrader文档",
    "keywords": "EAlertSource 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EAlertSource 字段 Chart = 4 Script = 1 System = 0"
  },
  "doc/api/Sparks.Trader.Api.EAlertState.html": {
    "href": "doc/api/Sparks.Trader.Api.EAlertState.html",
    "title": "EAlertState 枚举 | SparksTrader文档",
    "keywords": "EAlertState 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll alert 状态 public enum EAlertState 字段 Running = 1 运行 Stopped = 0 停止"
  },
  "doc/api/Sparks.Trader.Api.EAlertTrigger.html": {
    "href": "doc/api/Sparks.Trader.Api.EAlertTrigger.html",
    "title": "EAlertTrigger 枚举 | SparksTrader文档",
    "keywords": "EAlertTrigger 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EAlertTrigger 字段 [Display(Name = \"每次\")] EveryTime = 5 [Display(Name = \"每根K线一次\")] OncePerBar = 2 [Display(Name = \"每根K线一次(在收盘)\")] OncePerBarClose = 3 [Display(Name = \"每分钟一次\")] OncePerMinute = 4 [Display(Name = \"仅一次\")] OnlyOnce = 1"
  },
  "doc/api/Sparks.Trader.Api.EAxisLocation.html": {
    "href": "doc/api/Sparks.Trader.Api.EAxisLocation.html",
    "title": "EAxisLocation 枚举 | SparksTrader文档",
    "keywords": "EAxisLocation 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll Axis 位置 public enum EAxisLocation 字段 Bottom = 8 下 Left = 1 左 Right = 4 右 Top = 2 上"
  },
  "doc/api/Sparks.Trader.Api.EBarDirection.html": {
    "href": "doc/api/Sparks.Trader.Api.EBarDirection.html",
    "title": "EBarDirection 枚举 | SparksTrader文档",
    "keywords": "EBarDirection 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll Bar涨跌 public enum EBarDirection 字段 Down = 2 下跌 Unchanged = 3 持平 Up = 1 上涨"
  },
  "doc/api/Sparks.Trader.Api.EChartIconType.html": {
    "href": "doc/api/Sparks.Trader.Api.EChartIconType.html",
    "title": "EChartIconType 枚举 | SparksTrader文档",
    "keywords": "EChartIconType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EChartIconType 字段 Circle = 2 The Circle. Diamond = 4 The Diamond. DownArrow = 1 The Down Arrow. DownTriangle = 7 The Down Triangle. LeftTriangle = 8 RightTriangle = 9 Square = 3 The Square. Star = 5 The Star. UpArrow = 0 The Up Arrow. UpTriangle = 6 The Up Triangle."
  },
  "doc/api/Sparks.Trader.Api.EChartObjectType.html": {
    "href": "doc/api/Sparks.Trader.Api.EChartObjectType.html",
    "title": "EChartObjectType 枚举 | SparksTrader文档",
    "keywords": "EChartObjectType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 图形类型 public enum EChartObjectType 字段 AnchoredText = 5 锚点文字 AndrewsPitchfork = 13 The Andrews Pitchfork that can be placed directly in the chart, bound to X-Y axises. Ellipse = 7 椭圆 EquidistantChannel = 14 The equidistant channel that can be placed directly in the chart, bound to X-Y axises. FibonacciExpansion = 11 The Fibonacci Expansion that can be placed directly in the chart, bound to X-Y axises. - a charting technique used to plot possible levels of support and resistance by tracking not only the primary trend but also the retracement. FibonacciFan = 12 The Fibonacci Fan that can be placed directly in the chart, bound to X-Y axises. a charting technique used to estimate support and resistance levels by drawing the new trend lines based on the Fibonacci Retracement levels. FibonacciRetracement = 10 斐波那契回归 HorizontalLine = 1 水平线 Icon = 9 The icon. The collection of icons that can be placed directly in the chart, bound to X-Y axises. Rectangle = 6 矩形 Ruler = 0 测距尺 Text = 4 文字 TrendLine = 3 趋势线 Triangle = 8 三角 VerticalLine = 2 垂直线"
  },
  "doc/api/Sparks.Trader.Api.EChartType.html": {
    "href": "doc/api/Sparks.Trader.Api.EChartType.html",
    "title": "EChartType 枚举 | SparksTrader文档",
    "keywords": "EChartType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll Chart绘制类型 public enum EChartType 字段 CandelStick = 0 蜡烛图 Line = 1 线图 Waterfall = 2 瀑布图"
  },
  "doc/api/Sparks.Trader.Api.EConnectionState.html": {
    "href": "doc/api/Sparks.Trader.Api.EConnectionState.html",
    "title": "EConnectionState 枚举 | SparksTrader文档",
    "keywords": "EConnectionState 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll Provider 连接状态 public enum EConnectionState 字段 Connected = 2 已连接 Connecting = 1 连接中 Disconnected = 0 未连接 Disconnecting = 4 断开中"
  },
  "doc/api/Sparks.Trader.Api.EConnectReason.html": {
    "href": "doc/api/Sparks.Trader.Api.EConnectReason.html",
    "title": "EConnectReason 枚举 | SparksTrader文档",
    "keywords": "EConnectReason 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 连接原因 public enum EConnectReason 字段 AutoReconnecting = 4 断线自动重连 Normal = 1 正常连接 Scheduled = 2 计划连接 Unknown = 0 未知"
  },
  "doc/api/Sparks.Trader.Api.ECurrency.html": {
    "href": "doc/api/Sparks.Trader.Api.ECurrency.html",
    "title": "ECurrency 枚举 | SparksTrader文档",
    "keywords": "ECurrency 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 币种 public enum ECurrency 字段 AUD = 5 CAD = 6 CHF = 7 CNH = 16 CNY = 3 CalendarCurrencyAll = 19 EUR = 8 GBP = 9 HKD = 4 ILS = 18 JPY = 10 MXN = 13 NOK = 14 NZD = 11 PLY = 1 SEK = 12 TRY = 17 USD = 2 Unknown = 0 ZAR = 15"
  },
  "doc/api/Sparks.Trader.Api.EDateTimeShowWay.html": {
    "href": "doc/api/Sparks.Trader.Api.EDateTimeShowWay.html",
    "title": "EDateTimeShowWay 枚举 | SparksTrader文档",
    "keywords": "EDateTimeShowWay 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EDateTimeShowWay 字段 Date = 0 DateTime_MS = 3 DateTime_S = 2 Time = 1"
  },
  "doc/api/Sparks.Trader.Api.EDiffType.html": {
    "href": "doc/api/Sparks.Trader.Api.EDiffType.html",
    "title": "EDiffType 枚举 | SparksTrader文档",
    "keywords": "EDiffType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EDiffType 字段 BaseValue = 1 PreValue = 0 Stat = 2"
  },
  "doc/api/Sparks.Trader.Api.EDirection.html": {
    "href": "doc/api/Sparks.Trader.Api.EDirection.html",
    "title": "EDirection 枚举 | SparksTrader文档",
    "keywords": "EDirection 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 方向 [Flags] public enum EDirection 字段 Down = 8 Left = 1 None = 0 Right = 4 Up = 2"
  },
  "doc/api/Sparks.Trader.Api.EDisconnectReason.html": {
    "href": "doc/api/Sparks.Trader.Api.EDisconnectReason.html",
    "title": "EDisconnectReason 枚举 | SparksTrader文档",
    "keywords": "EDisconnectReason 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 断连原因 public enum EDisconnectReason 字段 NetworkFailure = 4 网络中断 Normal = 1 正常关闭 Scheduled = 2 计划关闭 Unknown = 0 未知"
  },
  "doc/api/Sparks.Trader.Api.EDistrict.html": {
    "href": "doc/api/Sparks.Trader.Api.EDistrict.html",
    "title": "EDistrict 枚举 | SparksTrader文档",
    "keywords": "EDistrict 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 地区 public enum EDistrict 字段 CN = 1 HK = 2 TW = 4 US = 8 Unknown = 0"
  },
  "doc/api/Sparks.Trader.Api.EErrorCode.html": {
    "href": "doc/api/Sparks.Trader.Api.EErrorCode.html",
    "title": "EErrorCode 枚举 | SparksTrader文档",
    "keywords": "EErrorCode 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 错误码 public enum EErrorCode 字段 DisConnected = 10 未连接 DuplicateName = 50 Error = 1 一般错误 FileOrDirectoryNotExist = 40 FileSystemError = 41 InvalidName = 54 InvalidUsernameOrPassword = 12 错误的用户名或密码 NameTooLong = 53 NotSubscribed = 21 非订阅状态 NullOrWhitespace = 52 PluginError = 30 QuotaExceeded = 20 超出限额 Success = 0 无错误 UnReachable = 11 无法连接 UnknownError = 2 未知错误"
  },
  "doc/api/Sparks.Trader.Api.EExchange.html": {
    "href": "doc/api/Sparks.Trader.Api.EExchange.html",
    "title": "EExchange 枚举 | SparksTrader文档",
    "keywords": "EExchange 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 交易所 [Flags] public enum EExchange 字段 AMEX = 64 CFFEX = 1024 CNFuture = CFFEX | ZCE | SHFE | DCE | INE Custom = 1 自定义 当设置为自定义交易所时，可以在FileProvider和DirectoryProvider中使用 DCE = 8192 FXCM = 1048576 GFEX = 32768 HKEX = 16 IBIDEAPRO = 33554432 IBPAXOS = 134217728 IBSMART = 67108864 INE = 16384 NASDAQ = 128 NYSE = 32 SHFE = 4096 SSE = 2 SZSE = 4 Unknown = 0 ZCE = 2048"
  },
  "doc/api/Sparks.Trader.Api.EExchangeSector.html": {
    "href": "doc/api/Sparks.Trader.Api.EExchangeSector.html",
    "title": "EExchangeSector 枚举 | SparksTrader文档",
    "keywords": "EExchangeSector 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EExchangeSector 字段 CY = 2 KC = 8 Main = 1 Unknown = 0 ZX = 4"
  },
  "doc/api/Sparks.Trader.Api.EExchangeStatus.html": {
    "href": "doc/api/Sparks.Trader.Api.EExchangeStatus.html",
    "title": "EExchangeStatus 枚举 | SparksTrader文档",
    "keywords": "EExchangeStatus 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EExchangeStatus 字段 AucPausing = 2 Auction = 1 Closed = 5 Pausing = 4 Trading = 3 Unknown = 0"
  },
  "doc/api/Sparks.Trader.Api.EExchangeType.html": {
    "href": "doc/api/Sparks.Trader.Api.EExchangeType.html",
    "title": "EExchangeType 枚举 | SparksTrader文档",
    "keywords": "EExchangeType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 交易所类型，是作为交易所的子交易所，还是作为主交易所 public enum EExchangeType 字段 OPRT = 0 operating 主交易所 SGMT = 1 segment 子交易所或板块"
  },
  "doc/api/Sparks.Trader.Api.EHistoryInfoMode.html": {
    "href": "doc/api/Sparks.Trader.Api.EHistoryInfoMode.html",
    "title": "EHistoryInfoMode 枚举 | SparksTrader文档",
    "keywords": "EHistoryInfoMode 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EHistoryInfoMode 字段 Quantity = 1 TimeSpan = 2"
  },
  "doc/api/Sparks.Trader.Api.EKey.html": {
    "href": "doc/api/Sparks.Trader.Api.EKey.html",
    "title": "EKey 枚举 | SparksTrader文档",
    "keywords": "EKey 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll Specifies the possible key values on a keyboard. public enum EKey 字段 A = 44 The A key. AbntC1 = 147 The ABNT_C1 (Brazilian) key. AbntC2 = 148 The ABNT_C2 (Brazilian) key. Add = 85 The Add key. Apps = 72 The Application key (Microsoft Natural Keyboard). Attn = 163 The ATTN key. B = 45 The B key. Back = 2 The Backspace key. BrowserBack = 122 The Browser Back key. BrowserFavorites = 127 The Browser Favorites key. BrowserForward = 123 The Browser Forward key. BrowserHome = 128 The Browser Home key. BrowserRefresh = 124 The Browser Refresh key. BrowserSearch = 126 The Browser Search key. BrowserStop = 125 The Browser Stop key. C = 46 The C key. Cancel = 1 The Cancel key. CapsLock = 8 The Caps Lock key. Clear = 5 The Clear key. CrSel = 164 The CRSEL key. D = 47 The D key. D0 = 34 The 0 (zero) key. D1 = 35 The 1 (one) key. D2 = 36 The 2 key. D3 = 37 The 3 key. D4 = 38 The 4 key. D5 = 39 The 5 key. D6 = 40 The 6 key. D7 = 41 The 7 key. D8 = 42 The 8 key. D9 = 43 The 9 key. DeadCharProcessed = 172 The key is used with another key to create a single combined character. Decimal = 88 The Decimal key. Delete = 32 The Delete key. Divide = 89 The Divide key. Down = 26 The Down Arrow key. E = 48 The E key. End = 21 The End key. Enter = 6 The Enter key. EraseEof = 166 The ERASE EOF key. Escape = 13 The ESC key. ExSel = 165 The EXSEL key. Execute = 29 The Execute key. F = 49 The F key. F1 = 90 The F1 key. F10 = 99 The F10 key. F11 = 100 The F11 key. F12 = 101 The F12 key. F13 = 102 The F13 key. F14 = 103 The F14 key. F15 = 104 The F15 key. F16 = 105 The F16 key. F17 = 106 The F17 key. F18 = 107 The F18 key. F19 = 108 The F19 key. F2 = 91 The F2 key. F20 = 109 The F20 key. F21 = 110 The F21 key. F22 = 111 The F22 key. F23 = 112 The F23 key. F24 = 113 The F24 key. F3 = 92 The F3 key. F4 = 93 The F4 key. F5 = 94 The F5 key. F6 = 95 The F6 key. F7 = 96 The F7 key. F8 = 97 The F8 key. F9 = 98 The F9 key. FinalMode = 11 The IME Final mode key. G = 50 The G key. H = 51 The H key. HanjaMode = 12 The IME Hanja mode key. Help = 33 The Help key. Home = 22 The Home key. I = 52 The I key. ImeAccept = 16 The IME Accept key. ImeConvert = 14 The IME Convert key. ImeModeChange = 17 The IME Mode change request. ImeNonConvert = 15 The IME NonConvert key. ImeProcessed = 155 A special key masking the real key being processed by an IME. Insert = 31 The Insert key. J = 53 The J key. JunjaMode = 10 The IME Junja mode key. K = 54 The K key. KanaMode = 9 The IME Kana mode key. L = 55 The L key. LWin = 70 The left Windows logo key (Microsoft Natural Keyboard). LaunchApplication1 = 138 The Launch Application1 key. LaunchApplication2 = 139 The Launch Application2 key. LaunchMail = 136 The Launch Mail key. Left = 23 The Left Arrow key. LeftAlt = 120 The left ALT key. LeftCtrl = 118 The left CTRL key. LeftShift = 116 The left Shift key. LineFeed = 4 The Linefeed key. M = 56 The M key. MediaNextTrack = 132 The Media Next Track key. MediaPlayPause = 135 The Media Play Pause key. MediaPreviousTrack = 133 The Media Previous Track key. MediaStop = 134 The Media Stop key. Multiply = 84 The Multiply key. N = 57 The N key. NoName = 169 A constant reserved for future use. None = 0 No key pressed. NumLock = 114 The Num Lock key. NumPad0 = 74 The 0 key on the numeric keypad. NumPad1 = 75 The 1 key on the numeric keypad. NumPad2 = 76 The 2 key on the numeric keypad. NumPad3 = 77 The 3 key on the numeric keypad. NumPad4 = 78 The 4 key on the numeric keypad. NumPad5 = 79 The 5 key on the numeric keypad. NumPad6 = 80 The 6 key on the numeric keypad. NumPad7 = 81 The 7 key on the numeric keypad. NumPad8 = 82 The 8 key on the numeric keypad. NumPad9 = 83 The 9 key on the numeric keypad. O = 58 The O key. Oem1 = 140 The OEM 1 key. Oem102 = 154 The OEM 102 key. Oem2 = 145 The OEM 2 key. Oem3 = 146 The OEM 3 key. Oem4 = 149 The OEM 4 key. Oem5 = 150 The OEM 5 key. Oem6 = 151 The OEM 6 key. Oem7 = 152 The OEM 7 key. Oem8 = 153 The OEM 8 key. OemAttn = 157 The OEM ATTN key. OemAuto = 160 The OEM AUTO key. OemBackTab = 162 The OEM BACKTAB key. OemClear = 171 The OEM Clear key. OemComma = 142 The OEM Comma key. OemCopy = 159 The OEM COPY key. OemEnlw = 161 The OEM ENLW key. OemFinish = 158 The OEM FINISH key. OemMinus = 143 The OEM Minus key. OemPeriod = 144 The OEM Period key. OemPlus = 141 The OEM Addition key. P = 59 The P key. Pa1 = 170 The PA1 key. PageDown = 20 The Page Down key. PageUp = 19 The Page Up key. Pause = 7 The Pause key. Play = 167 The PLAY key. Print = 28 The Print key. PrintScreen = 30 The Print Screen key. Q = 60 The Q key. R = 61 The R key. RWin = 71 The right Windows logo key (Microsoft Natural Keyboard). Right = 25 The Right Arrow key. RightAlt = 121 The right ALT key. RightCtrl = 119 The right CTRL key. RightShift = 117 The right Shift key. S = 62 The S key. Scroll = 115 The Scroll Lock key. Select = 27 The Select key. SelectMedia = 137 The Select Media key. Separator = 86 The Separator key. Sleep = 73 The Computer Sleep key. Space = 18 The Spacebar key. Subtract = 87 The Subtract key. System = 156 A special key masking the real key being processed as a system key. T = 63 The T key. Tab = 3 The Tab key. U = 64 The U key. Up = 24 The Up Arrow key. V = 65 The V key. VolumeDown = 130 The Volume Down key. VolumeMute = 129 The Volume Mute key. VolumeUp = 131 The Volume Up key. W = 66 The W key. X = 67 The X key. Y = 68 The Y key. Z = 69 The Z key. Zoom = 168 The ZOOM key."
  },
  "doc/api/Sparks.Trader.Api.ELineStyle.html": {
    "href": "doc/api/Sparks.Trader.Api.ELineStyle.html",
    "title": "ELineStyle 枚举 | SparksTrader文档",
    "keywords": "ELineStyle 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum ELineStyle 字段 LineDash = 2 A dash line. LineDashdot = 4 A dash-dot line. LineDot = 3 A dot line. LineNone = 0 An invisible line. LineSolid = 1 A solid line."
  },
  "doc/api/Sparks.Trader.Api.ELinkGroup.html": {
    "href": "doc/api/Sparks.Trader.Api.ELinkGroup.html",
    "title": "ELinkGroup 枚举 | SparksTrader文档",
    "keywords": "ELinkGroup 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum ELinkGroup 字段 _1 = 1 _2 = 2 _3 = 3 _4 = 4 _5 = 5 _6 = 6 _7 = 7 _8 = 8 _9 = 9 _N = 0"
  },
  "doc/api/Sparks.Trader.Api.EmailAlertAction.html": {
    "href": "doc/api/Sparks.Trader.Api.EmailAlertAction.html",
    "title": "EmailAlertAction 类 | SparksTrader文档",
    "keywords": "EmailAlertAction 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class EmailAlertAction : AlertAction 继承 object AlertAction EmailAlertAction 继承成员 AlertAction.ActionType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 EmailAlertAction() public EmailAlertAction() EmailAlertAction(string, List<string>) public EmailAlertAction(string to, List<string> cc = null) 参数 to string cc List<string> 属性 CC [Display(Name = \"抄送\")] public List<string> CC { get; set; } 属性值 List<string> To [Display(Name = \"接收\")] public string To { get; set; } 属性值 string"
  },
  "doc/api/Sparks.Trader.Api.EMaType.html": {
    "href": "doc/api/Sparks.Trader.Api.EMaType.html",
    "title": "EMaType 枚举 | SparksTrader文档",
    "keywords": "EMaType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EMaType 字段 Exponential = 1 Use exponential weighting. Represents indicator of cAlgo.API.Indicators.ExponentialMovingAverage type. Simple = 0 Use uniform weighting. Represents indicator of cAlgo.API.Indicators.SimpleMovingAverage type. Triangular = 2 Represents indicator of cAlgo.API.Indicators.TriangularMovingAverage type. Weighted = 3 Represents indicator of cAlgo.API.Indicators.WeightedMovingAverage type. WilderSmoothing = 4 Represents indicator of cAlgo.API.Indicators.WellesWilderSmoothing type."
  },
  "doc/api/Sparks.Trader.Api.EModifierKeys.html": {
    "href": "doc/api/Sparks.Trader.Api.EModifierKeys.html",
    "title": "EModifierKeys 枚举 | SparksTrader文档",
    "keywords": "EModifierKeys 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [Flags] public enum EModifierKeys 字段 Alt = 1 The ALT key. Control = 2 The CTRL key. None = 0 No modifiers are pressed. Shift = 4 The SHIFT key."
  },
  "doc/api/Sparks.Trader.Api.EMouseButton.html": {
    "href": "doc/api/Sparks.Trader.Api.EMouseButton.html",
    "title": "EMouseButton 枚举 | SparksTrader文档",
    "keywords": "EMouseButton 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EMouseButton 字段 Left = 0 The left mouse button. Middle = 1 The middle mouse button. Right = 2 The right mouse button. XButton1 = 3 The first extended mouse button. XButton2 = 4 The second extended mouse button."
  },
  "doc/api/Sparks.Trader.Api.EMouseButtonState.html": {
    "href": "doc/api/Sparks.Trader.Api.EMouseButtonState.html",
    "title": "EMouseButtonState 枚举 | SparksTrader文档",
    "keywords": "EMouseButtonState 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EMouseButtonState 字段 Pressed = 1 The button is pressed. Released = 0 The button is released."
  },
  "doc/api/Sparks.Trader.Api.ENatureType.html": {
    "href": "doc/api/Sparks.Trader.Api.ENatureType.html",
    "title": "ENatureType 枚举 | SparksTrader文档",
    "keywords": "ENatureType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 自然类型 public enum ENatureType 字段 Bond = 2048 债券 Bullion = 256 贵金属 Commodity = 512 商品 Crypto = 1024 数字货币 Etf = 8 ETF Forex = 64 外汇 ForexIndex = 128 外汇指数 Fund = 4096 基金 Future = 16 期货 Index = 4 指数 Option = 32 期权 Stock = 2 股票 Unit = 8192 Unit Unknown = 0"
  },
  "doc/api/Sparks.Trader.Api.ENetworkFailureAction.html": {
    "href": "doc/api/Sparks.Trader.Api.ENetworkFailureAction.html",
    "title": "ENetworkFailureAction 枚举 | SparksTrader文档",
    "keywords": "ENetworkFailureAction 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 网络中断后的脚本行为 public enum ENetworkFailureAction 字段 Keep = 0 网络中断时，保持 Stop = 1 网络中断时，停止"
  },
  "doc/api/Sparks.Trader.Api.ENetworkRestoreAction.html": {
    "href": "doc/api/Sparks.Trader.Api.ENetworkRestoreAction.html",
    "title": "ENetworkRestoreAction 枚举 | SparksTrader文档",
    "keywords": "ENetworkRestoreAction 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 当因为网络中断停止后，网络恢复时的脚本行为 public enum ENetworkRestoreAction 字段 Restart = 0 网络恢复时，重新启动 Stop = 1 网络恢复时，停止"
  },
  "doc/api/Sparks.Trader.Api.EOpenClose.html": {
    "href": "doc/api/Sparks.Trader.Api.EOpenClose.html",
    "title": "EOpenClose 枚举 | SparksTrader文档",
    "keywords": "EOpenClose 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EOpenClose 字段 Close = 2 CloseToday = 4 CloseYesterday = 8 Open = 1 Unknown = 0"
  },
  "doc/api/Sparks.Trader.Api.EOrderStatus.html": {
    "href": "doc/api/Sparks.Trader.Api.EOrderStatus.html",
    "title": "EOrderStatus 枚举 | SparksTrader文档",
    "keywords": "EOrderStatus 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 订单状态 public enum EOrderStatus 字段 Canceled = 16 全部取消 CanceledPartial = 32 部分取消 Canceling = 8 取消中 Expired = 64 已过期 Filled = 128 全部成交 FilledPartial = 256 部分成交 Inactive = 512 无效订单（IB） Rejected = 4 拒绝 Submitted = 2 Submitting = 1 提交中 Unknown = 0"
  },
  "doc/api/Sparks.Trader.Api.EOrderType.html": {
    "href": "doc/api/Sparks.Trader.Api.EOrderType.html",
    "title": "EOrderType 枚举 | SparksTrader文档",
    "keywords": "EOrderType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EOrderType 字段 Limit = 1 Market = 2 Stop = 3 StopLimit = 4 止损限价单 A stop-limit order is an order to buy or sell a stock that combines the features of a stop order and a limit order. Once the stop price is reached, a stop-limit order becomes a limit order that will be executed at a specified price (or better). The benefit of a stop-limit order is that the investor can control the price at which the order can be executed. Unknown = 0"
  },
  "doc/api/Sparks.Trader.Api.EOutputType.html": {
    "href": "doc/api/Sparks.Trader.Api.EOutputType.html",
    "title": "EOutputType 枚举 | SparksTrader文档",
    "keywords": "EOutputType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll IIndicatorDatas的输出表现类型 public enum EOutputType 字段 Area = 2 区域，当data为nan时，跳过nan部分，连接2端 AreaWithBreaks = 3 区域，当data为nan时，不绘制 Circles = 6 圆 Columns = 5 作为柱状图绘制 Cross = 7 十字架 Histogram = 4 作为直方图绘制 Line = 0 普通线条，当data为nan时，跳过nan部分，连接2端 LineWithBreaks = 1 连接的线条，当data为nan时，不绘制"
  },
  "doc/api/Sparks.Trader.Api.EPL.html": {
    "href": "doc/api/Sparks.Trader.Api.EPL.html",
    "title": "EPL 枚举 | SparksTrader文档",
    "keywords": "EPL 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EPL 字段 Even = 1 Loss = 3 Profit = 2 Unknown = 0"
  },
  "doc/api/Sparks.Trader.Api.EPLPresentation.html": {
    "href": "doc/api/Sparks.Trader.Api.EPLPresentation.html",
    "title": "EPLPresentation 枚举 | SparksTrader文档",
    "keywords": "EPLPresentation 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 盈亏显示方式 public enum EPLPresentation 字段 Capital = 1 资金 None = 0 不显示 Percentage = 4 百分比 Ticks = 2 ticks"
  },
  "doc/api/Sparks.Trader.Api.EPositionCloseReason.html": {
    "href": "doc/api/Sparks.Trader.Api.EPositionCloseReason.html",
    "title": "EPositionCloseReason 枚举 | SparksTrader文档",
    "keywords": "EPositionCloseReason 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EPositionCloseReason 字段 Closed = 1 Positions was closed by trader StopLoss = 2 Position was closed by Stop Loss StopOut = 4 Position was closed because Stop Out level reached TakeProfit = 3 Position was closed by Take Profit Unknown = 0"
  },
  "doc/api/Sparks.Trader.Api.EPositionType.html": {
    "href": "doc/api/Sparks.Trader.Api.EPositionType.html",
    "title": "EPositionType 枚举 | SparksTrader文档",
    "keywords": "EPositionType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EPositionType 字段 Full = 0 Half = 1 OneThird = 2 Quater = 3"
  },
  "doc/api/Sparks.Trader.Api.EPriceType.html": {
    "href": "doc/api/Sparks.Trader.Api.EPriceType.html",
    "title": "EPriceType 枚举 | SparksTrader文档",
    "keywords": "EPriceType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EPriceType 字段 Bbo1 = 2 Bbo2 = 3 Bbo3 = 4 Bbo4 = 5 Bbo5 = 6 Last = 0 Market = 1 Queue1 = 7 Queue2 = 8 Queue3 = 9 Queue4 = 10 Queue5 = 11"
  },
  "doc/api/Sparks.Trader.Api.EProviderFunction.html": {
    "href": "doc/api/Sparks.Trader.Api.EProviderFunction.html",
    "title": "EProviderFunction 枚举 | SparksTrader文档",
    "keywords": "EProviderFunction 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll provider 功能 public enum EProviderFunction 字段 HistoryData = 2 有历史数据 None = 0 RealtimeData = 4 有实时数据 Trading = 8 可交易"
  },
  "doc/api/Sparks.Trader.Api.ERulerType.html": {
    "href": "doc/api/Sparks.Trader.Api.ERulerType.html",
    "title": "ERulerType 枚举 | SparksTrader文档",
    "keywords": "ERulerType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 测量类型 [Flags] public enum ERulerType 字段 Both = Price | Time 价格和时间范围 Price = 1 价格范围 Time = 2 时间范围"
  },
  "doc/api/Sparks.Trader.Api.ERuntime.html": {
    "href": "doc/api/Sparks.Trader.Api.ERuntime.html",
    "title": "ERuntime 枚举 | SparksTrader文档",
    "keywords": "ERuntime 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 脚本运行环境 [Flags] public enum ERuntime 字段 Editing = 4 编辑器环境 Live = 2 真实环境 Optimization = 32 优化模式 SilentBackTesting = 8 后台回测 VisualBackTesting = 16 可视回测"
  },
  "doc/api/Sparks.Trader.Api.EScriptRuntime.html": {
    "href": "doc/api/Sparks.Trader.Api.EScriptRuntime.html",
    "title": "EScriptRuntime 枚举 | SparksTrader文档",
    "keywords": "EScriptRuntime 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 脚本运行环境 public enum EScriptRuntime 字段 Live = 0 真实环境 Optimization = 3 The cBot is running in the optimization mode. SilentBackTesting = 1 后台回测 VisualBackTesting = 2 可视回测"
  },
  "doc/api/Sparks.Trader.Api.EScriptState.html": {
    "href": "doc/api/Sparks.Trader.Api.EScriptState.html",
    "title": "EScriptState 枚举 | SparksTrader文档",
    "keywords": "EScriptState 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 脚本状态 [Flags] public enum EScriptState 字段 Running = 8 脚本已经运行 Starting = 4 脚本正在启动 Stopped = 2 脚本停止 Stopping = 16 脚本停止中"
  },
  "doc/api/Sparks.Trader.Api.EScriptStopReason.html": {
    "href": "doc/api/Sparks.Trader.Api.EScriptStopReason.html",
    "title": "EScriptStopReason 枚举 | SparksTrader文档",
    "keywords": "EScriptStopReason 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 脚本停止原因 public enum EScriptStopReason 字段 NetworkFailure = 1 网络中断 Normal = 0 正常停止"
  },
  "doc/api/Sparks.Trader.Api.EScriptType.html": {
    "href": "doc/api/Sparks.Trader.Api.EScriptType.html",
    "title": "EScriptType 枚举 | SparksTrader文档",
    "keywords": "EScriptType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 脚本类型 public enum EScriptType 字段 Indicator = 0 指标 Strategy = 1 策略"
  },
  "doc/api/Sparks.Trader.Api.ESource.html": {
    "href": "doc/api/Sparks.Trader.Api.ESource.html",
    "title": "ESource 枚举 | SparksTrader文档",
    "keywords": "ESource 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum ESource 字段 Close = 8 Custom = 16 High = 2 Low = 4 Open = 1"
  },
  "doc/api/Sparks.Trader.Api.ESubscriptionStatus.html": {
    "href": "doc/api/Sparks.Trader.Api.ESubscriptionStatus.html",
    "title": "ESubscriptionStatus 枚举 | SparksTrader文档",
    "keywords": "ESubscriptionStatus 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [Flags] public enum ESubscriptionStatus 字段 Subscribed = 8 已订阅 Subscribing = 4 订阅中 Unsubscribed = 2 未订阅 Unsubscribing = 16 退订中"
  },
  "doc/api/Sparks.Trader.Api.ESymbolType.html": {
    "href": "doc/api/Sparks.Trader.Api.ESymbolType.html",
    "title": "ESymbolType 枚举 | SparksTrader文档",
    "keywords": "ESymbolType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [Flags] public enum ESymbolType 字段 Bond = 32 Bond Cfd = 65536 差价合约 Commodity = 16384 商品 Crypto = 1048576 数字货币 Economy = 33554432 Etf = 8 ETF Forex = 8192 外汇 Fund = 16 Fund Future = 2048 期货 Index = 1024 指数 Option = 4096 期权 Spot = 32768 现货 Stock = 2 普通股票 Unit = 4 单元投资信托 Unknown = 0"
  },
  "doc/api/Sparks.Trader.Api.ETextDirection.html": {
    "href": "doc/api/Sparks.Trader.Api.ETextDirection.html",
    "title": "ETextDirection 枚举 | SparksTrader文档",
    "keywords": "ETextDirection 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 文字方向 public enum ETextDirection 字段 Horizontal = 0 横式 Vertical = 1 竖式"
  },
  "doc/api/Sparks.Trader.Api.ETextWrapping.html": {
    "href": "doc/api/Sparks.Trader.Api.ETextWrapping.html",
    "title": "ETextWrapping 枚举 | SparksTrader文档",
    "keywords": "ETextWrapping 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum ETextWrapping 字段 NoWrap = 1 Wrap = 2 WrapWithOverflow = 0"
  },
  "doc/api/Sparks.Trader.Api.EThemeType.html": {
    "href": "doc/api/Sparks.Trader.Api.EThemeType.html",
    "title": "EThemeType 枚举 | SparksTrader文档",
    "keywords": "EThemeType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum EThemeType 字段 Black = 1 Light = 2 None = 0"
  },
  "doc/api/Sparks.Trader.Api.ETickerDirection.html": {
    "href": "doc/api/Sparks.Trader.Api.ETickerDirection.html",
    "title": "ETickerDirection 枚举 | SparksTrader文档",
    "keywords": "ETickerDirection 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum ETickerDirection 字段 Ask = 2 Bid = 1 Neutral = 3 Unknown = 0"
  },
  "doc/api/Sparks.Trader.Api.ETIF.html": {
    "href": "doc/api/Sparks.Trader.Api.ETIF.html",
    "title": "ETIF 枚举 | SparksTrader文档",
    "keywords": "ETIF 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll Time-In-Force, dictate the amount of time an order will keep working before it cancels public enum ETIF 字段 DAY = 5 当天结束 work until the end of the current trading day FOK = 4 Fill-or-Kill GTC = 1 Good-Till-Cancelled 直到取消前都有效 GTD = 2 Good 'til Date, expire at the end of trading on the date you select 直到指定的日期，都是有效的 fxcm的marketorder无法使用GTD IOC = 3 Immediate-or-Cancel, 马上执行或者取消 Minutes = 6 用于IB，Order are canceled if not filled in 5 minutes. https://interactivebrokers.github.io/tws-api/cryptocurrency.html OPG = 7 IB, Use OPG to send a market-on-open (MOO) or limit-on-open (LOO) order. Unknown = 0"
  },
  "doc/api/Sparks.Trader.Api.ETimeAxisScale.html": {
    "href": "doc/api/Sparks.Trader.Api.ETimeAxisScale.html",
    "title": "ETimeAxisScale 枚举 | SparksTrader文档",
    "keywords": "ETimeAxisScale 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum ETimeAxisScale 字段 D1 = 17 D10 = 14 D15 = 13 D2 = 16 D5 = 15 H1 = 22 H12 = 18 H2 = 21 H4 = 20 H6 = 19 M1 = 27 M10 = 25 M15 = 24 M30 = 23 M5 = 26 Mn1 = 12 Mn4 = 11 Mn6 = 10 Y1 = 9 Y10 = 6 Y100 = 3 Y1000 = 0 Y2 = 8 Y20 = 5 Y200 = 2 Y5 = 7 Y50 = 4 Y500 = 1"
  },
  "doc/api/Sparks.Trader.Api.ETimeFrame.html": {
    "href": "doc/api/Sparks.Trader.Api.ETimeFrame.html",
    "title": "ETimeFrame 枚举 | SparksTrader文档",
    "keywords": "ETimeFrame 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 时间周期 [Flags] public enum ETimeFrame 字段 All = T1 | Minutes | Hours | D1 | W1 | MN1 | Y1 D1 = 1024 1天 H1 = 128 1小时 H2 = 256 2小时 H4 = 512 4小时 Hours = H1 | H2 | H4 M1 = 2 1分钟 M10 = 16 10分钟 M15 = 32 15分钟 M3 = 4 3分钟 M30 = 64 30分钟 M5 = 8 5分钟 MN1 = 4096 1月 Minutes = M1 | M3 | M5 | M10 | M15 | M30 T1 = 1 tick Unknown = 0 W1 = 2048 1周 Y1 = 8192 1年"
  },
  "doc/api/Sparks.Trader.Api.ETradeDirection.html": {
    "href": "doc/api/Sparks.Trader.Api.ETradeDirection.html",
    "title": "ETradeDirection 枚举 | SparksTrader文档",
    "keywords": "ETradeDirection 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum ETradeDirection 扩展方法 TradeDirectionEx.Reverse(ETradeDirection) 字段 Bothway = 3 Buy = 1 Sell = 2 Unknown = 0"
  },
  "doc/api/Sparks.Trader.Api.ETradeErrorCode.html": {
    "href": "doc/api/Sparks.Trader.Api.ETradeErrorCode.html",
    "title": "ETradeErrorCode 枚举 | SparksTrader文档",
    "keywords": "ETradeErrorCode 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public enum ETradeErrorCode 字段 AmbiguousContract = 10 有歧义的合约 BadQuantity = 3 The volume value is not valid Disconnected = 6 The server is disconnected. EntityNotFound = 7 Position does not exist. Inoperable = 12 MarketClosed = 5 The market is closed. NoMoney = 4 There are not enough money in the account to trade with. NoTrade = 11 OrderCancelled = 14 订单被取消 OrderFinished = 15 订单已结束 OrderRejected = 13 订单被拒绝 Success = 0 TechnicalError = 2 A generic technical error with a trade request. Timeout = 8 Operation timed out. Unknown = 1 未知 UnknownSymbol = 9"
  },
  "doc/api/Sparks.Trader.Api.EWatchItemType.html": {
    "href": "doc/api/Sparks.Trader.Api.EWatchItemType.html",
    "title": "EWatchItemType 枚举 | SparksTrader文档",
    "keywords": "EWatchItemType 枚举 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 观察表条目类型 public enum EWatchItemType 字段 Section = 1 区块 Symbol = 0 Symbol"
  },
  "doc/api/Sparks.Trader.Api.ExpandableObjectGetSetPropertyConverter.html": {
    "href": "doc/api/Sparks.Trader.Api.ExpandableObjectGetSetPropertyConverter.html",
    "title": "ExpandableObjectGetSetPropertyConverter 类 | SparksTrader文档",
    "keywords": "ExpandableObjectGetSetPropertyConverter 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class ExpandableObjectGetSetPropertyConverter : TypeConverter 继承 object TypeConverter ExpandableObjectGetSetPropertyConverter 继承成员 TypeConverter.CanConvertFrom(ITypeDescriptorContext, Type) TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.CanConvertTo(Type) TypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, object) TypeConverter.ConvertFrom(object) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, string) TypeConverter.ConvertFromInvariantString(string) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, string) TypeConverter.ConvertFromString(ITypeDescriptorContext, string) TypeConverter.ConvertFromString(string) TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, object, Type) TypeConverter.ConvertTo(object, Type) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, object) TypeConverter.ConvertToInvariantString(object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, object) TypeConverter.ConvertToString(ITypeDescriptorContext, object) TypeConverter.ConvertToString(object) TypeConverter.CreateInstance(IDictionary) TypeConverter.GetConvertFromException(object) TypeConverter.GetConvertToException(object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetProperties(ITypeDescriptorContext, object) TypeConverter.GetProperties(object) TypeConverter.GetPropertiesSupported() TypeConverter.GetStandardValues() TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) TypeConverter.IsValid(ITypeDescriptorContext, object) TypeConverter.IsValid(object) TypeConverter.SortProperties(PropertyDescriptorCollection, string[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 ExpandableObjectGetSetPropertyConverter() Initializes a new instance of the System.ComponentModel.ExpandableObjectConverter class. public ExpandableObjectGetSetPropertyConverter() 方法 CreateInstance(ITypeDescriptorContext, IDictionary) Creates an instance of the type that this TypeConverter is associated with, using the specified context, given a set of property values for the object. public override object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues) 参数 context ITypeDescriptorContext An ITypeDescriptorContext that provides a format context. propertyValues IDictionary An IDictionary of new property values. 返回 object An object representing the given IDictionary, or null if the object cannot be created. This method always returns null. GetCreateInstanceSupported(ITypeDescriptorContext) Returns whether changing a value on this object requires a call to CreateInstance(IDictionary) to create a new value, using the specified context. public override bool GetCreateInstanceSupported(ITypeDescriptorContext context) 参数 context ITypeDescriptorContext An ITypeDescriptorContext that provides a format context. 返回 bool true if changing a property on this object requires a call to CreateInstance(IDictionary) to create a new value; otherwise, false. GetProperties(ITypeDescriptorContext, object, Attribute[]) Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes. public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes) 参数 context ITypeDescriptorContext An ITypeDescriptorContext that provides a format context. value object An object that specifies the type of array for which to get properties. attributes Attribute[] An array of type Attribute that is used as a filter. 返回 PropertyDescriptorCollection A PropertyDescriptorCollection with the properties that are exposed for this data type, or null if there are no properties. GetPropertiesSupported(ITypeDescriptorContext?) Gets a value indicating whether this object supports properties using the specified context. public override bool GetPropertiesSupported(ITypeDescriptorContext? context) 参数 context ITypeDescriptorContext 返回 bool GetStandardValues(ITypeDescriptorContext) Returns a collection of standard values for the data type this type converter is designed for when provided with a format context. public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) 参数 context ITypeDescriptorContext An ITypeDescriptorContext that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null. 返回 TypeConverter.StandardValuesCollection A TypeConverter.StandardValuesCollection that holds a standard set of valid values, or null if the data type does not support a standard set of values."
  },
  "doc/api/Sparks.Trader.Api.FiboLevel.html": {
    "href": "doc/api/Sparks.Trader.Api.FiboLevel.html",
    "title": "FiboLevel 类 | SparksTrader文档",
    "keywords": "FiboLevel 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll fibo level public class FiboLevel 继承 object FiboLevel 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) 属性 Color 颜色 public Color Color { get; set; } 属性值 Color Enable 是否使用 public bool Enable { get; set; } 属性值 bool Value 值 public double Value { get; set; } 属性值 double 方法 ToString() Returns a string that represents the current object. public override string ToString() 返回 string A string that represents the current object."
  },
  "doc/api/Sparks.Trader.Api.FileAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.FileAttribute.html",
    "title": "FileAttribute 类 | SparksTrader文档",
    "keywords": "FileAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class FileAttribute : Attribute 继承 object Attribute FileAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 属性 Filter public string Filter { get; set; } 属性值 string"
  },
  "doc/api/Sparks.Trader.Api.Fill.html": {
    "href": "doc/api/Sparks.Trader.Api.Fill.html",
    "title": "Fill 类 | SparksTrader文档",
    "keywords": "Fill 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class Fill 继承 object Fill 继承成员 object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) 构造函数 Fill() public Fill() Fill(Color) public Fill(Color c) 参数 c Color 字段 Black public static readonly Fill Black 字段值 Fill White public static readonly Fill White 字段值 Fill 属性 Color public Color Color { get; set; } 属性值 Color Paint public Paint Paint { get; set; } 属性值 Paint 方法 Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) 参数 obj object The object to compare with the current object. 返回 bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() 返回 int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() 返回 string A string that represents the current object. 运算符 operator ==(Fill, Fill) public static bool operator ==(Fill left, Fill right) 参数 left Fill right Fill 返回 bool operator !=(Fill, Fill) public static bool operator !=(Fill left, Fill right) 参数 left Fill right Fill 返回 bool"
  },
  "doc/api/Sparks.Trader.Api.FillAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.FillAttribute.html",
    "title": "FillAttribute 类 | SparksTrader文档",
    "keywords": "FillAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class FillAttribute : DefaultValueAttribute 继承 object Attribute DefaultValueAttribute FillAttribute 继承成员 DefaultValueAttribute.Equals(object) DefaultValueAttribute.GetHashCode() DefaultValueAttribute.SetValue(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 FillAttribute(string) public FillAttribute(string color) 参数 color string 属性 Color public Color Color { get; set; } 属性值 Color Fill public Fill Fill { get; } 属性值 Fill Paint public Paint Paint { get; } 属性值 Paint PaintBackgroundColor public Color PaintBackgroundColor { get; set; } 属性值 Color PaintForegroundColor public Color PaintForegroundColor { get; set; } 属性值 Color SolidPaintColor public Color SolidPaintColor { get; set; } 属性值 Color Value Gets the default value of the property this attribute is bound to. public override object? Value { get; } 属性值 object An object that represents the default value of the property this attribute is bound to."
  },
  "doc/api/Sparks.Trader.Api.FillEx.html": {
    "href": "doc/api/Sparks.Trader.Api.FillEx.html",
    "title": "FillEx 类 | SparksTrader文档",
    "keywords": "FillEx 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public static class FillEx 继承 object FillEx 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 方法 Apply(ICanvas, Fill, Rect?) public static void Apply(this ICanvas canvas, Fill fill, Rect? rect = null) 参数 canvas ICanvas fill Fill rect Rect? Apply(Fill, FillAttribute) public static void Apply(this Fill fill, FillAttribute attr) 参数 fill Fill attr FillAttribute"
  },
  "doc/api/Sparks.Trader.Api.FontSpec.html": {
    "href": "doc/api/Sparks.Trader.Api.FontSpec.html",
    "title": "FontSpec 类 | SparksTrader文档",
    "keywords": "FontSpec 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class FontSpec 继承 object FontSpec 继承成员 object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) 属性 Color public Color Color { get; set; } 属性值 Color Default public static Font Default { get; set; } 属性值 Font Font public IFont Font { get; set; } 属性值 IFont Size [Range(10, 40)] public float Size { get; set; } 属性值 float 方法 Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) 参数 obj object The object to compare with the current object. 返回 bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() 返回 int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() 返回 string A string that represents the current object. WithColor(Color) public FontSpec WithColor(Color c) 参数 c Color 返回 FontSpec WithFont(IFont) public FontSpec WithFont(IFont font) 参数 font IFont 返回 FontSpec WithSize(float) public FontSpec WithSize(float size) 参数 size float 返回 FontSpec 运算符 operator ==(FontSpec, FontSpec) public static bool operator ==(FontSpec left, FontSpec right) 参数 left FontSpec right FontSpec 返回 bool operator !=(FontSpec, FontSpec) public static bool operator !=(FontSpec left, FontSpec right) 参数 left FontSpec right FontSpec 返回 bool"
  },
  "doc/api/Sparks.Trader.Api.FontSpecAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.FontSpecAttribute.html",
    "title": "FontSpecAttribute 类 | SparksTrader文档",
    "keywords": "FontSpecAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class FontSpecAttribute : DefaultValueAttribute 继承 object Attribute DefaultValueAttribute FontSpecAttribute 继承成员 DefaultValueAttribute.Equals(object) DefaultValueAttribute.GetHashCode() DefaultValueAttribute.SetValue(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 FontSpecAttribute(string) public FontSpecAttribute(string color) 参数 color string 属性 Color public Color Color { get; set; } 属性值 Color Font public IFont Font { get; } 属性值 IFont FontSpec public FontSpec FontSpec { get; } 属性值 FontSpec Name public string Name { get; set; } 属性值 string Size public float Size { get; set; } 属性值 float StyleType public FontStyleType StyleType { get; set; } 属性值 FontStyleType Value Gets the default value of the property this attribute is bound to. public override object? Value { get; } 属性值 object An object that represents the default value of the property this attribute is bound to. Weight public int Weight { get; set; } 属性值 int"
  },
  "doc/api/Sparks.Trader.Api.FontSpecEx.html": {
    "href": "doc/api/Sparks.Trader.Api.FontSpecEx.html",
    "title": "FontSpecEx 类 | SparksTrader文档",
    "keywords": "FontSpecEx 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public static class FontSpecEx 继承 object FontSpecEx 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 方法 Apply(ICanvas, FontSpec) public static void Apply(this ICanvas canvas, FontSpec font) 参数 canvas ICanvas font FontSpec"
  },
  "doc/api/Sparks.Trader.Api.FormatAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.FormatAttribute.html",
    "title": "FormatAttribute 类 | SparksTrader文档",
    "keywords": "FormatAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class FormatAttribute : Attribute 继承 object Attribute FormatAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 FormatAttribute() public FormatAttribute() 属性 AnimationBaseValue public double AnimationBaseValue { get; set; } 属性值 double AnimationStat public string? AnimationStat { get; set; } 属性值 string DateTimeShowWay public EDateTimeShowWay DateTimeShowWay { get; set; } 属性值 EDateTimeShowWay FormatFuncName public string? FormatFuncName { get; set; } 属性值 string IsAnimationPrevVal public bool IsAnimationPrevVal { get; set; } 属性值 bool IsPercent public bool IsPercent { get; set; } 属性值 bool IsRealyPrevVal public bool IsRealyPrevVal { get; set; } 属性值 bool IsSummary public bool IsSummary { get; set; } 属性值 bool Precision public int Precision { get; set; } 属性值 int PrecisionFuncName public string? PrecisionFuncName { get; set; } 属性值 string RealyBaseValue public double RealyBaseValue { get; set; } 属性值 double RealyStat public string? RealyStat { get; set; } 属性值 string ShowArrow public bool ShowArrow { get; set; } 属性值 bool 方法 IsAnimation() 是否是数字动画 public bool IsAnimation() 返回 bool IsColorChanged() public bool IsColorChanged() 返回 bool IsNormal() public bool IsNormal() 返回 bool"
  },
  "doc/api/Sparks.Trader.Api.Gics.html": {
    "href": "doc/api/Sparks.Trader.Api.Gics.html",
    "title": "Gics 类 | SparksTrader文档",
    "keywords": "Gics 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class Gics 继承 object Gics 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) 构造函数 Gics() public Gics() 属性 Children public IEnumerable<Gics> Children { get; } 属性值 IEnumerable<Gics> Code public string Code { get; protected set; } 属性值 string Description public string Description { get; protected set; } 属性值 string Industry public Gics Industry { get; } 属性值 Gics IndustryGroup public Gics IndustryGroup { get; } 属性值 Gics Level public int Level { get; } 属性值 int Name public string Name { get; protected set; } 属性值 string Parent public Gics Parent { get; } 属性值 Gics Sector public Gics Sector { get; } 属性值 Gics SubIndustry public Gics SubIndustry { get; } 属性值 Gics 方法 Contains(Gics) public bool Contains(Gics g) 参数 g Gics 返回 bool GetByCode(string) public static Gics GetByCode(string code) 参数 code string 返回 Gics GetByLevel(int) public static IEnumerable<Gics> GetByLevel(int l) 参数 l int 返回 IEnumerable<Gics> GetByName(string) public static Gics GetByName(string name) 参数 name string 返回 Gics GetChildren(int) public IEnumerable<Gics> GetChildren(int depth) 参数 depth int 返回 IEnumerable<Gics> GetLevel(int) public Gics GetLevel(int i) 参数 i int 返回 Gics IsImmediateContains(Gics) public bool IsImmediateContains(Gics g) 参数 g Gics 返回 bool IsImmediateWithin(Gics) public bool IsImmediateWithin(Gics g) 参数 g Gics 返回 bool IsWithin(Gics) public bool IsWithin(Gics g) 参数 g Gics 返回 bool ToString() Returns a string that represents the current object. public override string ToString() 返回 string A string that represents the current object."
  },
  "doc/api/Sparks.Trader.Api.GraphicsHelpers.html": {
    "href": "doc/api/Sparks.Trader.Api.GraphicsHelpers.html",
    "title": "GraphicsHelpers 类 | SparksTrader文档",
    "keywords": "GraphicsHelpers 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public static class GraphicsHelpers 继承 object GraphicsHelpers 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 方法 BottomCenter(Rect) public static Point BottomCenter(this Rect r) 参数 r Rect 返回 Point BottomLeft(Rect) public static Point BottomLeft(this Rect r) 参数 r Rect 返回 Point BottomRight(Rect) public static Point BottomRight(this Rect r) 参数 r Rect 返回 Point Ceiling(Size) public static Size Ceiling(this Size value) 参数 value Size 返回 Size CenterLeft(Rect) public static Point CenterLeft(this Rect r) 参数 r Rect 返回 Point CenterPoint(Rect) public static Point CenterPoint(this Rect r) 参数 r Rect 返回 Point CenterRight(Rect) public static Point CenterRight(this Rect r) 参数 r Rect 返回 Point Floor(Size) public static Size Floor(this Size value) 参数 value Size 返回 Size Mod(Rect) public static Rect Mod(this Rect rect) 参数 rect Rect 返回 Rect Offset(Point, Point) public static Point Offset(this Point pt, Point offset) 参数 pt Point offset Point 返回 Point TopCenter(Rect) public static Point TopCenter(this Rect r) 参数 r Rect 返回 Point TopLeft(Rect) public static Point TopLeft(this Rect r) 参数 r Rect 返回 Point TopRight(Rect) public static Point TopRight(this Rect r) 参数 r Rect 返回 Point"
  },
  "doc/api/Sparks.Trader.Api.HistoryAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.HistoryAttribute.html",
    "title": "HistoryAttribute 类 | SparksTrader文档",
    "keywords": "HistoryAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class HistoryAttribute : Attribute 继承 object Attribute HistoryAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 HistoryAttribute(int) public HistoryAttribute(int quantity) 参数 quantity int HistoryAttribute(string, string) public HistoryAttribute(string start, string end = null) 参数 start string end string 属性 End public DateTime? End { get; protected set; } 属性值 DateTime? HistoryInfo public HistoryInfo HistoryInfo { get; protected set; } 属性值 HistoryInfo Quantity public int? Quantity { get; protected set; } 属性值 int? Start public DateTime? Start { get; protected set; } 属性值 DateTime?"
  },
  "doc/api/Sparks.Trader.Api.HistoryInfo.html": {
    "href": "doc/api/Sparks.Trader.Api.HistoryInfo.html",
    "title": "HistoryInfo 类 | SparksTrader文档",
    "keywords": "HistoryInfo 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class HistoryInfo 继承 object HistoryInfo 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) 构造函数 HistoryInfo() public HistoryInfo() HistoryInfo(DateTime, DateTime?) public HistoryInfo(DateTime start, DateTime? end = null) 参数 start DateTime end DateTime? HistoryInfo(int) public HistoryInfo(int quantity) 参数 quantity int 属性 End public DateTime? End { get; set; } 属性值 DateTime? Quantity public int? Quantity { get; set; } 属性值 int? Start public DateTime? Start { get; set; } 属性值 DateTime? 方法 CheckValid() public bool CheckValid() 返回 bool Concat(HistoryInfo) public HistoryInfo Concat(HistoryInfo other) 参数 other HistoryInfo 返回 HistoryInfo Mode() public EHistoryInfoMode Mode() 返回 EHistoryInfoMode ToString() Returns a string that represents the current object. public override string ToString() 返回 string A string that represents the current object."
  },
  "doc/api/Sparks.Trader.Api.html": {
    "href": "doc/api/Sparks.Trader.Api.html",
    "title": "Sparks.Trader.Api 命名空间 | SparksTrader文档",
    "keywords": "Sparks.Trader.Api 命名空间 类 AddressData AlertAction AlertCondition ChartDragEventArgs ChartKeyboardEventArgs ChartMouseEventArgs ChartMouseWheelEventArgs ChartPoint 图标点 ChartScrollEventArgs DigitsAttribute 精度特性 DirectoryAttribute DisallowInBacktesting EmailAlertAction ExpandableObjectGetSetPropertyConverter FiboLevel fibo level FileAttribute Fill FillAttribute FontSpec FontSpecAttribute FontSpecEx FormatAttribute Gics GraphicsHelpers HistoryAttribute HistoryInfo IndicatorAttribute MarketLevel OrderBookEx OrderReq OutputAttribute OutputTypeAttribute ParameterAttribute PopupAlertAction PropertyDefinitionAttribute Rtn Rtn<T> ScriptAttribute Shadow ShadowEx SoundAlertAction StatAttribute StepAttribute 加/减step StrategyAttribute Stroke StrokeAttribute StrokeEx SymbolAlertCondition SymbolContractAttribute SymbolContractSearchAttribute TextEditAttribute TimeFrameAttribute TimeValuesEx TradeDirectionEx WarnAttribute 结构 SymbolContract 接口 IAlert 警报 IAlertEvent IAlertEventManager IAlertManager IAnchoredText IBar 一个OHLC Bar Time 指得是周期的开始时间 IBars IChart 图标窗口 IChartArea 图表区域 IChartAxis 坐标轴 (0,0)在左上角, Y轴向下, X轴向右 IChartEllipse IChartIcon IChartLayout ChartLayout IChartNote chart上的提醒（订单，日历事件等） IChartObject IChartObjectBase IChartRectangle IChartSetting IChartShape IChartTimeAxis 时间轴 IChartTrades IChartTradingObject IChartTriangle IChartXAxis IChartYAxis Y轴坐标 IClosedPosition IClosedTrade ICompositePosition ICtpTick IDatas 数字序列 IDaySession IDayTicks IEllipse IExchange Exchange交易所 IExchanges IFibonacciRetracement IForexBar IForexBars IGroup<T> IHorizontalLine IIndicator 指标接口 IIndicatorArea 指标副图 IIndicatorDatas 指标数据序列，可以在chart上绘制出来 IIndicatorLevel 指标的水平线 IMainArea IMarketDataManager IMarketDatas IMarketDatas<T> IMovingAverage 移动平均线接口 IOrder IOrderBook IOrderLevel IOrderLevels IPendingOrders IPosition IProvider IProviders IRectangle IRuler IScript ISource 数据源 ISource<T> ISpotTradingAccount IStrategy 策略接口 ISymbol ISymbolInfo ISymbolInfos IText ITick ITimeValue 时间序列对象 ITimeValues ITimeValues<T> ITimes ITrade ITradeCommon ITradeLog ITraderApp ITrades ITradingAccount ITradingAccountManager ITradingHours ITradingSession ITrendLine ITriangle IVerticalLine 垂直线 IWatchItem IWatchlist 观察表 IWatchlists TradeOperation TradeResult 枚举 EAlertActionType EAlertConditionType EAlertLevel EAlertSoundDuration EAlertSource EAlertState alert 状态 EAlertTrigger EAxisLocation Axis 位置 EBarDirection Bar涨跌 EChartIconType EChartObjectType 图形类型 EChartType Chart绘制类型 EConnectReason 连接原因 EConnectionState Provider 连接状态 ECurrency 币种 EDateTimeShowWay EDiffType EDirection 方向 EDisconnectReason 断连原因 EDistrict 地区 EErrorCode 错误码 EExchange 交易所 EExchangeSector EExchangeStatus EExchangeType 交易所类型，是作为交易所的子交易所，还是作为主交易所 EHistoryInfoMode EKey Specifies the possible key values on a keyboard. ELineStyle ELinkGroup EMaType EModifierKeys EMouseButton EMouseButtonState ENatureType 自然类型 ENetworkFailureAction 网络中断后的脚本行为 ENetworkRestoreAction 当因为网络中断停止后，网络恢复时的脚本行为 EOpenClose EOrderStatus 订单状态 EOrderType EOutputType IIndicatorDatas的输出表现类型 EPL EPLPresentation 盈亏显示方式 EPositionCloseReason EPositionType EPriceType EProviderFunction provider 功能 ERulerType 测量类型 ERuntime 脚本运行环境 EScriptState 脚本状态 EScriptStopReason 脚本停止原因 EScriptType 脚本类型 ESource ESubscriptionStatus ESymbolType ETIF Time-In-Force, dictate the amount of time an order will keep working before it cancels ETextDirection 文字方向 ETextWrapping EThemeType ETickerDirection ETimeFrame 时间周期 ETradeDirection ETradeErrorCode EWatchItemType 观察表条目类型"
  },
  "doc/api/Sparks.Trader.Api.IAlert.html": {
    "href": "doc/api/Sparks.Trader.Api.IAlert.html",
    "title": "IAlert 接口 | SparksTrader文档",
    "keywords": "IAlert 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 警报 public interface IAlert 属性 Actions 通知 List<AlertAction> Actions { get; set; } 属性值 List<AlertAction> Condition 条件 AlertCondition Condition { get; set; } 属性值 AlertCondition ExpirationTime 过期时间 DateTime? ExpirationTime { get; set; } 属性值 DateTime? Message 信息 string Message { get; set; } 属性值 string Name 名字 string Name { get; set; } 属性值 string State 状态 EAlertState State { get; } 属性值 EAlertState Trigger 触发频率 EAlertTrigger Trigger { get; set; } 属性值 EAlertTrigger 方法 Start() 开始 void Start() Stop() 结束 void Stop()"
  },
  "doc/api/Sparks.Trader.Api.IAlertEvent.html": {
    "href": "doc/api/Sparks.Trader.Api.IAlertEvent.html",
    "title": "IAlertEvent 接口 | SparksTrader文档",
    "keywords": "IAlertEvent 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IAlertEvent 属性 Actions 行为 [Display(Name = \"Alert 行为\")] IReadOnlyList<AlertAction> Actions { get; } 属性值 IReadOnlyList<AlertAction> Contract 对应的symbol SymbolContract? Contract { get; } 属性值 SymbolContract? Level alert 对应的level EAlertLevel Level { get; } 属性值 EAlertLevel Message Message [Display(Name = \"Message\")] string Message { get; } 属性值 string SourceAlertId [Browsable(false)] Guid? SourceAlertId { get; } 属性值 Guid? SourceType 源 [Display(Name = \"Source\")] EAlertSource SourceType { get; } 属性值 EAlertSource Time 时间 [Display(Name = \"Time\")] DateTime Time { get; } 属性值 DateTime Title Title [Display(Name = \"Title\")] string Title { get; } 属性值 string"
  },
  "doc/api/Sparks.Trader.Api.IAlertEventManager.html": {
    "href": "doc/api/Sparks.Trader.Api.IAlertEventManager.html",
    "title": "IAlertEventManager 接口 | SparksTrader文档",
    "keywords": "IAlertEventManager 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IAlertEventManager 属性 AlertEvents ObservableCollection<IAlertEvent> AlertEvents { get; } 属性值 ObservableCollection<IAlertEvent> 方法 Alert(string, string, AlertAction, EAlertSource) void Alert(string title, string msg, AlertAction action, EAlertSource source = EAlertSource.System) 参数 title string msg string action AlertAction source EAlertSource Alert(string, string, EAlertSource) void Alert(string title, string msg, EAlertSource source = EAlertSource.System) 参数 title string msg string source EAlertSource Alert(string, string, IEnumerable<AlertAction>, EAlertSource) void Alert(string title, string msg, IEnumerable<AlertAction> actions, EAlertSource source = EAlertSource.System) 参数 title string msg string actions IEnumerable<AlertAction> source EAlertSource"
  },
  "doc/api/Sparks.Trader.Api.IAlertManager.html": {
    "href": "doc/api/Sparks.Trader.Api.IAlertManager.html",
    "title": "IAlertManager 接口 | SparksTrader文档",
    "keywords": "IAlertManager 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IAlertManager 属性 Alerts ReadOnlyObservableCollection<IAlert> Alerts { get; } 属性值 ReadOnlyObservableCollection<IAlert> 方法 Alert(string, string, EAlertTrigger, IEnumerable<AlertCondition>, IEnumerable<AlertAction>, DateTime?) void Alert(string name, string msg, EAlertTrigger trigger, IEnumerable<AlertCondition> conditions, IEnumerable<AlertAction> actions, DateTime? expirationTime) 参数 name string msg string trigger EAlertTrigger conditions IEnumerable<AlertCondition> actions IEnumerable<AlertAction> expirationTime DateTime?"
  },
  "doc/api/Sparks.Trader.Api.IAnchoredText.html": {
    "href": "doc/api/Sparks.Trader.Api.IAnchoredText.html",
    "title": "IAnchoredText 接口 | SparksTrader文档",
    "keywords": "IAnchoredText 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IAnchoredText : IChartObject, IChartObjectBase 继承成员 IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Anchor 锚点 Point Anchor { get; set; } 属性值 Point Background 背景，如果有 Fill? Background { get; set; } 属性值 Fill Border 边框，如果有 Stroke? Border { get; set; } 属性值 Stroke Content 内容 string Content { get; set; } 属性值 string FontSpec 文字规格 FontSpec FontSpec { get; set; } 属性值 FontSpec HorizontalAlignment 垂直对齐 HorizontalAlignment HorizontalAlignment { get; set; } 属性值 HorizontalAlignment Offset 距离锚点的偏移 Point Offset { get; set; } 属性值 Point VerticalAlignment 水平对齐 VerticalAlignment VerticalAlignment { get; set; } 属性值 VerticalAlignment"
  },
  "doc/api/Sparks.Trader.Api.IBar.html": {
    "href": "doc/api/Sparks.Trader.Api.IBar.html",
    "title": "IBar 接口 | SparksTrader文档",
    "keywords": "IBar 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 一个OHLC Bar Time 指得是周期的开始时间 public interface IBar : ITimeValue 继承成员 ITimeValue.Time 属性 Amplitude 振幅 double Amplitude { get; } 属性值 double BottomShadow 下影线大小 double BottomShadow { get; } 属性值 double Change 涨跌 change = close - preclose 如果preclose为nan，change=close - Open double Change { get; } 属性值 double ChangeRate 涨跌% ChangeRate = Change / PreClose 如果preclose为nan， ChangeRate = Change / Open double ChangeRate { get; } 属性值 double Close 收盘价 double Close { get; } 属性值 double Direction Bar 涨跌方向 EBarDirection Direction { get; } 属性值 EBarDirection High 最高价 double High { get; } 属性值 double LastTime 最近更新时间 DateTime LastTime { get; } 属性值 DateTime LongShadow 长影线大小 double LongShadow { get; } 属性值 double Low 最低价 double Low { get; } 属性值 double Open 开盘价 double Open { get; } 属性值 double PreClose 前收盘价，可能为nan double PreClose { get; } 属性值 double Range 振幅距离 double Range { get; } 属性值 double ShortShadow 短影线大小 double ShortShadow { get; } 属性值 double Solid 实体大小 double Solid { get; } 属性值 double SymbolInfo 对应的SymbolInfo ISymbolInfo SymbolInfo { get; } 属性值 ISymbolInfo TimeFrame 对应的周期 ETimeFrame TimeFrame { get; } 属性值 ETimeFrame TopShadow 上影线大小 double TopShadow { get; } 属性值 double Turnover bar 周期内成交量 double Turnover { get; } 属性值 double Volume bar 周期内成交量 double Volume { get; } 属性值 double"
  },
  "doc/api/Sparks.Trader.Api.IBars.html": {
    "href": "doc/api/Sparks.Trader.Api.IBars.html",
    "title": "IBars 接口 | SparksTrader文档",
    "keywords": "IBars 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IBars : IMarketDatas<IBar>, ISource<IBar>, ISource, IEnumerable<IBar>, IEnumerable, IDisposable 继承成员 IMarketDatas<IBar>.Symbol IMarketDatas<IBar>.TimeFrame IMarketDatas<IBar>.Times IMarketDatas<IBar>.IsReady IMarketDatas<IBar>.IsLive IMarketDatas<IBar>.IsLoading IMarketDatas<IBar>.LoadMoreHistoryAsync() IMarketDatas<IBar>.OnLoaded IMarketDatas<IBar>.OnHistoryLoaded IMarketDatas<IBar>.OnDisconnected IMarketDatas<IBar>.OnReloaded IMarketDatas<IBar>.OnTick ISource<IBar>.this[int] ISource<IBar>.GetRange(int, int) ISource.Count ISource.OnUpdate ISource.IsLastOpen IEnumerable<IBar>.GetEnumerator() IDisposable.Dispose() 属性 Closes IDatas Closes { get; } 属性值 IDatas Highs IDatas Highs { get; } 属性值 IDatas Lows IDatas Lows { get; } 属性值 IDatas Opens IDatas Opens { get; } 属性值 IDatas Turnovers IDatas Turnovers { get; } 属性值 IDatas Volumes IDatas Volumes { get; } 属性值 IDatas 方法 GetChange(int?) double GetChange(int? index = null) 参数 index int? 返回 double GetChangeRate(int?) double GetChangeRate(int? index = null) 参数 index int? 返回 double Last(int) IBar Last(int index = 0) 参数 index int 返回 IBar 事件 OnBarOpened Occurs when the last bar is closed and a new bar is opened. event EventHandler<IBar> OnBarOpened 事件类型 EventHandler<IBar>"
  },
  "doc/api/Sparks.Trader.Api.IChart.html": {
    "href": "doc/api/Sparks.Trader.Api.IChart.html",
    "title": "IChart 接口 | SparksTrader文档",
    "keywords": "IChart 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 图标窗口 public interface IChart 属性 Areas 区域列表 IGroup<IChartArea> Areas { get; } 属性值 IGroup<IChartArea> Bars 对应的Bars实例 IBars Bars { get; } 属性值 IBars ChartType 绘制类型 EChartType ChartType { get; set; } 属性值 EChartType Contract Contract SymbolContract Contract { get; } 属性值 SymbolContract Layout 图表layout IChartLayout Layout { get; } 属性值 IChartLayout MainArea 主图区域 IMainArea MainArea { get; } 属性值 IMainArea Runtime 运行环境 ERuntime Runtime { get; } 属性值 ERuntime Setting 图表设置 IChartSetting Setting { get; } 属性值 IChartSetting Symbol 对应的Symbol实例 ISymbol Symbol { get; } 属性值 ISymbol TimeFrame timeframe ETimeFrame TimeFrame { get; } 属性值 ETimeFrame Zoom 缩放 int Zoom { get; set; } 属性值 int"
  },
  "doc/api/Sparks.Trader.Api.IChartArea.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartArea.html",
    "title": "IChartArea 接口 | SparksTrader文档",
    "keywords": "IChartArea 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 图表区域 public interface IChartArea 属性 Axes IGroup<IChartAxis> Axes { get; } 属性值 IGroup<IChartAxis> Chart 所属的图表 IChart Chart { get; } 属性值 IChart Height 区域高度 double Height { get; } 属性值 double HoveringObject 鼠标悬浮的Chart Object IChartObject HoveringObject { get; } 属性值 IChartObject MainYAxis IChartYAxis MainYAxis { get; } 属性值 IChartYAxis Objects Chart Objects IGroup<IChartObject> Objects { get; } 属性值 IGroup<IChartObject> SelectedObjects 当前选中的Chart Objects IReadOnlyList<IChartObject> SelectedObjects { get; } 属性值 IReadOnlyList<IChartObject> Width 区域宽度 不包含axis double Width { get; } 属性值 double 方法 CreateObject<T>(params object[]) 根据参数先后顺序创建一个Chart Object T CreateObject<T>(params object[] parameterValues) where T : IChartObject 参数 parameterValues object[] 返回 T 类型参数 T DrawHorizontalLine(string, double, Stroke) IHorizontalLine DrawHorizontalLine(string name, double y, Stroke stoke) 参数 name string y double stoke Stroke 返回 IHorizontalLine DrawTrendLine(string, DateTime, double, DateTime, double, Stroke) ITrendLine DrawTrendLine(string name, DateTime x1, double y1, DateTime x2, double y2, Stroke stoke) 参数 name string x1 DateTime y1 double x2 DateTime y2 double stoke Stroke 返回 ITrendLine DrawVerticalLine(string, DateTime, Stroke) IVerticalLine DrawVerticalLine(string name, DateTime x, Stroke stoke) 参数 name string x DateTime stoke Stroke 返回 IVerticalLine FindAllObjects(EChartObjectType) 获取所有EChartObjectType的Chart Object IChartObject[] FindAllObjects(EChartObjectType chartType) 参数 chartType EChartObjectType 返回 IChartObject[] FindAllObjects<T>() 获取所有T类型的Chart Object T[] FindAllObjects<T>() where T : IChartObject 返回 T[] 类型参数 T FindObject(string) 根据名字获取Chart Object IChartObject FindObject(string name) 参数 name string 返回 IChartObject RemoveAllObjects() 删除所有由该script创建的object void RemoveAllObjects() RemoveObject(IChartObject) 删除object，只能删除script创建的Object void RemoveObject(IChartObject obj) 参数 obj IChartObject RemoveObject(string) 删除object，只能删除script创建的Object void RemoveObject(string name) 参数 name string 事件 Drag 鼠标拖拽中 event EventHandler<ChartMouseEventArgs> Drag 事件类型 EventHandler<ChartMouseEventArgs> DragEnd 鼠标拖拽结束 mouseup事件已被触发 Occurs when mouse button is released while dragging a chart area or a chart area loses mouse capture. event EventHandler<ChartMouseEventArgs> DragEnd 事件类型 EventHandler<ChartMouseEventArgs> DragStart MouseDown已触发，并且鼠标在移动时 event EventHandler<ChartMouseEventArgs> DragStart 事件类型 EventHandler<ChartMouseEventArgs> HoveringObjectChanged 鼠标悬浮的Chart Object发生变化 event Action<IChartArea> HoveringObjectChanged 事件类型 Action<IChartArea> KeyDown event EventHandler<ChartKeyboardEventArgs> KeyDown 事件类型 EventHandler<ChartKeyboardEventArgs> KeyUp event EventHandler<ChartKeyboardEventArgs> KeyUp 事件类型 EventHandler<ChartKeyboardEventArgs> MouseDown 鼠标按下时触发 event EventHandler<ChartMouseEventArgs> MouseDown 事件类型 EventHandler<ChartMouseEventArgs> MouseEnter 鼠标进入时触发 event EventHandler<ChartMouseEventArgs> MouseEnter 事件类型 EventHandler<ChartMouseEventArgs> MouseLeave 鼠标离开时触发 event EventHandler<ChartMouseEventArgs> MouseLeave 事件类型 EventHandler<ChartMouseEventArgs> MouseMove 鼠标移动时触发 event EventHandler<ChartMouseEventArgs> MouseMove 事件类型 EventHandler<ChartMouseEventArgs> MouseUp 鼠标抬起时触发 event EventHandler<ChartMouseEventArgs> MouseUp 事件类型 EventHandler<ChartMouseEventArgs> MouseWheel 鼠标轮滚动时触发 event EventHandler<ChartMouseWheelEventArgs> MouseWheel 事件类型 EventHandler<ChartMouseWheelEventArgs> ScrollChanged event EventHandler<ChartScrollEventArgs> ScrollChanged 事件类型 EventHandler<ChartScrollEventArgs> SelectedObjectsChanged 当前选中的Chart Objects发生变化 event Action<IChartArea> SelectedObjectsChanged 事件类型 Action<IChartArea> SizeChanged 区域size发生变化 event Action<IChartArea> SizeChanged 事件类型 Action<IChartArea>"
  },
  "doc/api/Sparks.Trader.Api.IChartAxis.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartAxis.html",
    "title": "IChartAxis 接口 | SparksTrader文档",
    "keywords": "IChartAxis 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 坐标轴 (0,0)在左上角, Y轴向下, X轴向右 public interface IChartAxis 属性 Background 背景 Fill Background { get; } 属性值 Fill Height 高度 double Height { get; } 属性值 double Location 位置 EAxisLocation Location { get; } 属性值 EAxisLocation Rect 绘制区域 Rect Rect { get; } 属性值 Rect Stroke 笔触 Stroke Stroke { get; } 属性值 Stroke TextFont 字体 FontSpec TextFont { get; } 属性值 FontSpec Width 宽度 double Width { get; } 属性值 double"
  },
  "doc/api/Sparks.Trader.Api.IChartCalenderAxis.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartCalenderAxis.html",
    "title": "IChartCalenderAxis 接口 | SparksTrader文档",
    "keywords": "IChartCalenderAxis 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IChartCalenderAxis : IChartXAxis, IChartAxis 继承成员 IChartXAxis.Height IChartAxis.Location IChartAxis.Rect IChartAxis.Width IChartAxis.Background IChartAxis.TextFont IChartAxis.Stroke IChartAxis.CaclSpecs()"
  },
  "doc/api/Sparks.Trader.Api.IChartEllipse.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartEllipse.html",
    "title": "IChartEllipse 接口 | SparksTrader文档",
    "keywords": "IChartEllipse 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IChartEllipse : IChartShape, IChartObject, IChartObjectBase 继承成员 IChartShape.Thickness IChartShape.LineStyle IChartShape.Color IChartShape.IsFilled IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Time1 Gets or sets the value 1 on the Time line. DateTime Time1 { get; set; } 属性值 DateTime Time2 DateTime Time2 { get; set; } 属性值 DateTime Y1 double Y1 { get; set; } 属性值 double Y2 double Y2 { get; set; } 属性值 double"
  },
  "doc/api/Sparks.Trader.Api.IChartIcon.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartIcon.html",
    "title": "IChartIcon 接口 | SparksTrader文档",
    "keywords": "IChartIcon 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IChartIcon : IChartObject, IChartObjectBase 继承成员 IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Fill Fill Fill { get; set; } 属性值 Fill IconType Gets or sets the type of the icon. EChartIconType IconType { get; set; } 属性值 EChartIconType Stroke Stroke Stroke { get; set; } 属性值 Stroke Time Gets or sets the Time value of the icon location. DateTime Time { get; set; } 属性值 DateTime Y Gets or sets the Y-axis value of the icon location. double Y { get; set; } 属性值 double"
  },
  "doc/api/Sparks.Trader.Api.IChartLayout.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartLayout.html",
    "title": "IChartLayout 接口 | SparksTrader文档",
    "keywords": "IChartLayout 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll ChartLayout public interface IChartLayout 属性 Name 名称 string Name { get; } 属性值 string 方法 Rename(string) 修改名称 Rtn Rename(string name) 参数 name string 返回 Rtn"
  },
  "doc/api/Sparks.Trader.Api.IChartNote.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartNote.html",
    "title": "IChartNote 接口 | SparksTrader文档",
    "keywords": "IChartNote 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll chart上的提醒（订单，日历事件等） public interface IChartNote : IChartObjectBase 继承成员 IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 FunctioningPart mouseover,或selected时的区域, 用于进一步提示 内部使用 string FunctioningPart { get; set; } 属性值 string"
  },
  "doc/api/Sparks.Trader.Api.IChartObject.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartObject.html",
    "title": "IChartObject 接口 | SparksTrader文档",
    "keywords": "IChartObject 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IChartObject : IChartObjectBase 继承成员 IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 IsLocked 是否被锁定，无法被删除 bool IsLocked { get; set; } 属性值 bool Name 名字 string Name { get; } 属性值 string ObjectType Object 类型 EChartObjectType ObjectType { get; } 属性值 EChartObjectType"
  },
  "doc/api/Sparks.Trader.Api.IChartObjectBase.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartObjectBase.html",
    "title": "IChartObjectBase 接口 | SparksTrader文档",
    "keywords": "IChartObjectBase 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IChartObjectBase 属性 Chart 对应的Chart IChart Chart { get; } 属性值 IChart ChartArea 对应的ChartArea IChartArea ChartArea { get; } 属性值 IChartArea IsHighlighted 是否高光显示 bool IsHighlighted { get; } 属性值 bool IsHovering 是否当前悬停状态 bool IsHovering { get; } 属性值 bool IsInteractive 是否可交互 bool IsInteractive { get; } 属性值 bool IsSelected 是否当前选中状态 bool IsSelected { get; } 属性值 bool IsVisible 是否可见 bool IsVisible { get; } 属性值 bool ZOrder ZOrder排序 int ZOrder { get; } 属性值 int 方法 ScrollTo() 定位到当前对象 void ScrollTo()"
  },
  "doc/api/Sparks.Trader.Api.IChartPoint.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartPoint.html",
    "title": "IChartPoint 接口 | SparksTrader文档",
    "keywords": "IChartPoint 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 图标点 public interface IChartPoint 属性 X DateTime X { get; set; } 属性值 DateTime Y 数量轴Y double Y { get; set; } 属性值 double"
  },
  "doc/api/Sparks.Trader.Api.IChartPriceAxis.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartPriceAxis.html",
    "title": "IChartPriceAxis 接口 | SparksTrader文档",
    "keywords": "IChartPriceAxis 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IChartPriceAxis : IChartYAxis, IChartAxis 继承成员 IChartYAxis.Width IChartYAxis.BottomY IChartYAxis.TopY IChartYAxis.YRange IChartYAxis.MinScaleHeight IChartYAxis.MaxScaleHeight IChartYAxis.ScaleHeight IChartYAxis.ScaleYRange IChartYAxis.ScaleValues IChartYAxis.GetHeightByY(double) IChartYAxis.GetYByHeight(double) IChartYAxis.PointSize IChartYAxis.Digits IChartAxis.Location IChartAxis.Rect IChartAxis.Height IChartAxis.Background IChartAxis.TextFont IChartAxis.Stroke IChartAxis.CaclSpecs()"
  },
  "doc/api/Sparks.Trader.Api.IChartRectangle.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartRectangle.html",
    "title": "IChartRectangle 接口 | SparksTrader文档",
    "keywords": "IChartRectangle 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IChartRectangle : IChartShape, IChartObject, IChartObjectBase 继承成员 IChartShape.Thickness IChartShape.LineStyle IChartShape.Color IChartShape.IsFilled IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Time1 Gets or sets the value 1 on the Time line. DateTime Time1 { get; set; } 属性值 DateTime Time2 DateTime Time2 { get; set; } 属性值 DateTime Y1 double Y1 { get; set; } 属性值 double Y2 double Y2 { get; set; } 属性值 double"
  },
  "doc/api/Sparks.Trader.Api.IChartSetting.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartSetting.html",
    "title": "IChartSetting 接口 | SparksTrader文档",
    "keywords": "IChartSetting 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IChartSetting 属性 AskStroke Ask线 Stroke AskStroke { get; set; } 属性值 Stroke AxisBackground 坐标轴background Fill AxisBackground { get; set; } 属性值 Fill AxisFont 坐标轴文字设置 FontSpec AxisFont { get; set; } 属性值 FontSpec AxisStroke 坐标轴Stroke Stroke AxisStroke { get; set; } 属性值 Stroke BackgroundColor 背景色 Color BackgroundColor { get; set; } 属性值 Color BearColor 阴颜色 Color BearColor { get; set; } 属性值 Color BearFillColor 阴线主体颜色 Color BearFillColor { get; set; } 属性值 Color BearOutlineColor 阴线轮廓颜色 Color BearOutlineColor { get; set; } 属性值 Color BidStroke Bid线 Stroke BidStroke { get; set; } 属性值 Stroke BullColor 阳颜色 Color BullColor { get; set; } 属性值 Color BullFillColor 阳线主体颜色 Color BullFillColor { get; set; } 属性值 Color BullOutlineColor 阳线轮廓颜色 Color BullOutlineColor { get; set; } 属性值 Color BuyColor 买颜色 Color BuyColor { get; set; } 属性值 Color DefaultFont 默认chart文字 FontSpec DefaultFont { get; set; } 属性值 FontSpec ForegroundColor 前景色 Color ForegroundColor { get; set; } 属性值 Color HighlightColor 高亮色 Color HighlightColor { get; set; } 属性值 Color HorizontalGridStroke 水平网格线 Stroke HorizontalGridStroke { get; set; } 属性值 Stroke IsExtendTradingPriceLine 延长订单/头寸的价格线 bool IsExtendTradingPriceLine { get; set; } 属性值 bool LastDeclineStroke 最新价线(跌) Stroke LastDeclineStroke { get; set; } 属性值 Stroke LastEvenStroke 最新价线(平) Stroke LastEvenStroke { get; set; } 属性值 Stroke LastRiseStroke 最新价线(涨) Stroke LastRiseStroke { get; set; } 属性值 Stroke MouseCrossStroke 鼠标十字线 Stroke MouseCrossStroke { get; set; } 属性值 Stroke Name 名称 string Name { get; } 属性值 string SellColor 阴颜色 Color SellColor { get; set; } 属性值 Color ShowClosedTrades 显示已了结的头寸 bool ShowClosedTrades { get; set; } 属性值 bool ShowClosedTradesText 显示已了结的头寸信息 bool ShowClosedTradesText { get; set; } 属性值 bool ShowGrid 显示网格线 bool ShowGrid { get; set; } 属性值 bool ShowOrders 显示订单 bool ShowOrders { get; set; } 属性值 bool ShowPositions 显示持仓 bool ShowPositions { get; set; } 属性值 bool TradingPLPresentation 持仓盈亏表现 EPLPresentation TradingPLPresentation { get; set; } 属性值 EPLPresentation TradingTextAlignment 订单/仓位文字对齐 HorizontalAlignment TradingTextAlignment { get; set; } 属性值 HorizontalAlignment VerticalGridStroke 垂直网格线 Stroke VerticalGridStroke { get; set; } 属性值 Stroke 方法 GetColor(EBarDirection) 根据barDirection获取颜色 Color GetColor(EBarDirection direction) 参数 direction EBarDirection 返回 Color GetColor(EPL) Color GetColor(EPL plType) 参数 plType EPL 返回 Color GetColor(ETradeDirection) 根据tradedirection获取color Color GetColor(ETradeDirection direction) 参数 direction ETradeDirection 返回 Color GetPriceStroke(EBarDirection) Stroke GetPriceStroke(EBarDirection direction = EBarDirection.Up) 参数 direction EBarDirection 返回 Stroke Rename(string) 修改名称 Rtn Rename(string name) 参数 name string 返回 Rtn Reset() 重置 void Reset()"
  },
  "doc/api/Sparks.Trader.Api.IChartShape.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartShape.html",
    "title": "IChartShape 接口 | SparksTrader文档",
    "keywords": "IChartShape 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IChartShape : IChartObject, IChartObjectBase 继承成员 IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Color Gets or sets the line color. Color Color { get; set; } 属性值 Color IsFilled Defines if the shape is filled. bool IsFilled { get; set; } 属性值 bool LineStyle Gets or sets the line style. ELineStyle LineStyle { get; set; } 属性值 ELineStyle Thickness Gets or sets the line thickness. int Thickness { get; set; } 属性值 int"
  },
  "doc/api/Sparks.Trader.Api.IChartTimeAxis.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartTimeAxis.html",
    "title": "IChartTimeAxis 接口 | SparksTrader文档",
    "keywords": "IChartTimeAxis 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 时间轴 public interface IChartTimeAxis : IChartXAxis, IChartAxis 继承成员 IChartAxis.Location IChartAxis.Rect IChartAxis.Height IChartAxis.Width IChartAxis.Background IChartAxis.TextFont IChartAxis.Stroke 属性 Scales 刻度 IReadOnlyList<DateTime> Scales { get; } 属性值 IReadOnlyList<DateTime> 方法 GetDateTimeByUnitIndex(int) 根据图上的Unit Index来获取对应的时间 DateTime? GetDateTimeByUnitIndex(int index) 参数 index int 返回 DateTime? GetDateTimeByX(double) 根据x坐标获取对应的时间 DateTime? GetDateTimeByX(double x) 参数 x double 返回 DateTime? GetXByDataTime(DateTime) 根据时间获取对应的X坐标 double? GetXByDataTime(DateTime dt) 参数 dt DateTime 返回 double?"
  },
  "doc/api/Sparks.Trader.Api.IChartTrades.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartTrades.html",
    "title": "IChartTrades 接口 | SparksTrader文档",
    "keywords": "IChartTrades 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IChartTrades : IChartTradingObject, IChartObject, IChartObjectBase 继承成员 IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Direction ETradeDirection Direction { get; } 属性值 ETradeDirection Time DateTime Time { get; } 属性值 DateTime Trades IReadOnlyList<ITradeCommon> Trades { get; } 属性值 IReadOnlyList<ITradeCommon>"
  },
  "doc/api/Sparks.Trader.Api.IChartTradingObject.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartTradingObject.html",
    "title": "IChartTradingObject 接口 | SparksTrader文档",
    "keywords": "IChartTradingObject 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IChartTradingObject : IChartObject, IChartObjectBase 继承成员 IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo()"
  },
  "doc/api/Sparks.Trader.Api.IChartTriangle.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartTriangle.html",
    "title": "IChartTriangle 接口 | SparksTrader文档",
    "keywords": "IChartTriangle 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IChartTriangle : IChartShape, IChartObject, IChartObjectBase 继承成员 IChartShape.Thickness IChartShape.LineStyle IChartShape.Color IChartShape.IsFilled IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Time1 Gets or sets the value 1 on the Time line. DateTime Time1 { get; set; } 属性值 DateTime Time2 DateTime Time2 { get; set; } 属性值 DateTime Time3 DateTime Time3 { get; set; } 属性值 DateTime Y1 double Y1 { get; set; } 属性值 double Y2 double Y2 { get; set; } 属性值 double Y3 double Y3 { get; set; } 属性值 double"
  },
  "doc/api/Sparks.Trader.Api.IChartXAxis.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartXAxis.html",
    "title": "IChartXAxis 接口 | SparksTrader文档",
    "keywords": "IChartXAxis 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IChartXAxis : IChartAxis 继承成员 IChartAxis.Location IChartAxis.Rect IChartAxis.Height IChartAxis.Width IChartAxis.Background IChartAxis.TextFont IChartAxis.Stroke"
  },
  "doc/api/Sparks.Trader.Api.IChartYAxis.html": {
    "href": "doc/api/Sparks.Trader.Api.IChartYAxis.html",
    "title": "IChartYAxis 接口 | SparksTrader文档",
    "keywords": "IChartYAxis 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll Y轴坐标 public interface IChartYAxis : IChartAxis 继承成员 IChartAxis.Location IChartAxis.Rect IChartAxis.Height IChartAxis.Width IChartAxis.Background IChartAxis.TextFont IChartAxis.Stroke 属性 BottomValue 底部值 double BottomValue { get; } 属性值 double Digits 小数位精度 int Digits { get; set; } 属性值 int MaxScaleHeight 最大刻度高 double MaxScaleHeight { get; set; } 属性值 double MinScaleHeight 最小刻度高 double MinScaleHeight { get; set; } 属性值 double PointSize 基本点差 double PointSize { get; set; } 属性值 double ScaleHeight 当前刻度高 double ScaleHeight { get; } 属性值 double ScaleValueRange 一个刻度代表的值范围 double ScaleValueRange { get; } 属性值 double ScaleValues 当前所有刻度value值 IReadOnlyList<double> ScaleValues { get; } 属性值 IReadOnlyList<double> TopValue 顶部值 double TopValue { get; } 属性值 double ValueRange 数据范围 double ValueRange { get; } 属性值 double 方法 GetValueByY(double) 根据高度y获取value double GetValueByY(double y) 参数 y double 返回 double GetYByValue(double) 根据value获取高度y double GetYByValue(double value) 参数 value double 返回 double"
  },
  "doc/api/Sparks.Trader.Api.IClosedPosition.html": {
    "href": "doc/api/Sparks.Trader.Api.IClosedPosition.html",
    "title": "IClosedPosition 接口 | SparksTrader文档",
    "keywords": "IClosedPosition 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IClosedPosition : IPosition, INotifyPropertyChanged 继承成员 IPosition.Account IPosition.Symbol IPosition.Code IPosition.SymbolType IPosition.ExchangeCode IPosition.Currency IPosition.Direction IPosition.AvgPrice IPosition.Commission IPosition.Quantity IPosition.OpenMarketValue IPosition.MarketValue IPosition.Last IPosition.Margin IPosition.PLType IPosition.PLPips IPosition.PL IPosition.PLRatio IPosition.PLPresentationString(EPLPresentation) IPosition.Close(double?, Action<TradeResult>) INotifyPropertyChanged.PropertyChanged 属性 Balance double Balance { get; } 属性值 double CloseOrderID string CloseOrderID { get; } 属性值 string ClosePrice [Display(Name = \"平单价格\")] double ClosePrice { get; } 属性值 double CloseReason EPositionCloseReason CloseReason { get; } 属性值 EPositionCloseReason CloseTime [Display(Name = \"最新价\")] DateTime? CloseTime { get; } 属性值 DateTime? HoldingTime [Display(Name = \"持单时间\")] TimeSpan? HoldingTime { get; } 属性值 TimeSpan? TradeID string TradeID { get; } 属性值 string"
  },
  "doc/api/Sparks.Trader.Api.IClosedTrade.html": {
    "href": "doc/api/Sparks.Trader.Api.IClosedTrade.html",
    "title": "IClosedTrade 接口 | SparksTrader文档",
    "keywords": "IClosedTrade 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IClosedTrade : ITradeCommon, INotifyPropertyChanged 继承成员 ITradeCommon.Id ITradeCommon.AccountCode ITradeCommon.Account ITradeCommon.Symbol ITradeCommon.Contract ITradeCommon.Code ITradeCommon.SymbolType ITradeCommon.ExchangeCode ITradeCommon.Currency ITradeCommon.OpenOrderID ITradeCommon.OpenOrder ITradeCommon.OpenTime ITradeCommon.OpenPrice ITradeCommon.OpenMarketValue ITradeCommon.Direction ITradeCommon.Quantity ITradeCommon.PLType ITradeCommon.PLPips ITradeCommon.PL ITradeCommon.PLRatio ITradeCommon.Commission ITradeCommon.Comment ITradeCommon.PLPresentationString(EPLPresentation) INotifyPropertyChanged.PropertyChanged 属性 CloseOrder 平仓单 IOrder CloseOrder { get; } 属性值 IOrder CloseOrderID 平仓单，如果有 string CloseOrderID { get; } 属性值 string ClosePrice 平仓价格 double ClosePrice { get; } 属性值 double CloseTime 平仓时间 DateTime? CloseTime { get; } 属性值 DateTime? HoldingTime 持仓时间 TimeSpan? HoldingTime { get; } 属性值 TimeSpan?"
  },
  "doc/api/Sparks.Trader.Api.ICompositePosition.html": {
    "href": "doc/api/Sparks.Trader.Api.ICompositePosition.html",
    "title": "ICompositePosition 接口 | SparksTrader文档",
    "keywords": "ICompositePosition 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ICompositePosition : IPosition, INotifyPropertyChanged 继承成员 IPosition.Account IPosition.Symbol IPosition.Code IPosition.SymbolType IPosition.ExchangeCode IPosition.Currency IPosition.Direction IPosition.AvgPrice IPosition.Commission IPosition.Quantity IPosition.OpenMarketValue IPosition.MarketValue IPosition.Last IPosition.Margin IPosition.PLType IPosition.PLPips IPosition.PL IPosition.PLRatio IPosition.PLPresentationString(EPLPresentation) IPosition.Close(double?, Action<TradeResult>) INotifyPropertyChanged.PropertyChanged 属性 Positions ReadOnlyObservableCollection<IPosition> Positions { get; } 属性值 ReadOnlyObservableCollection<IPosition>"
  },
  "doc/api/Sparks.Trader.Api.ICtpTick.html": {
    "href": "doc/api/Sparks.Trader.Api.ICtpTick.html",
    "title": "ICtpTick 接口 | SparksTrader文档",
    "keywords": "ICtpTick 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ICtpTick : ITick, ITimeValue 继承成员 ITick.SymbolInfo ITick.Last ITick.LastVolume ITick.LastTurnover ITick.Ask ITick.AskVolume ITick.AskOrders ITick.Bid ITick.BidVolume ITick.BidOrders ITick.Spread ITick.BidLevels ITick.AskLevels ITick.BidDepth ITick.AskDepth ITick.PreClose ITick.Open ITick.High ITick.Low ITick.Close ITick.FormatMoney(double) ITick.DigitsFun() ITimeValue.Time 属性 AveragePrice double AveragePrice { get; } 属性值 double ExchangeStatus EExchangeStatus ExchangeStatus { get; } 属性值 EExchangeStatus LowerLimit double LowerLimit { get; } 属性值 double OpenInterest double OpenInterest { get; } 属性值 double PreOpenInterest double PreOpenInterest { get; } 属性值 double PreSettlement double PreSettlement { get; } 属性值 double Settlement double Settlement { get; } 属性值 double TotalTurnover double TotalTurnover { get; } 属性值 double TotalVolume double TotalVolume { get; } 属性值 double UpperLimit double UpperLimit { get; } 属性值 double"
  },
  "doc/api/Sparks.Trader.Api.IDatas.html": {
    "href": "doc/api/Sparks.Trader.Api.IDatas.html",
    "title": "IDatas 接口 | SparksTrader文档",
    "keywords": "IDatas 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 数字序列 public interface IDatas : ISource<double>, ISource, IEnumerable<double>, IEnumerable 继承成员 ISource<double>.this[int] ISource<double>.GetRange(int, int) ISource.Count ISource.OnUpdate ISource.IsLastOpen IEnumerable<double>.GetEnumerator() 属性 Digits 精度 int Digits { get; } 属性值 int FirstNotNanIndex int FirstNotNanIndex { get; } 属性值 int IsDeclining bool IsDeclining { get; } 属性值 bool IsRising bool IsRising { get; } 属性值 bool LastNotNanIndex int LastNotNanIndex { get; } 属性值 int LastValue double LastValue { get; } 属性值 double 方法 Avg(int) double Avg(int count) 参数 count int 返回 double Avg(int, int) double Avg(int from, int to) 参数 from int to int 返回 double CrossDown(IDatas, int?, int?) bool CrossDown(IDatas other, int? period1 = null, int? period2 = null) 参数 other IDatas period1 int? period2 int? 返回 bool CrossOver(IDatas, int?, int?) bool CrossOver(IDatas other, int? period1 = null, int? period2 = null) 参数 other IDatas period1 int? period2 int? 返回 bool Last(int) double Last(int index = 0) 参数 index int 返回 double Max(int) double Max(int count) 参数 count int 返回 double Max(int, int) double Max(int from, int to) 参数 from int to int 返回 double Min(int) double Min(int count) 参数 count int 返回 double Min(int, int) double Min(int from, int to) 参数 from int to int 返回 double StDev(int) double StDev(int count) 参数 count int 返回 double StDev(int, int) double StDev(int from, int to) 参数 from int to int 返回 double Sum(int) double Sum(int count) 参数 count int 返回 double Sum(int, int) double Sum(int from, int to) 参数 from int to int 返回 double"
  },
  "doc/api/Sparks.Trader.Api.IDaySession.html": {
    "href": "doc/api/Sparks.Trader.Api.IDaySession.html",
    "title": "IDaySession 接口 | SparksTrader文档",
    "keywords": "IDaySession 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IDaySession 属性 DaySpan [JsonIgnore] IReadOnlySet<DayOfWeek> DaySpan { get; } 属性值 IReadOnlySet<DayOfWeek> EndDay DayOfWeek EndDay { get; } 属性值 DayOfWeek EndTime TimeSpan EndTime { get; } 属性值 TimeSpan MainDay DayOfWeek MainDay { get; } 属性值 DayOfWeek StartDay DayOfWeek StartDay { get; } 属性值 DayOfWeek StartTime TimeSpan StartTime { get; } 属性值 TimeSpan TradingHours [JsonIgnore] ITradingHours TradingHours { get; } 属性值 ITradingHours TradingSessions IReadOnlyList<ITradingSession> TradingSessions { get; } 属性值 IReadOnlyList<ITradingSession> 方法 GetBarDay(DateTime?, bool) DateTime? GetBarDay(DateTime? datetime = null, bool convertTime = true) 参数 datetime DateTime? convertTime bool 返回 DateTime? IsEnd(DateTime, bool) bool IsEnd(DateTime dt, bool convertTime = true) 参数 dt DateTime convertTime bool 返回 bool IsOpened(DateTime?, out ITradingSession, bool) bool IsOpened(DateTime? datetime, out ITradingSession session, bool convertTime = true) 参数 datetime DateTime? session ITradingSession convertTime bool 返回 bool IsOpened(DateTime?, bool) bool IsOpened(DateTime? datetime = null, bool convertTime = true) 参数 datetime DateTime? convertTime bool 返回 bool IsStart(DateTime, bool) bool IsStart(DateTime dt, bool convertTime = true) 参数 dt DateTime convertTime bool 返回 bool"
  },
  "doc/api/Sparks.Trader.Api.IDayTicks.html": {
    "href": "doc/api/Sparks.Trader.Api.IDayTicks.html",
    "title": "IDayTicks 接口 | SparksTrader文档",
    "keywords": "IDayTicks 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IDayTicks : IMarketDatas<ITick>, ISource<ITick>, ISource, IEnumerable<ITick>, IEnumerable, IDisposable 继承成员 IMarketDatas<ITick>.Symbol IMarketDatas<ITick>.TimeFrame IMarketDatas<ITick>.Times IMarketDatas<ITick>.IsReady IMarketDatas<ITick>.IsLive IMarketDatas<ITick>.IsLoading IMarketDatas<ITick>.LoadMoreHistoryAsync() IMarketDatas<ITick>.OnLoaded IMarketDatas<ITick>.OnHistoryLoaded IMarketDatas<ITick>.OnDisconnected IMarketDatas<ITick>.OnReloaded IMarketDatas<ITick>.OnTick ISource<ITick>.this[int] ISource<ITick>.GetRange(int, int) ISource.Count ISource.OnUpdate ISource.IsLastOpen IEnumerable<ITick>.GetEnumerator() IDisposable.Dispose() 属性 LastTurnovers IDatas LastTurnovers { get; } 属性值 IDatas LastVolumes IDatas LastVolumes { get; } 属性值 IDatas Lasts IDatas Lasts { get; } 属性值 IDatas TradingDay DateTime TradingDay { get; } 属性值 DateTime 方法 Last(int) ITick Last(int index = 0) 参数 index int 返回 ITick"
  },
  "doc/api/Sparks.Trader.Api.IEllipse.html": {
    "href": "doc/api/Sparks.Trader.Api.IEllipse.html",
    "title": "IEllipse 接口 | SparksTrader文档",
    "keywords": "IEllipse 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IEllipse : IChartObject, IChartObjectBase 继承成员 IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Content 内容 string Content { get; set; } 属性值 string End 结束点 ChartPoint End { get; set; } 属性值 ChartPoint Fill 背景，如果有 Fill? Fill { get; set; } 属性值 Fill FontSpec 文字规格 FontSpec FontSpec { get; set; } 属性值 FontSpec ShowText 显示文本 bool ShowText { get; set; } 属性值 bool Start 开始点 ChartPoint Start { get; set; } 属性值 ChartPoint Stroke 线型 Stroke Stroke { get; set; } 属性值 Stroke"
  },
  "doc/api/Sparks.Trader.Api.IExchange.html": {
    "href": "doc/api/Sparks.Trader.Api.IExchange.html",
    "title": "IExchange 接口 | SparksTrader文档",
    "keywords": "IExchange 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll Exchange交易所 public interface IExchange 属性 City 城市 string City { get; } 属性值 string Code 代码，唯一标识一个交易所 string Code { get; } 属性值 string Currency 货币 ECurrency Currency { get; } 属性值 ECurrency Desc 描述 string Desc { get; } 属性值 string District 国家或地区 EDistrict District { get; } 属性值 EDistrict IconPath icon path string IconPath { get; } 属性值 string LEI Legal Entity Identifier (LEI)标识 string LEI { get; } 属性值 string Mic Market Identifier Code, 交易所唯一标识 string Mic { get; } 属性值 string Name 名称 string Name { get; } 属性值 string OperatingMic Operating Mic, 交易所运营mic string OperatingMic { get; } 属性值 string Type 交易所类型 主/从交易所 EExchangeType Type { get; } 属性值 EExchangeType WebSite 网站 string WebSite { get; } 属性值 string"
  },
  "doc/api/Sparks.Trader.Api.IExchanges.html": {
    "href": "doc/api/Sparks.Trader.Api.IExchanges.html",
    "title": "IExchanges 接口 | SparksTrader文档",
    "keywords": "IExchanges 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IExchanges : IGroup<IExchange>, IReadOnlyList<IExchange>, IReadOnlyCollection<IExchange>, IEnumerable<IExchange>, IEnumerable 继承成员 IGroup<IExchange>.Added IGroup<IExchange>.Removed IReadOnlyList<IExchange>.this[int] IReadOnlyCollection<IExchange>.Count IEnumerable<IExchange>.GetEnumerator()"
  },
  "doc/api/Sparks.Trader.Api.IFibonacciRetracement.html": {
    "href": "doc/api/Sparks.Trader.Api.IFibonacciRetracement.html",
    "title": "IFibonacciRetracement 接口 | SparksTrader文档",
    "keywords": "IFibonacciRetracement 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IFibonacciRetracement : IChartObject, IChartObjectBase 继承成员 IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 End 结束点 ChartPoint End { get; set; } 属性值 ChartPoint FillAlpha 填充alpha double? FillAlpha { get; set; } 属性值 double? FontSpec 文字规格 FontSpec FontSpec { get; set; } 属性值 FontSpec HorizontalAlignment 标签垂直 HorizontalAlignment HorizontalAlignment { get; set; } 属性值 HorizontalAlignment LevelStroke 水平线 Stroke LevelStroke { get; set; } 属性值 Stroke Levels 等级 List<FiboLevel> Levels { get; set; } 属性值 List<FiboLevel> ShowLevelValue 显示水平数值 bool ShowLevelValue { get; set; } 属性值 bool ShowPrice 显示价格 bool ShowPrice { get; set; } 属性值 bool Start 开始点 ChartPoint Start { get; set; } 属性值 ChartPoint TrendLineStroke 趋势线 Stroke? TrendLineStroke { get; set; } 属性值 Stroke VerticalAlignment 标签水平 VerticalAlignment VerticalAlignment { get; set; } 属性值 VerticalAlignment"
  },
  "doc/api/Sparks.Trader.Api.IForexBar.html": {
    "href": "doc/api/Sparks.Trader.Api.IForexBar.html",
    "title": "IForexBar 接口 | SparksTrader文档",
    "keywords": "IForexBar 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IForexBar : IBar, ITimeValue 继承成员 IBar.SymbolInfo IBar.TimeFrame IBar.Open IBar.High IBar.Low IBar.Close IBar.Volume IBar.Turnover IBar.PreClose IBar.LastTime IBar.Direction IBar.Range IBar.Solid IBar.TopShadow IBar.BottomShadow IBar.LongShadow IBar.ShortShadow IBar.Amplitude IBar.Change IBar.ChangeRate ITimeValue.Time 属性 AskClose double AskClose { get; } 属性值 double AskHigh double AskHigh { get; } 属性值 double AskLow double AskLow { get; } 属性值 double AskOpen double AskOpen { get; } 属性值 double BidClose double BidClose { get; } 属性值 double BidHigh double BidHigh { get; } 属性值 double BidLow double BidLow { get; } 属性值 double BidOpen double BidOpen { get; } 属性值 double"
  },
  "doc/api/Sparks.Trader.Api.IForexBars.html": {
    "href": "doc/api/Sparks.Trader.Api.IForexBars.html",
    "title": "IForexBars 接口 | SparksTrader文档",
    "keywords": "IForexBars 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IForexBars : IBars, IMarketDatas<IBar>, ISource<IBar>, ISource, IEnumerable<IBar>, IEnumerable, IDisposable 继承成员 IBars.Opens IBars.Highs IBars.Lows IBars.Closes IBars.Volumes IBars.Turnovers IBars.Last(int) IBars.GetChange(int?) IBars.GetChangeRate(int?) IBars.OnBarOpened IMarketDatas<IBar>.Symbol IMarketDatas<IBar>.TimeFrame IMarketDatas<IBar>.Times IMarketDatas<IBar>.IsReady IMarketDatas<IBar>.IsLive IMarketDatas<IBar>.IsLoading IMarketDatas<IBar>.LoadMoreHistoryAsync() IMarketDatas<IBar>.OnLoaded IMarketDatas<IBar>.OnHistoryLoaded IMarketDatas<IBar>.OnDisconnected IMarketDatas<IBar>.OnReloaded IMarketDatas<IBar>.OnTick ISource<IBar>.this[int] ISource<IBar>.GetRange(int, int) ISource.Count ISource.OnUpdate ISource.IsLastOpen IEnumerable<IBar>.GetEnumerator() IDisposable.Dispose() 属性 AskClose IDatas AskClose { get; } 属性值 IDatas AskHigh IDatas AskHigh { get; } 属性值 IDatas AskLow IDatas AskLow { get; } 属性值 IDatas AskOpen IDatas AskOpen { get; } 属性值 IDatas BidClose IDatas BidClose { get; } 属性值 IDatas BidHigh IDatas BidHigh { get; } 属性值 IDatas BidLow IDatas BidLow { get; } 属性值 IDatas BidOpen IDatas BidOpen { get; } 属性值 IDatas"
  },
  "doc/api/Sparks.Trader.Api.IGroup-1.html": {
    "href": "doc/api/Sparks.Trader.Api.IGroup-1.html",
    "title": "IGroup<T> 接口 | SparksTrader文档",
    "keywords": "IGroup<T> 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IGroup<T> : IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable 类型参数 T 继承成员 IReadOnlyList<T>.this[int] IReadOnlyCollection<T>.Count IEnumerable<T>.GetEnumerator() 事件 Added 添加 event EventHandler<IEnumerable<T>> Added 事件类型 EventHandler<IEnumerable<T>> Removed 删除 event EventHandler<IEnumerable<T>> Removed 事件类型 EventHandler<IEnumerable<T>>"
  },
  "doc/api/Sparks.Trader.Api.IHorizontalLine.html": {
    "href": "doc/api/Sparks.Trader.Api.IHorizontalLine.html",
    "title": "IHorizontalLine 接口 | SparksTrader文档",
    "keywords": "IHorizontalLine 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IHorizontalLine : IChartObject, IChartObjectBase 继承成员 IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Content 内容 string Content { get; set; } 属性值 string FontSpec 文字规格 FontSpec FontSpec { get; set; } 属性值 FontSpec HorizontalAlignment 水平对齐 HorizontalAlignment HorizontalAlignment { get; set; } 属性值 HorizontalAlignment ShowText 显示文本 bool ShowText { get; set; } 属性值 bool Stroke 线型 Stroke Stroke { get; set; } 属性值 Stroke VerticalAlignment 垂直对齐 VerticalAlignment VerticalAlignment { get; set; } 属性值 VerticalAlignment Y Y值 double Y { get; set; } 属性值 double"
  },
  "doc/api/Sparks.Trader.Api.IIndicator.html": {
    "href": "doc/api/Sparks.Trader.Api.IIndicator.html",
    "title": "IIndicator 接口 | SparksTrader文档",
    "keywords": "IIndicator 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 指标接口 public interface IIndicator : IScript, IChartObjectBase 继承成员 IScript.ScriptType IScript.NetworkFailureAction IScript.NetworkRestoreAction IScript.StopReason IScript.Runtime IScript.IsLocked IScript.UserDataPath IScript.Name IScript.LongName IScript.Desc IScript.Group IScript.Symbol IScript.Bars IScript.State IScript.IsHistoryOver IScript.Info(object) IScript.Warn(object) IScript.Error(object) IScript.Performance() IScript.Alert(string, string, EAlertLevel, SymbolContract?) IScript.Alert(string, string, AlertAction, EAlertLevel, SymbolContract?) IScript.Alert(string, string, IEnumerable<AlertAction>, EAlertLevel, SymbolContract?) IScript.CreateIndicator<T>(params object[]) IScript.CreateMA(EMaType, IDatas, int) IScript.Children IScript.CreateIndicatorDatas(int?) IScript.OnStart() IScript.OnStop() IScript.OnData(ISource, int) IScript.SetBackground(int, Fill) IScript.GetBackground(int) IScript.ResetBackground(int) IScript.ResetBackgrounds() IScript.Fill(IIndicatorDatas, IIndicatorDatas, Fill, Fill) IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 IsOverlay 是否覆盖在主图上 false: 指标会创建一个副图 bool IsOverlay { get; } 属性值 bool"
  },
  "doc/api/Sparks.Trader.Api.IIndicatorArea.html": {
    "href": "doc/api/Sparks.Trader.Api.IIndicatorArea.html",
    "title": "IIndicatorArea 接口 | SparksTrader文档",
    "keywords": "IIndicatorArea 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 指标副图 public interface IIndicatorArea : IChartArea 继承成员 IChartArea.Chart IChartArea.Width IChartArea.Height IChartArea.SizeChanged IChartArea.MainYAxis IChartArea.Axes IChartArea.MouseEnter IChartArea.MouseLeave IChartArea.MouseMove IChartArea.MouseDown IChartArea.MouseUp IChartArea.MouseWheel IChartArea.DragStart IChartArea.DragEnd IChartArea.Drag IChartArea.ScrollChanged IChartArea.KeyDown IChartArea.KeyUp IChartArea.DrawHorizontalLine(string, double, Stroke) IChartArea.DrawVerticalLine(string, DateTime, Stroke) IChartArea.DrawTrendLine(string, DateTime, double, DateTime, double, Stroke) IChartArea.CreateObject<T>(params object[]) IChartArea.Objects IChartArea.SelectedObjects IChartArea.SelectedObjectsChanged IChartArea.HoveringObject IChartArea.HoveringObjectChanged IChartArea.FindAllObjects<T>() IChartArea.FindAllObjects(EChartObjectType) IChartArea.FindObject(string) IChartArea.RemoveObject(string) IChartArea.RemoveObject(IChartObject) IChartArea.RemoveAllObjects()"
  },
  "doc/api/Sparks.Trader.Api.IIndicatorDatas.html": {
    "href": "doc/api/Sparks.Trader.Api.IIndicatorDatas.html",
    "title": "IIndicatorDatas 接口 | SparksTrader文档",
    "keywords": "IIndicatorDatas 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 指标数据序列，可以在chart上绘制出来 public interface IIndicatorDatas : IDatas, ISource<double>, ISource, IEnumerable<double>, IEnumerable, IChartObjectBase 继承成员 IDatas.FirstNotNanIndex IDatas.LastNotNanIndex IDatas.LastValue IDatas.Last(int) IDatas.Min(int, int) IDatas.Min(int) IDatas.Max(int, int) IDatas.Max(int) IDatas.Sum(int, int) IDatas.Sum(int) IDatas.Avg(int, int) IDatas.Avg(int) IDatas.StDev(int, int) IDatas.StDev(int) IDatas.CrossOver(IDatas, int?, int?) IDatas.CrossDown(IDatas, int?, int?) IDatas.IsRising IDatas.IsDeclining ISource<double>.GetRange(int, int) ISource.Count ISource.OnUpdate ISource.IsLastOpen IEnumerable<double>.GetEnumerator() IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Digits 精度 int Digits { get; set; } 属性值 int Fill 填充 作Bar显示时，使用该项填充 Fill Fill { get; set; } 属性值 Fill this[int] double this[int index] { get; set; } 参数 index int 属性值 double OutputType 表现形式 EOutputType OutputType { get; set; } 属性值 EOutputType Script owner script IScript Script { get; } 属性值 IScript Stroke 笔刷 Stroke Stroke { get; set; } 属性值 Stroke 方法 GetColor(int) 获取对应index的Color，如果有 Color? GetColor(int index) 参数 index int 返回 Color ResetColor(int) 重置对应Index的Color void ResetColor(int index) 参数 index int ResetColors() 重置所有color void ResetColors() SetColor(int, Color) 设置对应Index的Color void SetColor(int index, Color color) 参数 index int color Color"
  },
  "doc/api/Sparks.Trader.Api.IIndicatorLevel.html": {
    "href": "doc/api/Sparks.Trader.Api.IIndicatorLevel.html",
    "title": "IIndicatorLevel 接口 | SparksTrader文档",
    "keywords": "IIndicatorLevel 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 指标的水平线 public interface IIndicatorLevel : IChartObjectBase 继承成员 IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Script owner script IScript Script { get; } 属性值 IScript Stroke 笔触 Stroke Stroke { get; set; } 属性值 Stroke Value 点位 double Value { get; set; } 属性值 double"
  },
  "doc/api/Sparks.Trader.Api.IMainArea.html": {
    "href": "doc/api/Sparks.Trader.Api.IMainArea.html",
    "title": "IMainArea 接口 | SparksTrader文档",
    "keywords": "IMainArea 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IMainArea : IChartArea 继承成员 IChartArea.Chart IChartArea.Width IChartArea.Height IChartArea.SizeChanged IChartArea.MainYAxis IChartArea.Axes IChartArea.MouseEnter IChartArea.MouseLeave IChartArea.MouseMove IChartArea.MouseDown IChartArea.MouseUp IChartArea.MouseWheel IChartArea.DragStart IChartArea.DragEnd IChartArea.Drag IChartArea.ScrollChanged IChartArea.KeyDown IChartArea.KeyUp IChartArea.DrawHorizontalLine(string, double, Stroke) IChartArea.DrawVerticalLine(string, DateTime, Stroke) IChartArea.DrawTrendLine(string, DateTime, double, DateTime, double, Stroke) IChartArea.CreateObject<T>(params object[]) IChartArea.Objects IChartArea.SelectedObjects IChartArea.SelectedObjectsChanged IChartArea.HoveringObject IChartArea.HoveringObjectChanged IChartArea.FindAllObjects<T>() IChartArea.FindAllObjects(EChartObjectType) IChartArea.FindObject(string) IChartArea.RemoveObject(string) IChartArea.RemoveObject(IChartObject) IChartArea.RemoveAllObjects() 属性 ChartTimeAxis IChartTimeAxis ChartTimeAxis { get; } 属性值 IChartTimeAxis FirstVisibleBarIndex 第一个可视的Bar Index int FirstVisibleBarIndex { get; } 属性值 int IsScrollingEnabled Gets or sets the value indicating whether the scrolling is enabled or disabled for the chart. If disabled, then the chart is not affected by scrolling, dragging, scaling, or pressing any keyboard keys, but is still affected by resizing, zooming, and API calls for changing X or Y-axis positions on the chart. bool IsScrollingEnabled { get; set; } 属性值 bool LastVisibleBarIndex 最后一个可视的Bar Index int LastVisibleBarIndex { get; } 属性值 int MaxVisibleBars 最大可视bar数量 int MaxVisibleBars { get; } 属性值 int UnitWidth 单位宽度 double UnitWidth { get; } 属性值 double VisibleBarsCount 当前可视Bar数量 int VisibleBarsCount { get; } 属性值 int 方法 GetBarIndexByPoint(Point) Gets the total number of the bars on the chart. int? GetBarIndexByPoint(Point pt) 参数 pt Point 返回 int? GetBarIndexByTime(DateTime) int? GetBarIndexByTime(DateTime dt) 参数 dt DateTime 返回 int? GetTimeValueByBarIndex(int) DateTime? GetTimeValueByBarIndex(int index) 参数 index int 返回 DateTime? GetTimeValueByPoint(Point) DateTime? GetTimeValueByPoint(Point pt) 参数 pt Point 返回 DateTime? GetUnitIndexByPoint(Point) int? GetUnitIndexByPoint(Point pt) 参数 pt Point 返回 int? GetXByDateTime(DateTime) double? GetXByDateTime(DateTime time) 参数 time DateTime 返回 double? ScrollXBy(int) Scrolls the chart by the X-axis for the specified number of bars. void ScrollXBy(int bars) 参数 bars int ScrollXTo(DateTime) Scrolls the chart by the X-axis to the specified date time. void ScrollXTo(DateTime time) 参数 time DateTime ScrollXTo(int) Scrolls the chart by the X-axis to the bar with the specified index. void ScrollXTo(int barIndex) 参数 barIndex int The index of the bar."
  },
  "doc/api/Sparks.Trader.Api.IMarketDataManager.html": {
    "href": "doc/api/Sparks.Trader.Api.IMarketDataManager.html",
    "title": "IMarketDataManager 接口 | SparksTrader文档",
    "keywords": "IMarketDataManager 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IMarketDataManager 方法 GetBarsAsync(SymbolContract, ETimeFrame, int, Action<IBars>) void GetBarsAsync(SymbolContract sc, ETimeFrame tf, int num = 200, Action<IBars> callback = null) 参数 sc SymbolContract tf ETimeFrame num int callback Action<IBars> GetTicksAsync(SymbolContract, ETimeFrame, int, Action<IDayTicks>) void GetTicksAsync(SymbolContract sc, ETimeFrame tf, int num = 200, Action<IDayTicks> callback = null) 参数 sc SymbolContract tf ETimeFrame num int callback Action<IDayTicks>"
  },
  "doc/api/Sparks.Trader.Api.IMarketDatas-1.html": {
    "href": "doc/api/Sparks.Trader.Api.IMarketDatas-1.html",
    "title": "IMarketDatas<T> 接口 | SparksTrader文档",
    "keywords": "IMarketDatas<T> 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IMarketDatas<T> : ISource<T>, ISource, IEnumerable<T>, IEnumerable, IDisposable where T : ITimeValue 类型参数 T 继承成员 ISource<T>.this[int] ISource<T>.GetRange(int, int) ISource.Count ISource.OnUpdate ISource.IsLastOpen IEnumerable<T>.GetEnumerator() IDisposable.Dispose() 属性 IsLive 是否实时的 bool IsLive { get; } 属性值 bool IsLoading 是否正在加载 bool IsLoading { get; } 属性值 bool IsReady 是否准备完毕，可以使用 bool IsReady { get; } 属性值 bool Symbol 对应Symbol ISymbol Symbol { get; } 属性值 ISymbol TimeFrame 对应TimeFrame ETimeFrame TimeFrame { get; } 属性值 ETimeFrame Times 时间序列 ITimes Times { get; } 属性值 ITimes 方法 LoadMoreHistoryAsync() 异步加载更多历史数据 Task<int> LoadMoreHistoryAsync() 返回 Task<int> 事件 OnDisconnected 断开连接 event Action<IMarketDatas> OnDisconnected 事件类型 Action<IMarketDatas> OnHistoryLoaded 历史数据加载完成 图表scroll或者zoom，或者api调用LoadMoreHistoryAsync，会导致历史数据加载 event EventHandler<int> OnHistoryLoaded 事件类型 EventHandler<int> OnLoaded 初次加载. event Action<IMarketDatas> OnLoaded 事件类型 Action<IMarketDatas> OnReloaded 网络重新连接 event Action<IMarketDatas> OnReloaded 事件类型 Action<IMarketDatas> OnTick 新的tick event Action<IMarketDatas> OnTick 事件类型 Action<IMarketDatas>"
  },
  "doc/api/Sparks.Trader.Api.IMarketDatas.html": {
    "href": "doc/api/Sparks.Trader.Api.IMarketDatas.html",
    "title": "IMarketDatas 接口 | SparksTrader文档",
    "keywords": "IMarketDatas 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IMarketDatas : ISource, IEnumerable, IDisposable 继承成员 ISource.Count ISource.OnUpdate ISource.IsLastOpen IDisposable.Dispose() 属性 IsLive 是否实时的 bool IsLive { get; } 属性值 bool IsLoading 是否正在加载 bool IsLoading { get; } 属性值 bool IsReady 是否准备完毕可以使用 bool IsReady { get; } 属性值 bool this[int] ITimeValue this[int index] { get; } 参数 index int 属性值 ITimeValue Symbol 对应Symbol ISymbol Symbol { get; } 属性值 ISymbol TimeFrame 对应TimeFrame ETimeFrame TimeFrame { get; } 属性值 ETimeFrame Times 时间序列 ITimes Times { get; } 属性值 ITimes 方法 GetEnumerator() IEnumerator<ITimeValue> GetEnumerator() 返回 IEnumerator<ITimeValue> LoadMoreHistoryAsync() 异步加载更多历史数据 Task<int> LoadMoreHistoryAsync() 返回 Task<int> 事件 OnDisconnected 断开连接 event Action<IMarketDatas> OnDisconnected 事件类型 Action<IMarketDatas> OnHistoryLoaded 历史数据加载完成 图表scroll或者zoom，或者api调用LoadMoreHistoryAsync，会导致历史数据加载 event EventHandler<int> OnHistoryLoaded 事件类型 EventHandler<int> OnLoaded 初次加载. event Action<IMarketDatas> OnLoaded 事件类型 Action<IMarketDatas> OnReloaded 网络重新连接 event Action<IMarketDatas> OnReloaded 事件类型 Action<IMarketDatas> OnTick 新的tick event Action<IMarketDatas> OnTick 事件类型 Action<IMarketDatas>"
  },
  "doc/api/Sparks.Trader.Api.IMovingAverage.html": {
    "href": "doc/api/Sparks.Trader.Api.IMovingAverage.html",
    "title": "IMovingAverage 接口 | SparksTrader文档",
    "keywords": "IMovingAverage 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 移动平均线接口 public interface IMovingAverage : IIndicator, IScript, IChartObjectBase 继承成员 IIndicator.IsOverlay IScript.ScriptType IScript.NetworkFailureAction IScript.NetworkRestoreAction IScript.StopReason IScript.Runtime IScript.IsLocked IScript.UserDataPath IScript.Name IScript.LongName IScript.Desc IScript.Group IScript.Symbol IScript.Bars IScript.State IScript.IsHistoryOver IScript.Info(object) IScript.Warn(object) IScript.Error(object) IScript.Performance() IScript.Alert(string, string, EAlertLevel, SymbolContract?) IScript.Alert(string, string, AlertAction, EAlertLevel, SymbolContract?) IScript.Alert(string, string, IEnumerable<AlertAction>, EAlertLevel, SymbolContract?) IScript.CreateIndicator<T>(params object[]) IScript.CreateMA(EMaType, IDatas, int) IScript.Children IScript.CreateIndicatorDatas(int?) IScript.OnStart() IScript.OnStop() IScript.OnData(ISource, int) IScript.SetBackground(int, Fill) IScript.GetBackground(int) IScript.ResetBackground(int) IScript.ResetBackgrounds() IScript.Fill(IIndicatorDatas, IIndicatorDatas, Fill, Fill) IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Periods 周期 int Periods { get; } 属性值 int Result 输出 IIndicatorDatas Result { get; } 属性值 IIndicatorDatas Source 源 IDatas Source { get; } 属性值 IDatas"
  },
  "doc/api/Sparks.Trader.Api.IndicatorAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.IndicatorAttribute.html",
    "title": "IndicatorAttribute 类 | SparksTrader文档",
    "keywords": "IndicatorAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public sealed class IndicatorAttribute : ScriptAttribute 继承 object Attribute ScriptAttribute IndicatorAttribute 继承成员 ScriptAttribute.Desc ScriptAttribute.Group ScriptAttribute.NetworkFailureAction ScriptAttribute.NetworkRestoreAction Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() 构造函数 IndicatorAttribute() public IndicatorAttribute() IndicatorAttribute(string) public IndicatorAttribute(string group) 参数 group string 属性 IsOverlay public bool IsOverlay { get; set; } 属性值 bool"
  },
  "doc/api/Sparks.Trader.Api.IOrder.html": {
    "href": "doc/api/Sparks.Trader.Api.IOrder.html",
    "title": "IOrder 接口 | SparksTrader文档",
    "keywords": "IOrder 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IOrder : INotifyPropertyChanged 继承成员 INotifyPropertyChanged.PropertyChanged 属性 Account 对应的ITradingAccount ITradingAccount Account { get; } 属性值 ITradingAccount AuxPrice 辅助价格 double? AuxPrice { get; } 属性值 double? AvgFillPrice 已成交均价 double AvgFillPrice { get; } 属性值 double CancelTime 取消时间 DateTime? CancelTime { get; } 属性值 DateTime? CloseTradeId Close Trade Id （外汇平台支持） string CloseTradeId { get; } 属性值 string Code 品种代码 string Code { get; } 属性值 string Comment 注释（如果有, 外汇平台具备） string Comment { get; } 属性值 string Commission 佣金 double Commission { get; } 属性值 double CompletedTime 完成时间 DateTime? CompletedTime { get; } 属性值 DateTime? Contract 对应的合约 SymbolContract Contract { get; } 属性值 SymbolContract CreateTime 创建时间 DateTime? CreateTime { get; } 属性值 DateTime? Currency 币种 ECurrency Currency { get; } 属性值 ECurrency Direction 买卖方向 ETradeDirection Direction { get; } 属性值 ETradeDirection ExchangeCode 交易所 string ExchangeCode { get; } 属性值 string ExpirationTime 额外过期时间 DateTime? ExpirationTime { get; } 属性值 DateTime? FilledQuantity 已成交数量 double FilledQuantity { get; } 属性值 double Id 订单ID string Id { get; } 属性值 string IsChildOrder 是否是子单 bool IsChildOrder { get; } 属性值 bool IsFinished 是否已经结束 bool IsFinished { get; } 属性值 bool IsModifiable 是否可修改 订单已经终结，或者不可操作（比如类似ib非同一个client生成的订单），则不可修改 bool IsModifiable { get; } 属性值 bool IsOperable 默认未结束就是可操作性的，但是比如ib，非client生成的订单，不可操作 bool IsOperable { get; } 属性值 bool IsStopLoss 是否是止损单 bool IsStopLoss { get; } 属性值 bool IsTakeProfit 是否止盈单 bool IsTakeProfit { get; } 属性值 bool LastFillPrice 上一个成交价 double LastFillPrice { get; } 属性值 double LocalId 本地id，通常订单还没有在服务器上创建时，本地id就已经存在 string LocalId { get; } 属性值 string OpenClose 开平标志（外汇/ctp支持） EOpenClose OpenClose { get; } 属性值 EOpenClose OrderType 订单类型 EOrderType OrderType { get; } 属性值 EOrderType OrderTypeEx 对应平台的订单类型 object OrderTypeEx { get; } 属性值 object ParentOrder 父订单，如果有 IOrder ParentOrder { get; } 属性值 IOrder ParentOrderId 父订单ID string ParentOrderId { get; } 属性值 string Price 主价格(如果是market订单，不包含价格) double? Price { get; } 属性值 double? RemainingQuantity 剩余数量 double RemainingQuantity { get; } 属性值 double Status 订单状态（兼容不同的provider） EOrderStatus Status { get; } 属性值 EOrderStatus StatusEx 对应平台订单状态 object StatusEx { get; } 属性值 object StopLoss 止损价格 double? StopLoss { get; } 属性值 double? StopLossOrder 止损订单，如果有 IOrder StopLossOrder { get; } 属性值 IOrder StopLossOrderId 止损订单ID，如果有 string StopLossOrderId { get; } 属性值 string Symbol 对应的ISymbol ISymbol Symbol { get; } 属性值 ISymbol SymbolType 品种类型 ESymbolType SymbolType { get; } 属性值 ESymbolType TakeProfit 止盈价格 double? TakeProfit { get; } 属性值 double? TakeProfitOrder 止盈订单，如果有 IOrder TakeProfitOrder { get; } 属性值 IOrder TakeProfitOrderId 止盈订单ID，如果有 string TakeProfitOrderId { get; } 属性值 string Tif 有效期 ETIF Tif { get; } 属性值 ETIF TotalQuantity 总数量 double TotalQuantity { get; } 属性值 double UpdateTime 更新时间 DateTime? UpdateTime { get; } 属性值 DateTime? 方法 Cancel(Action<TradeResult>) 取消订单 TradeOperation Cancel(Action<TradeResult> callback = null) 参数 callback Action<TradeResult> 返回 TradeOperation Modify(double?, double?, double?, ETIF?, double?, double?, Action<TradeResult>) 修改订单 TradeOperation Modify(double? price = null, double? auxPrice = null, double? lots = null, ETIF? tif = ETIF.GTC, double? takeProfit = null, double? stopLoss = null, Action<TradeResult> callback = null) 参数 price double? auxPrice double? lots double? tif ETIF? takeProfit double? stopLoss double? callback Action<TradeResult> 返回 TradeOperation"
  },
  "doc/api/Sparks.Trader.Api.IOrderBook.html": {
    "href": "doc/api/Sparks.Trader.Api.IOrderBook.html",
    "title": "IOrderBook 接口 | SparksTrader文档",
    "keywords": "IOrderBook 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IOrderBook : INotifyPropertyChanged 继承成员 INotifyPropertyChanged.PropertyChanged 属性 AskLevels 要价序列 IOrderLevels AskLevels { get; } 属性值 IOrderLevels BidAskRatio 买卖委比 double BidAskRatio { get; } 属性值 double BidLevels 出价序列 IOrderLevels BidLevels { get; } 属性值 IOrderLevels Spread 买卖点差 bid-ask spread double Spread { get; } 属性值 double Symbol 对应symbol ISymbol Symbol { get; } 属性值 ISymbol 事件 Update 更新 event Action<IOrderBook> Update 事件类型 Action<IOrderBook>"
  },
  "doc/api/Sparks.Trader.Api.IOrderLevel.html": {
    "href": "doc/api/Sparks.Trader.Api.IOrderLevel.html",
    "title": "IOrderLevel 接口 | SparksTrader文档",
    "keywords": "IOrderLevel 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IOrderLevel 属性 Orders 委托订单个数 double Orders { get; } 属性值 double Price 委托价格 double Price { get; } 属性值 double Volume 委托数量 double Volume { get; } 属性值 double VolumeChange double VolumeChange { get; } 属性值 double VolumeRatio double VolumeRatio { get; } 属性值 double"
  },
  "doc/api/Sparks.Trader.Api.IOrderLevels.html": {
    "href": "doc/api/Sparks.Trader.Api.IOrderLevels.html",
    "title": "IOrderLevels 接口 | SparksTrader文档",
    "keywords": "IOrderLevels 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IOrderLevels : IReadOnlyList<IOrderLevel>, IReadOnlyCollection<IOrderLevel>, IEnumerable<IOrderLevel>, IEnumerable, INotifyPropertyChanged 继承成员 IReadOnlyList<IOrderLevel>.this[int] IReadOnlyCollection<IOrderLevel>.Count IEnumerable<IOrderLevel>.GetEnumerator() INotifyPropertyChanged.PropertyChanged 扩展方法 OrderBookEx.Ratio(IOrderLevels, IOrderLevels) 属性 AvgPrice 平均价格 double AvgPrice { get; } 属性值 double Direction 买卖方向 ETradeDirection Direction { get; } 属性值 ETradeDirection TotalOrderCount 总订单数 double TotalOrderCount { get; set; } 属性值 double TotalVolume 总量 double TotalVolume { get; } 属性值 double WeightedAvgPrice 加权平均价 double WeightedAvgPrice { get; } 属性值 double"
  },
  "doc/api/Sparks.Trader.Api.IPendingOrders.html": {
    "href": "doc/api/Sparks.Trader.Api.IPendingOrders.html",
    "title": "IPendingOrders 接口 | SparksTrader文档",
    "keywords": "IPendingOrders 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IPendingOrders : IReadOnlyList<IOrder>, IReadOnlyCollection<IOrder>, IEnumerable<IOrder>, IEnumerable 继承成员 IReadOnlyList<IOrder>.this[int] IReadOnlyCollection<IOrder>.Count IEnumerable<IOrder>.GetEnumerator() 事件 Cancelled Occurs when pending order is cancelled event EventHandler<IOrder> Cancelled 事件类型 EventHandler<IOrder> 示例 protected override void OnStart() { PendingOrders.Cancelled += PendingOrdersOnCancelled; var result = PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize); CancelPendingOrder(result.PendingOrder); } private void PendingOrdersOnCancelled(PendingOrderCancelledEventArgs args) { Print(\"Pending order with id {0} was cancelled. Reason: {1}\", args.PendingOrder.Id, args.Reason); } Created Occurs when pending order is created event EventHandler<IOrder> Created 事件类型 EventHandler<IOrder> 示例 protected override void OnStart() { PendingOrders.Created += PendingOrdersOnCreated; PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize); } private void PendingOrdersOnCreated(PendingOrderCreatedEventArgs args) { Print(\"Pending order with id {0} was created\", args.PendingOrder.Id); } Filled Occurs when pending order is filled event EventHandler<IOrder> Filled 事件类型 EventHandler<IOrder> 示例 protected override void OnStart() { PendingOrders.Filled += PendingOrdersOnFilled; PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask); } private void PendingOrdersOnFilled(PendingOrderFilledEventArgs args) { Print(\"Pending order with id {0} was filled, position id is {1}\", args.PendingOrder.Id, args.Position.Id); } Modified Occurs when pending order is modified event EventHandler<IOrder> Modified 事件类型 EventHandler<IOrder> 示例 protected override void OnStart() { PendingOrders.Modified += PendingOrdersOnModified; var result = PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize); ModifyPendingOrder(result.PendingOrder, Symbol.Ask + 20 * Symbol.PipSize ,null, null, null); } private void PendingOrdersOnModified(PendingOrderModifiedEventArgs args) { Print(\"Pending order with id {0} was modifed\", args.PendingOrder.Id); }"
  },
  "doc/api/Sparks.Trader.Api.IPosition.html": {
    "href": "doc/api/Sparks.Trader.Api.IPosition.html",
    "title": "IPosition 接口 | SparksTrader文档",
    "keywords": "IPosition 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IPosition : INotifyPropertyChanged 继承成员 INotifyPropertyChanged.PropertyChanged 属性 Account 对应TradingAccount ITradingAccount Account { get; } 属性值 ITradingAccount AvgPrice 平均价格 double AvgPrice { get; } 属性值 double Code 品种代码 string Code { get; } 属性值 string Commission 手续费 double Commission { get; } 属性值 double Currency 币种 ECurrency Currency { get; } 属性值 ECurrency Direction 方向 ETradeDirection Direction { get; } 属性值 ETradeDirection ExchangeCode 交易所 string ExchangeCode { get; } 属性值 string Last 最新价 double Last { get; } 属性值 double Margin 保证金 double Margin { get; } 属性值 double MarketValue 当前市值 double MarketValue { get; } 属性值 double OpenMarketValue 开仓市值 double OpenMarketValue { get; } 属性值 double PL 盈亏 double PL { get; } 属性值 double PLPips 盈亏点数 double PLPips { get; } 属性值 double PLRatio 盈亏比例 double PLRatio { get; } 属性值 double PLType 盈亏类型 EPL PLType { get; } 属性值 EPL Quantity 数量 double Quantity { get; } 属性值 double Symbol 对应Symbol ISymbol Symbol { get; } 属性值 ISymbol SymbolType 类型 ESymbolType SymbolType { get; } 属性值 ESymbolType 方法 Close(double?, Action<TradeResult>) 平仓 TradeOperation Close(double? quantity = null, Action<TradeResult> callback = null) 参数 quantity double? callback Action<TradeResult> 返回 TradeOperation PLPresentationString(EPLPresentation) 返回一个盈亏表现字符串 string PLPresentationString(EPLPresentation presentation) 参数 presentation EPLPresentation 返回 string"
  },
  "doc/api/Sparks.Trader.Api.IProvider.html": {
    "href": "doc/api/Sparks.Trader.Api.IProvider.html",
    "title": "IProvider 接口 | SparksTrader文档",
    "keywords": "IProvider 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IProvider 属性 AutoConnectTime 自动连接时间 List<TimeOnly> AutoConnectTime { get; } 属性值 List<TimeOnly> AutoDisConnectTime 自动断开时间 List<TimeOnly> AutoDisConnectTime { get; } 属性值 List<TimeOnly> ConnectOnStartup 程序启动即连接 bool ConnectOnStartup { get; } 属性值 bool ConnectReason 连接原因 EConnectReason ConnectReason { get; } 属性值 EConnectReason ConnectionState 连接状态 EConnectionState ConnectionState { get; } 属性值 EConnectionState Desc 描述 string Desc { get; } 属性值 string DisconnectReason 断连原因 EDisconnectReason DisconnectReason { get; } 属性值 EDisconnectReason Functions provider支持功能 EProviderFunction Functions { get; } 属性值 EProviderFunction IsReconnecting 是否自动重连中 bool IsReconnecting { get; } 属性值 bool Name provider名字 string Name { get; } 属性值 string SymbolInfos 支持的symbolInfo IGroup<ISymbolInfo> SymbolInfos { get; } 属性值 IGroup<ISymbolInfo> TypeId Provider的类型 string TypeId { get; } 属性值 string 方法 FindSymbolInfo(SymbolContract) 根据contract找Symbolinfo IEnumerable<ISymbolInfo> FindSymbolInfo(SymbolContract contract) 参数 contract SymbolContract 返回 IEnumerable<ISymbolInfo> GetMarginRate(string) 根据tradingCode，获取MarginRate double GetMarginRate(string tradingCode) 参数 tradingCode string 返回 double GetSymbolId(string) 根据tradingCode，获取provider内部交易代码 string GetSymbolId(string tradingCode) 参数 tradingCode string 返回 string Rename(string) 修改名字 Rtn Rename(string name) 参数 name string 返回 Rtn"
  },
  "doc/api/Sparks.Trader.Api.IProviders.html": {
    "href": "doc/api/Sparks.Trader.Api.IProviders.html",
    "title": "IProviders 接口 | SparksTrader文档",
    "keywords": "IProviders 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IProviders : IGroup<IProvider>, IReadOnlyList<IProvider>, IReadOnlyCollection<IProvider>, IEnumerable<IProvider>, IEnumerable 继承成员 IGroup<IProvider>.Added IGroup<IProvider>.Removed IReadOnlyList<IProvider>.this[int] IReadOnlyCollection<IProvider>.Count IEnumerable<IProvider>.GetEnumerator() 方法 GetSymbol(SymbolContract) 根据contract找到对应的symbol实例 ISymbol GetSymbol(SymbolContract contract) 参数 contract SymbolContract 返回 ISymbol"
  },
  "doc/api/Sparks.Trader.Api.IRectangle.html": {
    "href": "doc/api/Sparks.Trader.Api.IRectangle.html",
    "title": "IRectangle 接口 | SparksTrader文档",
    "keywords": "IRectangle 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IRectangle : IChartObject, IChartObjectBase 继承成员 IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Background 背景，如果有 Fill? Background { get; set; } 属性值 Fill Content 内容 string Content { get; set; } 属性值 string End 结束点 ChartPoint End { get; set; } 属性值 ChartPoint ExtendDirection 延伸方向 EDirection ExtendDirection { get; set; } 属性值 EDirection FontSpec 文字规格 FontSpec FontSpec { get; set; } 属性值 FontSpec HorizontalAlignment 垂直对齐 HorizontalAlignment HorizontalAlignment { get; set; } 属性值 HorizontalAlignment ShowText 显示文本 bool ShowText { get; set; } 属性值 bool Start 开始点 ChartPoint Start { get; set; } 属性值 ChartPoint Stroke 线型 Stroke Stroke { get; set; } 属性值 Stroke VerticalAlignment 水平对齐 VerticalAlignment VerticalAlignment { get; set; } 属性值 VerticalAlignment"
  },
  "doc/api/Sparks.Trader.Api.IRuler.html": {
    "href": "doc/api/Sparks.Trader.Api.IRuler.html",
    "title": "IRuler 接口 | SparksTrader文档",
    "keywords": "IRuler 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IRuler : IChartObject, IChartObjectBase 继承成员 IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Border 边框 Stroke Border { get; set; } 属性值 Stroke End 结束点 ChartPoint End { get; set; } 属性值 ChartPoint Fill 填色 Fill Fill { get; set; } 属性值 Fill RulerType 测量类型 ERulerType RulerType { get; set; } 属性值 ERulerType Start 开始点 ChartPoint Start { get; set; } 属性值 ChartPoint Stroke 线型 Stroke Stroke { get; set; } 属性值 Stroke"
  },
  "doc/api/Sparks.Trader.Api.IScript.html": {
    "href": "doc/api/Sparks.Trader.Api.IScript.html",
    "title": "IScript 接口 | SparksTrader文档",
    "keywords": "IScript 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IScript : IChartObjectBase 继承成员 IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Bars 当前chart的Bars IBars Bars { get; } 属性值 IBars Children 由该Script创建的indicator ReadOnlyObservableCollection<IIndicator> Children { get; } 属性值 ReadOnlyObservableCollection<IIndicator> Desc 脚本描述 string Desc { get; } 属性值 string Group 脚本分组 string Group { get; } 属性值 string IsHistoryOver 历史数据阶段是否已经结束 脚本在启动时，会先加载历史数据，历史数据结束后，才会进入实时阶段 bool IsHistoryOver { get; } 属性值 bool IsLocked 是否被锁定，无法被删除 bool IsLocked { get; set; } 属性值 bool LongName 脚本长名字 string LongName { get; } 属性值 string Name 脚本名 string Name { get; } 属性值 string NetworkFailureAction 网络中断时行为 ENetworkFailureAction NetworkFailureAction { get; } 属性值 ENetworkFailureAction NetworkRestoreAction 当因为网络中断停止后，网络重新恢复时的行为 ENetworkRestoreAction NetworkRestoreAction { get; } 属性值 ENetworkRestoreAction Runtime 运行环境 ERuntime Runtime { get; } 属性值 ERuntime ScriptType 脚本类型 EScriptType ScriptType { get; } 属性值 EScriptType State 脚本状态 EScriptState State { get; } 属性值 EScriptState StopReason 停止原因 EScriptStopReason StopReason { get; } 属性值 EScriptStopReason Symbol 当前chart的Symbol ISymbol Symbol { get; } 属性值 ISymbol UserDataPath 用户数据目录 string UserDataPath { get; } 属性值 string 方法 Alert(string, string, AlertAction, EAlertLevel, SymbolContract?) 发出一种警告 void Alert(string title, string msg, AlertAction action, EAlertLevel level = EAlertLevel.Warn, SymbolContract? contract = null) 参数 title string 警告标题 msg string 警告消息 action AlertAction 警告效果 level EAlertLevel 警告等级 contract SymbolContract? contract 示例 var msg = \"hello, world\"; // 发出一个弹窗警告 Alert(\"Popup Alert\", msg, new PopupAlertAction()); // 发出一个Email警告 Alert(\"Email Alert\", Msg, new EmailAlertAction(\"xxxxxx@qq.com\")); // 发出一个声音警告 Alert(\"Sound Alert\", Msg, new SoundAlertAction(new Uri(\"Resources/Sounds/alarm.mp3\", UriKind.Relative), EAlertSoundDuration.S10)); Alert(string, string, EAlertLevel, SymbolContract?) 发出一个基本弹窗警告 void Alert(string title, string msg, EAlertLevel level = EAlertLevel.Warn, SymbolContract? contract = null) 参数 title string 警告标题 msg string 警告消息 level EAlertLevel 警告等级 contract SymbolContract? contract Alert(string, string, IEnumerable<AlertAction>, EAlertLevel, SymbolContract?) 发出多种警告类型 void Alert(string title, string msg, IEnumerable<AlertAction> actions, EAlertLevel level = EAlertLevel.Warn, SymbolContract? contract = null) 参数 title string 警告标题 msg string 警告消息 actions IEnumerable<AlertAction> 多种警告类型 level EAlertLevel 警告等级 contract SymbolContract? contract 示例 // 同时发出多种警告 Alert(\"test popup\", \"hello\", new AlertAction[] { new PopupAlertAction(), new EmailAlertAction(\"xxxxxx@qq.com\"), new SoundAlertAction(new Uri(\"Resources/Sounds/alarm.mp3\", UriKind.Relative), EAlertSoundDuration.S10) }); CreateIndicatorDatas(int?) 创建一个IndicatorDatas数据容器 IIndicatorDatas CreateIndicatorDatas(int? digits = null) 参数 digits int? 指定数据的精度，null表示使用对应Symbol的精度 返回 IIndicatorDatas 示例 protected override void OnStart() { Datas_ = CreateIndicatorDatas(); } protected IIndicatorDatas Datas_; CreateIndicator<T>(params object[]) T CreateIndicator<T>(params object[] parameterValues) where T : IIndicator 参数 parameterValues object[] 返回 T 类型参数 T CreateMA(EMaType, IDatas, int) 创建预制的MA IMovingAverage CreateMA(EMaType mvaType, IDatas source, int periods) 参数 mvaType EMaType source IDatas periods int 返回 IMovingAverage Error(object) 输出Error信息 void Error(object msg) 参数 msg object Fill(IIndicatorDatas, IIndicatorDatas, Fill, Fill) void Fill(IIndicatorDatas line1, IIndicatorDatas line2, Fill fill1, Fill fill2 = null) 参数 line1 IIndicatorDatas line2 IIndicatorDatas fill1 Fill fill2 Fill GetBackground(int) 获得背景色 Fill GetBackground(int index) 参数 index int 返回 Fill Info(object) 输出Info信息 void Info(object msg) 参数 msg object OnData(ISource, int) void OnData(ISource source, int index) 参数 source ISource index int OnStart() 脚本启动时被调用 void OnStart() OnStop() 脚本停止时被调用 void OnStop() Performance() output Performance information void Performance() ResetBackground(int) 重置对应Index的background void ResetBackground(int index) 参数 index int ResetBackgrounds() 重置所有背景色 void ResetBackgrounds() SetBackground(int, Fill) 设置背景色 void SetBackground(int index, Fill fill) 参数 index int fill Fill Warn(object) 输出Warning信息 void Warn(object msg) 参数 msg object"
  },
  "doc/api/Sparks.Trader.Api.ISource-1.html": {
    "href": "doc/api/Sparks.Trader.Api.ISource-1.html",
    "title": "ISource<T> 接口 | SparksTrader文档",
    "keywords": "ISource<T> 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ISource<T> : ISource, IEnumerable<T>, IEnumerable 类型参数 T 继承成员 ISource.Count ISource.OnUpdate ISource.IsLastOpen IEnumerable<T>.GetEnumerator() 属性 this[int] T this[int index] { get; } 参数 index int 属性值 T 方法 GetRange(int, int) List<T> GetRange(int index, int count) 参数 index int count int 返回 List<T>"
  },
  "doc/api/Sparks.Trader.Api.ISource.html": {
    "href": "doc/api/Sparks.Trader.Api.ISource.html",
    "title": "ISource 接口 | SparksTrader文档",
    "keywords": "ISource 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 数据源 public interface ISource : IEnumerable 继承成员 IEnumerable.GetEnumerator() 属性 Count 数量 int Count { get; } 属性值 int IsLastOpen 上一次更新，是否添加了一个新值 bool IsLastOpen { get; } 属性值 bool this[int] object this[int index] { get; } 参数 index int 属性值 object 事件 OnUpdate 当数据更新时调用 event Action<ISource, int> OnUpdate 事件类型 Action<ISource, int>"
  },
  "doc/api/Sparks.Trader.Api.ISpotTradingAccount.html": {
    "href": "doc/api/Sparks.Trader.Api.ISpotTradingAccount.html",
    "title": "ISpotTradingAccount 接口 | SparksTrader文档",
    "keywords": "ISpotTradingAccount 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ISpotTradingAccount : ITradingAccount, INotifyPropertyChanged 继承成员 ITradingAccount.Provider ITradingAccount.IsLive ITradingAccount.AccountCode ITradingAccount.Currency ITradingAccount.Equity ITradingAccount.Balance ITradingAccount.DayPL ITradingAccount.GrossPL ITradingAccount.InitMargin ITradingAccount.MaintainMargin ITradingAccount.PendingOrders ITradingAccount.HistoryOrders ITradingAccount.AllOrders ITradingAccount.Positions ITradingAccount.Trades ITradingAccount.ClosedTrades ITradingAccount.PlaceOrder(OrderReq, Action<TradeResult>) ITradingAccount.CancelOrder(IOrder, Action<TradeResult>) ITradingAccount.ModifyOrder(IOrder, double?, double?, double?, ETIF?, double?, double?, Action<TradeResult>) ITradingAccount.CloseTrade(ITrade, Action<TradeResult>) ITradingAccount.ClosePosition(IPosition, double?, Action<TradeResult>) ITradingAccount.PlaceMarketOrder(SymbolContract, ETradeDirection, double, EOpenClose, ETIF, double?, double?, string, Action<TradeResult>) ITradingAccount.PlaceLimitOrder(SymbolContract, ETradeDirection, double, double, EOpenClose, ETIF, double?, double?, string, Action<TradeResult>) ITradingAccount.PlaceStopOrder(SymbolContract, ETradeDirection, double, double, EOpenClose, ETIF, double?, double?, string, Action<TradeResult>) INotifyPropertyChanged.PropertyChanged 方法 CancelPendingOrder(IOrder) TradeResult CancelPendingOrder(IOrder pendingOrder) 参数 pendingOrder IOrder 返回 TradeResult CancelPendingOrderAsync(IOrder, Action<TradeResult>) void CancelPendingOrderAsync(IOrder pendingOrder, Action<TradeResult> callback = null) 参数 pendingOrder IOrder callback Action<TradeResult> ClosePosition(IPosition, double?) TradeResult ClosePosition(IPosition position, double? amount = null) 参数 position IPosition amount double? 返回 TradeResult ClosePositionAsync(IPosition, double?, Action<TradeResult>) void ClosePositionAsync(IPosition position, double? amount = null, Action<TradeResult> callback = null) 参数 position IPosition amount double? callback Action<TradeResult> ExecuteEntryOrderAsync(ISymbol, double, ETradeDirection, double, ETIF?, string, double?, double?, bool, ETIF) Task<TradeResult> ExecuteEntryOrderAsync(ISymbol s, double amount, ETradeDirection tradeDirection, double price, ETIF? gtc = ETIF.GTC, string label = null, double? stop = null, double? limit = null, bool hasTrailingStop = false, ETIF tif = ETIF.GTC) 参数 s ISymbol amount double tradeDirection ETradeDirection price double gtc ETIF? label string stop double? limit double? hasTrailingStop bool tif ETIF 返回 Task<TradeResult> ExecuteMarketOrder(ISymbol, double, ETradeDirection, ETIF?, string, double?, double?, double?, double?, bool) TradeResult ExecuteMarketOrder(ISymbol s, double amount, ETradeDirection tradeDirection, ETIF? gtc = ETIF.GTC, string label = null, double? stop = null, double? limit = null, double? marketRangePips = null, double? marketRangeBasePrice = null, bool hasTrailingStop = false) 参数 s ISymbol amount double tradeDirection ETradeDirection gtc ETIF? label string stop double? limit double? marketRangePips double? marketRangeBasePrice double? hasTrailingStop bool 返回 TradeResult ExecuteMarketOrderAsync(ISymbol, double, ETradeDirection, ETIF?, string, double?, double?, double?, double?, bool, Action<TradeResult>) void ExecuteMarketOrderAsync(ISymbol s, double amount, ETradeDirection tradeDirection, ETIF? gtc = ETIF.GTC, string label = null, double? stop = null, double? limit = null, double? marketRangePips = null, double? marketRangeBasePrice = null, bool hasTrailingStop = false, Action<TradeResult> callback = null) 参数 s ISymbol amount double tradeDirection ETradeDirection gtc ETIF? label string stop double? limit double? marketRangePips double? marketRangeBasePrice double? hasTrailingStop bool callback Action<TradeResult> ModifyPendingOrder(IOrder, double?, double?, ETIF?, double?, double?, double?, bool?) TradeResult ModifyPendingOrder(IOrder pendingOrder, double? amount = null, double? price = null, ETIF? gtc = null, double? stop = null, double? limit = null, double? stopLimitRangePips = null, bool? hasTrailingStop = null) 参数 pendingOrder IOrder amount double? price double? gtc ETIF? stop double? limit double? stopLimitRangePips double? hasTrailingStop bool? 返回 TradeResult ModifyPendingOrderAsync(IOrder, double?, double?, ETIF?, double?, double?, double?, bool?, Action<TradeResult>) bool ModifyPendingOrderAsync(IOrder pendingOrder, double? amount = null, double? price = null, ETIF? gtc = null, double? stop = null, double? limit = null, double? stopLimitRangePips = null, bool? hasTrailingStop = null, Action<TradeResult> callback = null) 参数 pendingOrder IOrder amount double? price double? gtc ETIF? stop double? limit double? stopLimitRangePips double? hasTrailingStop bool? callback Action<TradeResult> 返回 bool ModifyPosition(IPosition, double?, double?, bool) TradeResult ModifyPosition(IPosition position, double? stop, double? limit, bool hasTrailingStop = false) 参数 position IPosition stop double? limit double? hasTrailingStop bool 返回 TradeResult ModifyPositionAsync(IPosition, double?, double?, bool, Action<TradeResult>) bool ModifyPositionAsync(IPosition position, double? stop, double? limit, bool hasTrailingStop = false, Action<TradeResult> callback = null) 参数 position IPosition stop double? limit double? hasTrailingStop bool callback Action<TradeResult> 返回 bool PlaceLimitOrder(ISymbol, double, ETradeDirection, double, ETIF?, string, double?, double?, bool?) TradeResult PlaceLimitOrder(ISymbol s, double amount, ETradeDirection tradeDirection, double price, ETIF? gtc = ETIF.GTC, string label = null, double? stop = null, double? limit = null, bool? hasTrailingStop = null) 参数 s ISymbol amount double tradeDirection ETradeDirection price double gtc ETIF? label string stop double? limit double? hasTrailingStop bool? 返回 TradeResult PlaceLimitOrderAsync(ISymbol, double, ETradeDirection, double, ETIF?, string, double?, double?, bool?, Action<TradeResult>) bool PlaceLimitOrderAsync(ISymbol s, double amount, ETradeDirection tradeDirection, double price, ETIF? gtc = ETIF.GTC, string label = null, double? stop = null, double? limit = null, bool? hasTrailingStop = null, Action<TradeResult> callback = null) 参数 s ISymbol amount double tradeDirection ETradeDirection price double gtc ETIF? label string stop double? limit double? hasTrailingStop bool? callback Action<TradeResult> 返回 bool"
  },
  "doc/api/Sparks.Trader.Api.IStrategy.html": {
    "href": "doc/api/Sparks.Trader.Api.IStrategy.html",
    "title": "IStrategy 接口 | SparksTrader文档",
    "keywords": "IStrategy 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 策略接口 public interface IStrategy : IScript, IChartObjectBase 继承成员 IScript.ScriptType IScript.NetworkFailureAction IScript.NetworkRestoreAction IScript.StopReason IScript.Runtime IScript.IsLocked IScript.UserDataPath IScript.Name IScript.LongName IScript.Desc IScript.Group IScript.Symbol IScript.Bars IScript.State IScript.IsHistoryOver IScript.Info(object) IScript.Warn(object) IScript.Error(object) IScript.Performance() IScript.Alert(string, string, EAlertLevel, SymbolContract?) IScript.Alert(string, string, AlertAction, EAlertLevel, SymbolContract?) IScript.Alert(string, string, IEnumerable<AlertAction>, EAlertLevel, SymbolContract?) IScript.CreateIndicator<T>(params object[]) IScript.CreateMA(EMaType, IDatas, int) IScript.Children IScript.CreateIndicatorDatas(int?) IScript.OnStart() IScript.OnStop() IScript.OnData(ISource, int) IScript.SetBackground(int, Fill) IScript.GetBackground(int) IScript.ResetBackground(int) IScript.ResetBackgrounds() IScript.Fill(IIndicatorDatas, IIndicatorDatas, Fill, Fill) IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 TradingAccount 对应的交易账户 ITradingAccount TradingAccount { get; } 属性值 ITradingAccount"
  },
  "doc/api/Sparks.Trader.Api.ISymbol.html": {
    "href": "doc/api/Sparks.Trader.Api.ISymbol.html",
    "title": "ISymbol 接口 | SparksTrader文档",
    "keywords": "ISymbol 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ISymbol : INotifyPropertyChanged, ISymbolInfo, ITick, ITimeValue 继承成员 INotifyPropertyChanged.PropertyChanged ISymbolInfo.IsCustom ISymbolInfo.SymbolType ISymbolInfo.NatureType ISymbolInfo.Code ISymbolInfo.TradingCode ISymbolInfo.Name ISymbolInfo.Desc ISymbolInfo.IconPath ISymbolInfo.IconPath2 ISymbolInfo.Exchange ISymbolInfo.ExchangeCode ISymbolInfo.Currency ISymbolInfo.PointSize ISymbolInfo.Digits ISymbolInfo.LotSize ISymbolInfo.LimitRate ISymbolInfo.ContractMultiplier ISymbolInfo.ListDate ISymbolInfo.DelistDate ISymbolInfo.TradingHours ISymbolInfo.Phone ISymbolInfo.WebUrl ISymbolInfo.FullTimeEmployees ISymbolInfo.FiscalYearEndMonth ISymbolInfo.Sector ISymbolInfo.Industry ISymbolInfo.GicSector ISymbolInfo.GicGroup ISymbolInfo.GicIndustry ISymbolInfo.GicSubIndustry ISymbolInfo.FutureLastTradeDay ISymbolInfo.FutureSettlementMonths ISymbolInfo.UnderlyingSymbol ISymbolInfo.BuyInterest ISymbolInfo.SellInterest ITick.SymbolInfo ITick.Last ITick.LastVolume ITick.LastTurnover ITick.Ask ITick.AskVolume ITick.AskOrders ITick.Bid ITick.BidVolume ITick.BidOrders ITick.Spread ITick.BidLevels ITick.AskLevels ITick.BidDepth ITick.AskDepth ITick.PreClose ITick.Open ITick.High ITick.Low ITick.Close ITick.FormatMoney(double) ITick.DigitsFun() ITimeValue.Time 属性 Change 涨跌 double Change { get; } 属性值 double ChangeOutOfHours 盘外涨跌（盘前盘后最新涨跌） double ChangeOutOfHours { get; } 属性值 double ChangeRate 涨跌比例 double ChangeRate { get; } 属性值 double ChangeRateOutOfHours 盘外涨跌比例（盘前盘后最新涨跌） double ChangeRateOutOfHours { get; } 属性值 double Contract SymbolContract Contract { get; } 属性值 SymbolContract IsLive 是否实时的, 也即 SubscriptionStatus == ESubscriptionStatus.Subscribed bool IsLive { get; } 属性值 bool MarginRate 保证金率 double MarginRate { get; } 属性值 double OrderBook Orderbook IOrderBook OrderBook { get; } 属性值 IOrderBook Provider 对应的Provider IProvider Provider { get; } 属性值 IProvider SubscriptionStatus 订阅状态 当网络断开，原来subscribed的symbol，会自动成为unsubscribed状态， 网络恢复后，如果需要symbol实时，会自动恢复订阅 ESubscriptionStatus SubscriptionStatus { get; } 属性值 ESubscriptionStatus SupportTimeFrames 支持的时间周期 ETimeFrame SupportTimeFrames { get; } 属性值 ETimeFrame TradingDay DateTime TradingDay { get; } 属性值 DateTime 方法 GetBarsAsync(ETimeFrame, HistoryInfo) IBars GetBarsAsync(ETimeFrame tf, HistoryInfo history = null) 参数 tf ETimeFrame history HistoryInfo 返回 IBars GetTicksAsync() Task<IDayTicks> GetTicksAsync() 返回 Task<IDayTicks> NormalizeLots(double) 获得一个合适的lots double NormalizeLots(double lots) 参数 lots double 返回 double 事件 OnTick tick数据 event EventHandler<ITick> OnTick 事件类型 EventHandler<ITick>"
  },
  "doc/api/Sparks.Trader.Api.ISymbolInfo.html": {
    "href": "doc/api/Sparks.Trader.Api.ISymbolInfo.html",
    "title": "ISymbolInfo 接口 | SparksTrader文档",
    "keywords": "ISymbolInfo 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ISymbolInfo 属性 BuyInterest 买利率 CFD/商品等 double BuyInterest { get; } 属性值 double Code 显示代码 string Code { get; } 属性值 string ContractMultiplier 合约乘数 double ContractMultiplier { get; } 属性值 double Currency 货币 ECurrency Currency { get; } 属性值 ECurrency DelistDate 下市日 DateOnly? DelistDate { get; } 属性值 DateOnly? Desc 描述 string Desc { get; } 属性值 string Digits 精度 int Digits { get; } 属性值 int Exchange 交易所 IExchange Exchange { get; } 属性值 IExchange ExchangeCode 交易所Code string ExchangeCode { get; } 属性值 string FiscalYearEndMonth 财务年终结月 double FiscalYearEndMonth { get; } 属性值 double FullTimeEmployees FullTimeEmployees double FullTimeEmployees { get; } 属性值 double FutureLastTradeDay 最后交易日 int? FutureLastTradeDay { get; } 属性值 int? FutureSettlementMonths 交割月份 int? FutureSettlementMonths { get; } 属性值 int? GicGroup GicGroup string GicGroup { get; } 属性值 string GicIndustry GicIndustry string GicIndustry { get; } 属性值 string GicSector GicsSector string GicSector { get; } 属性值 string GicSubIndustry GicSubIndustry string GicSubIndustry { get; } 属性值 string IconPath 图标 string IconPath { get; } 属性值 string IconPath2 图标2 string IconPath2 { get; } 属性值 string Industry 产业 string Industry { get; } 属性值 string IsCustom 是否用户自定义的，可以更新删除 bool IsCustom { get; } 属性值 bool LimitRate 涨跌幅限制 double LimitRate { get; } 属性值 double ListDate 上市日 DateOnly? ListDate { get; } 属性值 DateOnly? LotSize 每手大小 double LotSize { get; } 属性值 double Name 名称 string Name { get; } 属性值 string NatureType 自然类型 ENatureType NatureType { get; } 属性值 ENatureType Phone phone string Phone { get; } 属性值 string PointSize 点差 double PointSize { get; } 属性值 double Sector sector板块 string Sector { get; } 属性值 string SellInterest 卖利率 CFD/商品等 double SellInterest { get; } 属性值 double SymbolType Symbol类型 ESymbolType SymbolType { get; } 属性值 ESymbolType TradingCode 交易所交易代码 比如大豆期货连续合约显示代码(Code)是A8888,对于这类主连合约来说， tradingCode指的是主力合约代码,比如a2305 string TradingCode { get; } 属性值 string TradingHours 交易时间 ITradingHours TradingHours { get; } 属性值 ITradingHours UnderlyingSymbol 底层代码 期货a2305, 底层代码为a string UnderlyingSymbol { get; } 属性值 string WebUrl web url string WebUrl { get; } 属性值 string"
  },
  "doc/api/Sparks.Trader.Api.ISymbolInfos.html": {
    "href": "doc/api/Sparks.Trader.Api.ISymbolInfos.html",
    "title": "ISymbolInfos 接口 | SparksTrader文档",
    "keywords": "ISymbolInfos 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ISymbolInfos : IGroup<ISymbolInfo>, IReadOnlyList<ISymbolInfo>, IReadOnlyCollection<ISymbolInfo>, IEnumerable<ISymbolInfo>, IEnumerable 继承成员 IGroup<ISymbolInfo>.Added IGroup<ISymbolInfo>.Removed IReadOnlyList<ISymbolInfo>.this[int] IReadOnlyCollection<ISymbolInfo>.Count IEnumerable<ISymbolInfo>.GetEnumerator() 方法 FindSymbolInfos(SymbolContract) 模糊查找 List<ISymbolInfo> FindSymbolInfos(SymbolContract con) 参数 con SymbolContract 返回 List<ISymbolInfo> GetSymbolInfo(SymbolContract) 精确查找 ISymbolInfo GetSymbolInfo(SymbolContract contract) 参数 contract SymbolContract 返回 ISymbolInfo"
  },
  "doc/api/Sparks.Trader.Api.IText.html": {
    "href": "doc/api/Sparks.Trader.Api.IText.html",
    "title": "IText 接口 | SparksTrader文档",
    "keywords": "IText 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IText : IChartObject, IChartObjectBase 继承成员 IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Background 背景，如果有 Fill? Background { get; set; } 属性值 Fill Border 边框，如果有 Stroke? Border { get; set; } 属性值 Stroke Content 内容 string Content { get; set; } 属性值 string FontSpec 文字规格 FontSpec FontSpec { get; set; } 属性值 FontSpec HorizontalAlignment 垂直对齐 HorizontalAlignment HorizontalAlignment { get; set; } 属性值 HorizontalAlignment Position 位置 ChartPoint Position { get; set; } 属性值 ChartPoint VerticalAlignment 水平对齐 VerticalAlignment VerticalAlignment { get; set; } 属性值 VerticalAlignment"
  },
  "doc/api/Sparks.Trader.Api.ITick.html": {
    "href": "doc/api/Sparks.Trader.Api.ITick.html",
    "title": "ITick 接口 | SparksTrader文档",
    "keywords": "ITick 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ITick : ITimeValue 继承成员 ITimeValue.Time 属性 Ask [Display(Name = \"卖价\", Description = \"卖价\")] [Format(PrecisionFuncName = \"DigitsFun\")] double Ask { get; } 属性值 double AskDepth byte AskDepth { get; } 属性值 byte AskLevels MarketLevel[] AskLevels { get; } 属性值 MarketLevel[] AskOrders double AskOrders { get; } 属性值 double AskVolume double AskVolume { get; } 属性值 double Bid [Display(Name = \"买价\", Description = \"买价\")] [Format(PrecisionFuncName = \"DigitsFun\")] double Bid { get; } 属性值 double BidDepth byte BidDepth { get; } 属性值 byte BidLevels MarketLevel[] BidLevels { get; } 属性值 MarketLevel[] BidOrders double BidOrders { get; } 属性值 double BidVolume double BidVolume { get; } 属性值 double Close [Display(Name = \"停盘价\", Description = \"停盘价\")] [Format(IsAnimationPrevVal = true, RealyStat = \"PreClose\", ShowArrow = true, PrecisionFuncName = \"DigitsFun\")] double Close { get; } 属性值 double High [Display(Name = \"最高价\", Description = \"最高价\")] [Format(RealyStat = \"PreClose\", PrecisionFuncName = \"DigitsFun\")] double High { get; } 属性值 double Last [Display(Name = \"最新价\", Description = \"最新价\")] [Format(RealyStat = \"PreClose\", ShowArrow = true, PrecisionFuncName = \"DigitsFun\")] double Last { get; } 属性值 double LastTurnover [Display(Name = \"成交额\", Description = \"成交额\")] double LastTurnover { get; } 属性值 double LastVolume [Display(Name = \"成交量\", Description = \"成交量\")] double LastVolume { get; } 属性值 double Low [Display(Name = \"最低价\", Description = \"最低价\")] [Format(RealyStat = \"PreClose\", PrecisionFuncName = \"DigitsFun\")] double Low { get; } 属性值 double Open [Display(Name = \"开盘价\", Description = \"开盘价\")] [Format(RealyStat = \"PreClose\", PrecisionFuncName = \"DigitsFun\")] double Open { get; } 属性值 double PreClose [Display(Name = \"昨收价\", Description = \"昨收价\")] [Format(PrecisionFuncName = \"DigitsFun\")] double PreClose { get; } 属性值 double Spread [Display(Name = \"点差\", Description = \"点差\")] [Format(Precision = 0)] double Spread { get; } 属性值 double SymbolInfo ISymbolInfo SymbolInfo { get; } 属性值 ISymbolInfo 方法 DigitsFun() int DigitsFun() 返回 int FormatMoney(double) string FormatMoney(double v) 参数 v double 返回 string"
  },
  "doc/api/Sparks.Trader.Api.ITimeAxis.html": {
    "href": "doc/api/Sparks.Trader.Api.ITimeAxis.html",
    "title": "ITimeAxis 接口 | SparksTrader文档",
    "keywords": "ITimeAxis 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 时间轴 public interface ITimeAxis : IChartXAxis, IChartAxis 继承成员 IChartXAxis.Height IChartAxis.Location IChartAxis.Rect IChartAxis.Width IChartAxis.Background IChartAxis.TextFont IChartAxis.Stroke IChartAxis.CaclSpecs() 属性 AxisScaleType ETimeAxisScale AxisScaleType { get; } 属性值 ETimeAxisScale LeftAsOpen bool LeftAsOpen { get; set; } 属性值 bool LeftDate DateTime? LeftDate { get; } 属性值 DateTime? RightDate DateTime? RightDate { get; } 属性值 DateTime? Scales IReadOnlyList<DateTime> Scales { get; } 属性值 IReadOnlyList<DateTime> 方法 GetDateTimeByUnitIndex(int) DateTime? GetDateTimeByUnitIndex(int index) 参数 index int 返回 DateTime? GetDateTimeByX(double) DateTime? GetDateTimeByX(double y) 参数 y double 返回 DateTime? GetXByDataTime(DateTime) double GetXByDataTime(DateTime dt) 参数 dt DateTime 返回 double"
  },
  "doc/api/Sparks.Trader.Api.ITimes.html": {
    "href": "doc/api/Sparks.Trader.Api.ITimes.html",
    "title": "ITimes 接口 | SparksTrader文档",
    "keywords": "ITimes 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ITimes : IReadOnlyList<DateTime>, IReadOnlyCollection<DateTime>, IEnumerable<DateTime>, IEnumerable 继承成员 IReadOnlyList<DateTime>.this[int] IReadOnlyCollection<DateTime>.Count IEnumerable<DateTime>.GetEnumerator() 方法 IndexOf(DateTime) int IndexOf(DateTime item) 参数 item DateTime 返回 int Last(int) DateTime? Last(int index) 参数 index int 返回 DateTime?"
  },
  "doc/api/Sparks.Trader.Api.ITimeValue.html": {
    "href": "doc/api/Sparks.Trader.Api.ITimeValue.html",
    "title": "ITimeValue 接口 | SparksTrader文档",
    "keywords": "ITimeValue 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 时间序列对象 public interface ITimeValue 属性 Time 时间 [Display(Name = \"时间\", Description = \"Time\")] [Format(DateTimeShowWay = EDateTimeShowWay.DateTime_MS)] DateTime Time { get; } 属性值 DateTime"
  },
  "doc/api/Sparks.Trader.Api.ITimeValues-1.html": {
    "href": "doc/api/Sparks.Trader.Api.ITimeValues-1.html",
    "title": "ITimeValues<T> 接口 | SparksTrader文档",
    "keywords": "ITimeValues<T> 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ITimeValues<T> : IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable where T : ITimeValue 类型参数 T 继承成员 IReadOnlyList<T>.this[int] IReadOnlyCollection<T>.Count IEnumerable<T>.GetEnumerator()"
  },
  "doc/api/Sparks.Trader.Api.ITimeValues.html": {
    "href": "doc/api/Sparks.Trader.Api.ITimeValues.html",
    "title": "ITimeValues 接口 | SparksTrader文档",
    "keywords": "ITimeValues 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ITimeValues : IReadOnlyList<ITimeValue>, IReadOnlyCollection<ITimeValue>, IEnumerable<ITimeValue>, IEnumerable 继承成员 IReadOnlyList<ITimeValue>.this[int] IReadOnlyCollection<ITimeValue>.Count IEnumerable<ITimeValue>.GetEnumerator()"
  },
  "doc/api/Sparks.Trader.Api.ITrade.html": {
    "href": "doc/api/Sparks.Trader.Api.ITrade.html",
    "title": "ITrade 接口 | SparksTrader文档",
    "keywords": "ITrade 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ITrade : ITradeCommon, INotifyPropertyChanged 继承成员 ITradeCommon.Id ITradeCommon.AccountCode ITradeCommon.Account ITradeCommon.Symbol ITradeCommon.Contract ITradeCommon.Code ITradeCommon.SymbolType ITradeCommon.ExchangeCode ITradeCommon.Currency ITradeCommon.OpenOrderID ITradeCommon.OpenOrder ITradeCommon.OpenTime ITradeCommon.OpenPrice ITradeCommon.OpenMarketValue ITradeCommon.Direction ITradeCommon.Quantity ITradeCommon.PLType ITradeCommon.PLPips ITradeCommon.PL ITradeCommon.PLRatio ITradeCommon.Commission ITradeCommon.Comment ITradeCommon.PLPresentationString(EPLPresentation) INotifyPropertyChanged.PropertyChanged 属性 Last 最新价 double Last { get; } 属性值 double Margin 占用保证金 double Margin { get; } 属性值 double MarketValue 市场价值 double MarketValue { get; } 属性值 double 方法 Close(double?, Action<TradeResult>) 平仓 TradeOperation Close(double? quantity = null, Action<TradeResult> callback = null) 参数 quantity double? callback Action<TradeResult> 返回 TradeOperation"
  },
  "doc/api/Sparks.Trader.Api.ITradeCommon.html": {
    "href": "doc/api/Sparks.Trader.Api.ITradeCommon.html",
    "title": "ITradeCommon 接口 | SparksTrader文档",
    "keywords": "ITradeCommon 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ITradeCommon : INotifyPropertyChanged 继承成员 INotifyPropertyChanged.PropertyChanged 属性 Account 所属ITradingAccount ITradingAccount Account { get; } 属性值 ITradingAccount AccountCode Account Code string AccountCode { get; } 属性值 string Code 品种代码 string Code { get; } 属性值 string Comment 注释 string Comment { get; } 属性值 string Commission 手续费 double Commission { get; } 属性值 double Contract 对应的合约 SymbolContract Contract { get; } 属性值 SymbolContract Currency 币种 ECurrency Currency { get; } 属性值 ECurrency Direction 方向 ETradeDirection Direction { get; } 属性值 ETradeDirection ExchangeCode 交易所 string ExchangeCode { get; } 属性值 string Id Id string Id { get; } 属性值 string OpenMarketValue 开仓市值 double OpenMarketValue { get; } 属性值 double OpenOrder 开仓单 IOrder OpenOrder { get; } 属性值 IOrder OpenOrderID 开仓单，如果有 string OpenOrderID { get; } 属性值 string OpenPrice 开仓价 double OpenPrice { get; } 属性值 double OpenTime 开仓时间 DateTime? OpenTime { get; } 属性值 DateTime? PL 盈亏值 double PL { get; } 属性值 double PLPips 盈亏点数 double PLPips { get; } 属性值 double PLRatio 盈亏比例 double PLRatio { get; } 属性值 double PLType 盈亏类型 EPL PLType { get; } 属性值 EPL Quantity 数量 double Quantity { get; } 属性值 double Symbol 对应品种 ISymbol Symbol { get; } 属性值 ISymbol SymbolType 品种类型 ESymbolType SymbolType { get; } 属性值 ESymbolType 方法 PLPresentationString(EPLPresentation) 返回一个盈亏表现字符串 string PLPresentationString(EPLPresentation presentation) 参数 presentation EPLPresentation 返回 string"
  },
  "doc/api/Sparks.Trader.Api.ITradeLog.html": {
    "href": "doc/api/Sparks.Trader.Api.ITradeLog.html",
    "title": "ITradeLog 接口 | SparksTrader文档",
    "keywords": "ITradeLog 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ITradeLog"
  },
  "doc/api/Sparks.Trader.Api.ITraderApp.html": {
    "href": "doc/api/Sparks.Trader.Api.ITraderApp.html",
    "title": "ITraderApp 接口 | SparksTrader文档",
    "keywords": "ITraderApp 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ITraderApp : INotifyPropertyChanged 继承成员 INotifyPropertyChanged.PropertyChanged 属性 Duration TimeSpan Duration { get; } 属性值 TimeSpan Instance public static ITraderApp Instance { get; } 属性值 ITraderApp MarketDataManager IMarketDataManager MarketDataManager { get; } 属性值 IMarketDataManager Name string Name { get; } 属性值 string Providers IProviders Providers { get; } 属性值 IProviders StartTime DateTime StartTime { get; } 属性值 DateTime TradingAccountManager ITradingAccountManager TradingAccountManager { get; } 属性值 ITradingAccountManager Version Version Version { get; } 属性值 Version Watchlists IWatchlists Watchlists { get; } 属性值 IWatchlists"
  },
  "doc/api/Sparks.Trader.Api.ITrades.html": {
    "href": "doc/api/Sparks.Trader.Api.ITrades.html",
    "title": "ITrades 接口 | SparksTrader文档",
    "keywords": "ITrades 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ITrades : IReadOnlyList<ITrade>, IReadOnlyCollection<ITrade>, IEnumerable<ITrade>, IEnumerable 继承成员 IReadOnlyList<ITrade>.this[int] IReadOnlyCollection<ITrade>.Count IEnumerable<ITrade>.GetEnumerator() 事件 Closed Occurs each time a position is closed. event EventHandler<ITrade> Closed 事件类型 EventHandler<ITrade> 示例 protected override void OnStart() { Positions.Closed += PositionsOnClosed; } private void PositionsOnClosed(PositionClosedEventArgs args) { var position = args.Position; Print(\"Position closed with {0} profit\", position.GrossProfit); } Modified Occurs each time a position is modified. event EventHandler<ITrade> Modified 事件类型 EventHandler<ITrade> Opened Occurs each time a position is opened. event EventHandler<ITrade> Opened 事件类型 EventHandler<ITrade> 示例 protected override void OnStart() { Positions.Opened += PositionsOnOpened; } private void PositionsOnOpened(PositionOpenedEventArgs args) { Print(\"Position opened {0}\", args.Position.Label); }"
  },
  "doc/api/Sparks.Trader.Api.ITradingAccount.html": {
    "href": "doc/api/Sparks.Trader.Api.ITradingAccount.html",
    "title": "ITradingAccount 接口 | SparksTrader文档",
    "keywords": "ITradingAccount 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ITradingAccount : INotifyPropertyChanged 继承成员 INotifyPropertyChanged.PropertyChanged 属性 AccountCode 账户代码 string AccountCode { get; } 属性值 string AllOrders 所有订单 IEnumerable<IOrder> AllOrders { get; } 属性值 IEnumerable<IOrder> Balance 权益 double? Balance { get; } 属性值 double? ClosedTrades 已关闭交易 IGroup<IClosedTrade> ClosedTrades { get; } 属性值 IGroup<IClosedTrade> Currency 币种 ECurrency Currency { get; } 属性值 ECurrency DayPL 每日盈亏(如果有) double? DayPL { get; } 属性值 double? Equity 净值 double Equity { get; } 属性值 double GrossPL 盈亏 double GrossPL { get; } 属性值 double HistoryOrders 历史订单 IGroup<IOrder> HistoryOrders { get; } 属性值 IGroup<IOrder> InitMargin 初始保证金 double? InitMargin { get; } 属性值 double? IsLive 是否实时的 bool IsLive { get; } 属性值 bool MaintainMargin 维持保证金 double? MaintainMargin { get; } 属性值 double? PendingOrders 未成交订单 IPendingOrders PendingOrders { get; } 属性值 IPendingOrders Positions 组合头寸， ib， ctp等 IGroup<IPosition> Positions { get; } 属性值 IGroup<IPosition> Provider 对应IProvider IProvider Provider { get; } 属性值 IProvider Trades 当前交易 ITrades Trades { get; } 属性值 ITrades 方法 CancelOrder(IOrder, Action<TradeResult>) 撤单 TradeOperation CancelOrder(IOrder order, Action<TradeResult> callback = null) 参数 order IOrder callback Action<TradeResult> 返回 TradeOperation ClosePosition(IPosition, double?, Action<TradeResult>) 平position TradeOperation ClosePosition(IPosition p, double? quantity = null, Action<TradeResult> callback = null) 参数 p IPosition quantity double? callback Action<TradeResult> 返回 TradeOperation CloseTrade(ITrade, Action<TradeResult>) 平trade TradeOperation CloseTrade(ITrade t, Action<TradeResult> callback = null) 参数 t ITrade callback Action<TradeResult> 返回 TradeOperation ModifyOrder(IOrder, double?, double?, double?, ETIF?, double?, double?, Action<TradeResult>) 修改订单 TradeOperation ModifyOrder(IOrder order, double? price = null, double? auxPrice = null, double? quantity = null, ETIF? tif = ETIF.GTC, double? takeProfit = null, double? stopLoss = null, Action<TradeResult> callback = null) 参数 order IOrder price double? auxPrice double? quantity double? tif ETIF? takeProfit double? stopLoss double? callback Action<TradeResult> 返回 TradeOperation PlaceLimitOrder(SymbolContract, ETradeDirection, double, double, EOpenClose, ETIF, double?, double?, string, Action<TradeResult>) Place Limit Order TradeOperation PlaceLimitOrder(SymbolContract contract, ETradeDirection direction, double price, double lots, EOpenClose openClose = EOpenClose.Open, ETIF tif = ETIF.GTC, double? takeProfit = null, double? stopLoss = null, string label = null, Action<TradeResult> callback = null) 参数 contract SymbolContract direction ETradeDirection price double lots double openClose EOpenClose tif ETIF takeProfit double? stopLoss double? label string callback Action<TradeResult> 返回 TradeOperation PlaceMarketOrder(SymbolContract, ETradeDirection, double, EOpenClose, ETIF, double?, double?, string, Action<TradeResult>) Place Market Order TradeOperation PlaceMarketOrder(SymbolContract contract, ETradeDirection direction, double lots, EOpenClose openClose = EOpenClose.Open, ETIF tif = ETIF.GTC, double? takeProfit = null, double? stopLoss = null, string label = null, Action<TradeResult> callback = null) 参数 contract SymbolContract direction ETradeDirection lots double openClose EOpenClose tif ETIF takeProfit double? stopLoss double? label string callback Action<TradeResult> 返回 TradeOperation PlaceOrder(OrderReq, Action<TradeResult>) 下单 TradeOperation PlaceOrder(OrderReq orderReq, Action<TradeResult> callback = null) 参数 orderReq OrderReq callback Action<TradeResult> 返回 TradeOperation PlaceStopOrder(SymbolContract, ETradeDirection, double, double, EOpenClose, ETIF, double?, double?, string, Action<TradeResult>) Place Stop Order TradeOperation PlaceStopOrder(SymbolContract contract, ETradeDirection direction, double price, double lots, EOpenClose openClose = EOpenClose.Open, ETIF tif = ETIF.GTC, double? takeProfit = null, double? stopLoss = null, string label = null, Action<TradeResult> callback = null) 参数 contract SymbolContract direction ETradeDirection price double lots double openClose EOpenClose tif ETIF takeProfit double? stopLoss double? label string callback Action<TradeResult> 返回 TradeOperation"
  },
  "doc/api/Sparks.Trader.Api.ITradingAccountManager.html": {
    "href": "doc/api/Sparks.Trader.Api.ITradingAccountManager.html",
    "title": "ITradingAccountManager 接口 | SparksTrader文档",
    "keywords": "ITradingAccountManager 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ITradingAccountManager 属性 TradingAccounts ReadOnlyObservableCollection<ITradingAccount> TradingAccounts { get; } 属性值 ReadOnlyObservableCollection<ITradingAccount>"
  },
  "doc/api/Sparks.Trader.Api.ITradingHours.html": {
    "href": "doc/api/Sparks.Trader.Api.ITradingHours.html",
    "title": "ITradingHours 接口 | SparksTrader文档",
    "keywords": "ITradingHours 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ITradingHours 属性 DaySessions [Display(Name = \"DaySessions\")] IReadOnlyList<IDaySession> DaySessions { get; } 属性值 IReadOnlyList<IDaySession> Desc [Display(Name = \"Desc\")] string Desc { get; } 属性值 string IsCustom 是否用户自定义 bool IsCustom { get; } 属性值 bool Name [Display(Name = \"Name\")] string Name { get; } 属性值 string TimeZoneInfo [Display(Name = \"TimeZone\")] TimeZoneInfo TimeZoneInfo { get; } 属性值 TimeZoneInfo 方法 IsOpened(DateTime?, out ITradingSession, bool) bool IsOpened(DateTime? datetime, out ITradingSession session, bool convertTime = true) 参数 datetime DateTime? session ITradingSession convertTime bool 返回 bool IsOpened(DateTime?, bool) bool IsOpened(DateTime? datetime = null, bool convertTime = true) 参数 datetime DateTime? convertTime bool 返回 bool"
  },
  "doc/api/Sparks.Trader.Api.ITradingHoursManager.html": {
    "href": "doc/api/Sparks.Trader.Api.ITradingHoursManager.html",
    "title": "ITradingHoursManager 接口 | SparksTrader文档",
    "keywords": "ITradingHoursManager 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ITradingHoursManager 属性 TradingHours ObservableCollection<ITradingHours> TradingHours { get; } 属性值 ObservableCollection<ITradingHours>"
  },
  "doc/api/Sparks.Trader.Api.ITradingSession.html": {
    "href": "doc/api/Sparks.Trader.Api.ITradingSession.html",
    "title": "ITradingSession 接口 | SparksTrader文档",
    "keywords": "ITradingSession 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ITradingSession 属性 DaySession 所属的DaySession [JsonIgnore] IDaySession DaySession { get; } 属性值 IDaySession DaySpan [JsonIgnore] IReadOnlySet<DayOfWeek> DaySpan { get; } 属性值 IReadOnlySet<DayOfWeek> Duration 持续时间 [JsonIgnore] TimeSpan Duration { get; } 属性值 TimeSpan EndDay 结束天 DayOfWeek EndDay { get; } 属性值 DayOfWeek EndTime 结束时间 TimeSpan EndTime { get; } 属性值 TimeSpan StartDay 开始天 DayOfWeek StartDay { get; } 属性值 DayOfWeek StartTime 开始时间 TimeSpan StartTime { get; } 属性值 TimeSpan 方法 End(DateTime?, bool) DateTime? End(DateTime? dt = null, bool convertTime = true) 参数 dt DateTime? convertTime bool 返回 DateTime? IsEnd(DateTime, bool) bool IsEnd(DateTime dt, bool convertTime = true) 参数 dt DateTime convertTime bool 返回 bool IsOpened(DateTime?, bool) bool IsOpened(DateTime? datetime = null, bool convertTime = true) 参数 datetime DateTime? convertTime bool 返回 bool IsStart(DateTime, bool) bool IsStart(DateTime dt, bool convertTime = true) 参数 dt DateTime convertTime bool 返回 bool Start(DateTime?, bool) DateTime? Start(DateTime? dt = null, bool convertTime = true) 参数 dt DateTime? convertTime bool 返回 DateTime?"
  },
  "doc/api/Sparks.Trader.Api.ITrendLine.html": {
    "href": "doc/api/Sparks.Trader.Api.ITrendLine.html",
    "title": "ITrendLine 接口 | SparksTrader文档",
    "keywords": "ITrendLine 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ITrendLine : IChartObject, IChartObjectBase 继承成员 IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 End 结束点 ChartPoint End { get; set; } 属性值 ChartPoint ExtendEnd 延伸结束点 bool ExtendEnd { get; set; } 属性值 bool ExtendStart 延伸开始点 bool ExtendStart { get; set; } 属性值 bool Start 开始点 ChartPoint Start { get; set; } 属性值 ChartPoint Stroke 线型 Stroke Stroke { get; set; } 属性值 Stroke 方法 CalculateY(DateTime) Calculates Y-axis value corresponding the specified time value. double CalculateY(DateTime time) 参数 time DateTime The time. 返回 double System.Double. CalculateY(int) Calculates Y-axis value corresponding the specified bar index. double CalculateY(int barIndex) 参数 barIndex int Index of the bar. 返回 double System.Double."
  },
  "doc/api/Sparks.Trader.Api.ITriangle.html": {
    "href": "doc/api/Sparks.Trader.Api.ITriangle.html",
    "title": "ITriangle 接口 | SparksTrader文档",
    "keywords": "ITriangle 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface ITriangle : IChartObject, IChartObjectBase 继承成员 IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 A A ChartPoint A { get; set; } 属性值 ChartPoint B B ChartPoint B { get; set; } 属性值 ChartPoint C c ChartPoint C { get; set; } 属性值 ChartPoint Fill 背景，如果有 Fill? Fill { get; set; } 属性值 Fill Stroke 线型 Stroke Stroke { get; set; } 属性值 Stroke"
  },
  "doc/api/Sparks.Trader.Api.IUserChartSetting.html": {
    "href": "doc/api/Sparks.Trader.Api.IUserChartSetting.html",
    "title": "IUserChartSetting 接口 | SparksTrader文档",
    "keywords": "IUserChartSetting 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IUserChartSetting 属性 AskStroke Ask线 Stroke AskStroke { get; set; } 属性值 Stroke AxisBackground 坐标轴background Fill AxisBackground { get; set; } 属性值 Fill AxisFont 坐标轴文字设置 FontSpec AxisFont { get; set; } 属性值 FontSpec AxisStroke 坐标轴Stroke Stroke AxisStroke { get; set; } 属性值 Stroke BackgroundColor 背景色 Color BackgroundColor { get; set; } 属性值 Color BearColor 阴颜色 Color BearColor { get; set; } 属性值 Color BearFillColor 阴线主体颜色 Color BearFillColor { get; set; } 属性值 Color BearOutlineColor 阴线轮廓颜色 Color BearOutlineColor { get; set; } 属性值 Color BidStroke Bid线 Stroke BidStroke { get; set; } 属性值 Stroke BullColor 阳颜色 Color BullColor { get; set; } 属性值 Color BullFillColor 阳线主体颜色 Color BullFillColor { get; set; } 属性值 Color BullOutlineColor 阳线轮廓颜色 Color BullOutlineColor { get; set; } 属性值 Color ForegroundColor 前景色 Color ForegroundColor { get; set; } 属性值 Color HighlightColor 高亮色 Color HighlightColor { get; set; } 属性值 Color HorizontalGridStroke 水平网格线 Stroke HorizontalGridStroke { get; set; } 属性值 Stroke LastDeclineStroke 最新价线(跌) Stroke LastDeclineStroke { get; set; } 属性值 Stroke LastEvenStroke 最新价线(平) Stroke LastEvenStroke { get; set; } 属性值 Stroke LastRiseStroke 最新价线(涨) Stroke LastRiseStroke { get; set; } 属性值 Stroke MouseCrossStroke 鼠标十字线 Stroke MouseCrossStroke { get; set; } 属性值 Stroke Name string Name { get; set; } 属性值 string ShowGrid 显示网格线 bool ShowGrid { get; set; } 属性值 bool ShowOrders 显示订单 bool ShowOrders { get; set; } 属性值 bool ShowPositions 显示持仓 bool ShowPositions { get; set; } 属性值 bool VerticalGridStroke 垂直网格线 Stroke VerticalGridStroke { get; set; } 属性值 Stroke 方法 GetColor(EPL) Color GetColor(EPL plType) 参数 plType EPL 返回 Color GetColor(ETradeDirection) Color GetColor(ETradeDirection tradeDirection) 参数 tradeDirection ETradeDirection 返回 Color GetPriceColor(EBarDirection) Color GetPriceColor(EBarDirection direction = EBarDirection.Rise) 参数 direction EBarDirection 返回 Color GetPriceStroke(EBarDirection) Stroke GetPriceStroke(EBarDirection direction = EBarDirection.Rise) 参数 direction EBarDirection 返回 Stroke"
  },
  "doc/api/Sparks.Trader.Api.IVerticalLine.html": {
    "href": "doc/api/Sparks.Trader.Api.IVerticalLine.html",
    "title": "IVerticalLine 接口 | SparksTrader文档",
    "keywords": "IVerticalLine 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 垂直线 public interface IVerticalLine : IChartObject, IChartObjectBase 继承成员 IChartObject.IsLocked IChartObject.ObjectType IChartObject.Name IChartObjectBase.Chart IChartObjectBase.ChartArea IChartObjectBase.IsVisible IChartObjectBase.IsInteractive IChartObjectBase.IsSelected IChartObjectBase.IsHovering IChartObjectBase.IsHighlighted IChartObjectBase.ZOrder IChartObjectBase.ScrollTo() 属性 Content 内容 string Content { get; set; } 属性值 string FontSpec 文字规格 FontSpec FontSpec { get; set; } 属性值 FontSpec HorizontalAlignment 垂直对齐 HorizontalAlignment HorizontalAlignment { get; set; } 属性值 HorizontalAlignment ShowText 显示文本 bool ShowText { get; set; } 属性值 bool Stroke 线型 Stroke Stroke { get; set; } 属性值 Stroke TextDirection 文字方向 ETextDirection TextDirection { get; set; } 属性值 ETextDirection Time x轴时间 DateTime Time { get; set; } 属性值 DateTime VerticalAlignment 水平对齐 VerticalAlignment VerticalAlignment { get; set; } 属性值 VerticalAlignment"
  },
  "doc/api/Sparks.Trader.Api.IWatchItem.html": {
    "href": "doc/api/Sparks.Trader.Api.IWatchItem.html",
    "title": "IWatchItem 接口 | SparksTrader文档",
    "keywords": "IWatchItem 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IWatchItem 属性 Contract Contract SymbolContract? Contract { get; } 属性值 SymbolContract? ItemType 条目类型 EWatchItemType ItemType { get; } 属性值 EWatchItemType SectionName 区块名 string SectionName { get; } 属性值 string Symbol symbol ISymbol Symbol { get; } 属性值 ISymbol"
  },
  "doc/api/Sparks.Trader.Api.IWatchlist.html": {
    "href": "doc/api/Sparks.Trader.Api.IWatchlist.html",
    "title": "IWatchlist 接口 | SparksTrader文档",
    "keywords": "IWatchlist 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 观察表 public interface IWatchlist 属性 Items 所有条目 IGroup<IWatchItem> Items { get; } 属性值 IGroup<IWatchItem> Name 名称 string Name { get; } 属性值 string 方法 Rename(string) 修改名称 Rtn Rename(string name) 参数 name string 返回 Rtn 事件 NameChanged 名称变化 event EventHandler<string> NameChanged 事件类型 EventHandler<string>"
  },
  "doc/api/Sparks.Trader.Api.IWatchlists.html": {
    "href": "doc/api/Sparks.Trader.Api.IWatchlists.html",
    "title": "IWatchlists 接口 | SparksTrader文档",
    "keywords": "IWatchlists 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface IWatchlists : IGroup<IWatchlist>, IReadOnlyList<IWatchlist>, IReadOnlyCollection<IWatchlist>, IEnumerable<IWatchlist>, IEnumerable 继承成员 IGroup<IWatchlist>.Added IGroup<IWatchlist>.Removed IReadOnlyList<IWatchlist>.this[int] IReadOnlyCollection<IWatchlist>.Count IEnumerable<IWatchlist>.GetEnumerator() 属性 Default 当前的chartLayout IWatchlist Default { get; set; } 属性值 IWatchlist 方法 Create(string) 创建一个新的watchlist Task<Rtn<IWatchlist>> Create(string name = null) 参数 name string 返回 Task<Rtn<IWatchlist>>"
  },
  "doc/api/Sparks.Trader.Api.LimitOrderReq.html": {
    "href": "doc/api/Sparks.Trader.Api.LimitOrderReq.html",
    "title": "LimitOrderReq 类 | SparksTrader文档",
    "keywords": "LimitOrderReq 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class LimitOrderReq : OrderReq 继承 object OrderReq LimitOrderReq 继承成员 OrderReq.OrderType OrderReq.Contract OrderReq.Direction OrderReq.Lots OrderReq.Tif OrderReq.OpenClose OrderReq.CloseTradeId OrderReq.Label object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 LimitOrderReq(SymbolContract, ETradeDirection, double, double, ETIF) public LimitOrderReq(SymbolContract contract, ETradeDirection direction, double lmtPrice, double lots, ETIF tif = ETIF.GTD) 参数 contract SymbolContract direction ETradeDirection lmtPrice double lots double tif ETIF 属性 Price [Display(Name = \"价格\")] public double Price { get; protected set; } 属性值 double"
  },
  "doc/api/Sparks.Trader.Api.MarketLevel.html": {
    "href": "doc/api/Sparks.Trader.Api.MarketLevel.html",
    "title": "MarketLevel 类 | SparksTrader文档",
    "keywords": "MarketLevel 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class MarketLevel 继承 object MarketLevel 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 MarketLevel(double, double, double) public MarketLevel(double price, double volume = NaN, double orders = NaN) 参数 price double volume double orders double 属性 Orders public double Orders { get; protected set; } 属性值 double Price public double Price { get; protected set; } 属性值 double Volume public double Volume { get; protected set; } 属性值 double"
  },
  "doc/api/Sparks.Trader.Api.MarketOrderReq.html": {
    "href": "doc/api/Sparks.Trader.Api.MarketOrderReq.html",
    "title": "MarketOrderReq 类 | SparksTrader文档",
    "keywords": "MarketOrderReq 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class MarketOrderReq : OrderReq 继承 object OrderReq MarketOrderReq 继承成员 OrderReq.OrderType OrderReq.Contract OrderReq.Direction OrderReq.Lots OrderReq.Tif OrderReq.OpenClose OrderReq.CloseTradeId OrderReq.Label object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 MarketOrderReq(SymbolContract, ETradeDirection, double, ETIF) public MarketOrderReq(SymbolContract contract, ETradeDirection direction, double lots, ETIF tif = ETIF.GTD) 参数 contract SymbolContract direction ETradeDirection lots double tif ETIF"
  },
  "doc/api/Sparks.Trader.Api.OrderBookEx.html": {
    "href": "doc/api/Sparks.Trader.Api.OrderBookEx.html",
    "title": "OrderBookEx 类 | SparksTrader文档",
    "keywords": "OrderBookEx 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public static class OrderBookEx 继承 object OrderBookEx 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 方法 Ratio(IOrderLevels, IOrderLevels) public static double Ratio(this IOrderLevels l, IOrderLevels r) 参数 l IOrderLevels r IOrderLevels 返回 double"
  },
  "doc/api/Sparks.Trader.Api.OrderReq.html": {
    "href": "doc/api/Sparks.Trader.Api.OrderReq.html",
    "title": "OrderReq 类 | SparksTrader文档",
    "keywords": "OrderReq 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class OrderReq 继承 object OrderReq 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) 构造函数 OrderReq(EOrderType, SymbolContract, ETradeDirection, double, EOpenClose, ETIF) public OrderReq(EOrderType type, SymbolContract contract, ETradeDirection direction, double quantity, EOpenClose openClose = EOpenClose.Open, ETIF tif = ETIF.GTC) 参数 type EOrderType contract SymbolContract direction ETradeDirection quantity double openClose EOpenClose tif ETIF 属性 AuxPrice [Display(Name = \"辅助价\")] public double? AuxPrice { get; set; } 属性值 double? CloseTradeId 关闭Trade的Id（外汇平台支持） public string CloseTradeId { get; set; } 属性值 string Comment 注释，如果有，大部分外汇平台支持 public string Comment { get; set; } 属性值 string Contract [Display(Name = \"品种\")] public SymbolContract Contract { get; set; } 属性值 SymbolContract Direction [Display(Name = \"买卖\")] public ETradeDirection Direction { get; set; } 属性值 ETradeDirection HasSubOrder 是否有子单，有止盈或者止损单 public bool HasSubOrder { get; } 属性值 bool IsModification 是否是修改订单 public bool IsModification { get; set; } 属性值 bool MarketValue [Display(Name = \"市场价值\")] public double MarketValue { get; set; } 属性值 double ModificationOrder 修改订单对象 public IOrder ModificationOrder { get; set; } 属性值 IOrder ModificationOrderId 修改订单Id，如果要改单需要提供 public string ModificationOrderId { get; set; } 属性值 string OpenClose 开平标志（外汇/ctp支持） public EOpenClose OpenClose { get; set; } 属性值 EOpenClose OrderType [Display(Name = \"类型\")] public EOrderType OrderType { get; set; } 属性值 EOrderType Price [Display(Name = \"价格\")] public double? Price { get; set; } 属性值 double? Quantity [Display(Name = \"数量\")] public double Quantity { get; set; } 属性值 double StopLoss 止损价格，如果有，同时生成子单 public double? StopLoss { get; set; } 属性值 double? StopLossOrderId 止损订单Id, 如果有 public string StopLossOrderId { get; set; } 属性值 string StopLossTif 止损单TIF，如果没有，同TIF fxcm, ib支持 public ETIF? StopLossTif { get; set; } 属性值 ETIF? TakeProfit 止盈价格，如果有，同时生成子单 fxcm, ib支持 public double? TakeProfit { get; set; } 属性值 double? TakeProfitOrderId 止盈订单Id, 如果有 public string TakeProfitOrderId { get; set; } 属性值 string TakeProfitTif 止盈单TIF，如果没有，同TIF fxcm, ib支持 public ETIF? TakeProfitTif { get; set; } 属性值 ETIF? Tif [Display(Name = \"有效期\")] public ETIF Tif { get; set; } 属性值 ETIF 方法 MakeLimitOrder(SymbolContract, ETradeDirection, double, double, EOpenClose, ETIF, double?, double?, string) public static OrderReq MakeLimitOrder(SymbolContract contract, ETradeDirection direction, double price, double quantity, EOpenClose openClose = EOpenClose.Open, ETIF tif = ETIF.GTC, double? takeProfit = null, double? stopLoss = null, string comment = null) 参数 contract SymbolContract direction ETradeDirection price double quantity double openClose EOpenClose tif ETIF takeProfit double? stopLoss double? comment string 返回 OrderReq MakeMarketOrder(SymbolContract, ETradeDirection, double, EOpenClose, ETIF, double?, double?, string) public static OrderReq MakeMarketOrder(SymbolContract contract, ETradeDirection direction, double quantity, EOpenClose openClose = EOpenClose.Open, ETIF tif = ETIF.GTC, double? takeProfit = null, double? stopLoss = null, string comment = null) 参数 contract SymbolContract direction ETradeDirection quantity double openClose EOpenClose tif ETIF takeProfit double? stopLoss double? comment string 返回 OrderReq MakeModificationOrder(IOrder, double?, double?, double?, ETIF?, double?, double?) public static OrderReq MakeModificationOrder(IOrder order, double? price = null, double? auxPrice = null, double? quantity = null, ETIF? tif = ETIF.GTC, double? takeProfit = null, double? stopLoss = null) 参数 order IOrder price double? auxPrice double? quantity double? tif ETIF? takeProfit double? stopLoss double? 返回 OrderReq MakeStopLimitOrder(SymbolContract, ETradeDirection, double, double, double, EOpenClose, ETIF, double?, double?, string) public static OrderReq MakeStopLimitOrder(SymbolContract contract, ETradeDirection direction, double stpPrice, double lmtPrice, double quantity, EOpenClose openClose = EOpenClose.Open, ETIF tif = ETIF.GTC, double? takeProfit = null, double? stopLoss = null, string comment = null) 参数 contract SymbolContract direction ETradeDirection stpPrice double lmtPrice double quantity double openClose EOpenClose tif ETIF takeProfit double? stopLoss double? comment string 返回 OrderReq MakeStopOrder(SymbolContract, ETradeDirection, double, double, EOpenClose, ETIF, double?, double?, string) public static OrderReq MakeStopOrder(SymbolContract contract, ETradeDirection direction, double price, double quantity, EOpenClose openClose = EOpenClose.Open, ETIF tif = ETIF.GTC, double? takeProfit = null, double? stopLoss = null, string comment = null) 参数 contract SymbolContract direction ETradeDirection price double quantity double openClose EOpenClose tif ETIF takeProfit double? stopLoss double? comment string 返回 OrderReq ToString() Returns a string that represents the current object. public override string ToString() 返回 string A string that represents the current object."
  },
  "doc/api/Sparks.Trader.Api.OutputAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.OutputAttribute.html",
    "title": "OutputAttribute 类 | SparksTrader文档",
    "keywords": "OutputAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class OutputAttribute : Attribute 继承 object Attribute OutputAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 OutputAttribute() public OutputAttribute()"
  },
  "doc/api/Sparks.Trader.Api.OutputTypeAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.OutputTypeAttribute.html",
    "title": "OutputTypeAttribute 类 | SparksTrader文档",
    "keywords": "OutputTypeAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class OutputTypeAttribute : Attribute 继承 object Attribute OutputTypeAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 OutputTypeAttribute(EOutputType) public OutputTypeAttribute(EOutputType outputType) 参数 outputType EOutputType 属性 OutputType public EOutputType OutputType { get; set; } 属性值 EOutputType"
  },
  "doc/api/Sparks.Trader.Api.ParameterAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.ParameterAttribute.html",
    "title": "ParameterAttribute 类 | SparksTrader文档",
    "keywords": "ParameterAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class ParameterAttribute : Attribute 继承 object Attribute ParameterAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "doc/api/Sparks.Trader.Api.PopupAlertAction.html": {
    "href": "doc/api/Sparks.Trader.Api.PopupAlertAction.html",
    "title": "PopupAlertAction 类 | SparksTrader文档",
    "keywords": "PopupAlertAction 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class PopupAlertAction : AlertAction 继承 object AlertAction PopupAlertAction 继承成员 AlertAction.ActionType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 PopupAlertAction() public PopupAlertAction()"
  },
  "doc/api/Sparks.Trader.Api.PropertyDefinitionAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.PropertyDefinitionAttribute.html",
    "title": "PropertyDefinitionAttribute 类 | SparksTrader文档",
    "keywords": "PropertyDefinitionAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class PropertyDefinitionAttribute : Attribute 继承 object Attribute PropertyDefinitionAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 属性 PostOnEditValueChanged public bool PostOnEditValueChanged { get; set; } 属性值 bool UseTypeConverterToStringConversion public bool UseTypeConverterToStringConversion { get; set; } 属性值 bool"
  },
  "doc/api/Sparks.Trader.Api.Rtn-1.html": {
    "href": "doc/api/Sparks.Trader.Api.Rtn-1.html",
    "title": "Rtn<T> 类 | SparksTrader文档",
    "keywords": "Rtn<T> 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class Rtn<T> : Rtn 类型参数 T 继承 object Rtn Rtn<T> 继承成员 Rtn.ToString() Rtn.Code Rtn.Msg Rtn.ExMsg Rtn.Success(object) Rtn.Error(object) Rtn.ErrorCode(EErrorCode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) 构造函数 Rtn(EErrorCode, string) public Rtn(EErrorCode code = EErrorCode.Error, string exMsg = null) 参数 code EErrorCode exMsg string Rtn(T, EErrorCode, string) public Rtn(T obj, EErrorCode code = EErrorCode.Success, string exMsg = null) 参数 obj T code EErrorCode exMsg string 属性 Value public T Value { get; protected set; } 属性值 T 运算符 implicit operator T(Rtn<T>) public static implicit operator T(Rtn<T> rtn) 参数 rtn Rtn<T> 返回 T"
  },
  "doc/api/Sparks.Trader.Api.Rtn.html": {
    "href": "doc/api/Sparks.Trader.Api.Rtn.html",
    "title": "Rtn 类 | SparksTrader文档",
    "keywords": "Rtn 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class Rtn 继承 object Rtn Derived Rtn<T> 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) 构造函数 Rtn(EErrorCode, string) public Rtn(EErrorCode code, string exMsg = null) 参数 code EErrorCode exMsg string Rtn(bool, string) public Rtn(bool val = true, string exMsg = null) 参数 val bool exMsg string 属性 Code public EErrorCode Code { get; protected set; } 属性值 EErrorCode ExMsg public string ExMsg { get; protected set; } 属性值 string Msg public string Msg { get; } 属性值 string 方法 Error(object) public static Rtn Error(object exMsg = null) 参数 exMsg object 返回 Rtn ErrorCode(EErrorCode) public static Rtn ErrorCode(EErrorCode code) 参数 code EErrorCode 返回 Rtn Success(object) public static Rtn Success(object exMsg = null) 参数 exMsg object 返回 Rtn ToString() Returns a string that represents the current object. public override string ToString() 返回 string A string that represents the current object. 运算符 implicit operator bool(Rtn) public static implicit operator bool(Rtn rtn) 参数 rtn Rtn 返回 bool"
  },
  "doc/api/Sparks.Trader.Api.ScriptAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.ScriptAttribute.html",
    "title": "ScriptAttribute 类 | SparksTrader文档",
    "keywords": "ScriptAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class ScriptAttribute : Attribute 继承 object Attribute ScriptAttribute Derived IndicatorAttribute StrategyAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 ScriptAttribute() public ScriptAttribute() ScriptAttribute(string) public ScriptAttribute(string group) 参数 group string 属性 Desc public string Desc { get; set; } 属性值 string Group public string Group { get; set; } 属性值 string NetworkFailureAction public ENetworkFailureAction NetworkFailureAction { get; set; } 属性值 ENetworkFailureAction NetworkRestoreAction public ENetworkRestoreAction NetworkRestoreAction { get; set; } 属性值 ENetworkRestoreAction"
  },
  "doc/api/Sparks.Trader.Api.Shadow.html": {
    "href": "doc/api/Sparks.Trader.Api.Shadow.html",
    "title": "Shadow 类 | SparksTrader文档",
    "keywords": "Shadow 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class Shadow 继承 object Shadow 继承成员 object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 属性 Blur public float Blur { get; set; } 属性值 float Color public Color Color { get; set; } 属性值 Color Offset public SizeF Offset { get; set; } 属性值 SizeF 方法 Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) 参数 obj object The object to compare with the current object. 返回 bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() 返回 int A hash code for the current object. 运算符 operator ==(Shadow, Shadow) public static bool operator ==(Shadow left, Shadow right) 参数 left Shadow right Shadow 返回 bool operator !=(Shadow, Shadow) public static bool operator !=(Shadow left, Shadow right) 参数 left Shadow right Shadow 返回 bool"
  },
  "doc/api/Sparks.Trader.Api.ShadowEx.html": {
    "href": "doc/api/Sparks.Trader.Api.ShadowEx.html",
    "title": "ShadowEx 类 | SparksTrader文档",
    "keywords": "ShadowEx 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public static class ShadowEx 继承 object ShadowEx 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 方法 Apply(ICanvas, Shadow) public static void Apply(this ICanvas canvas, Shadow shadow) 参数 canvas ICanvas shadow Shadow"
  },
  "doc/api/Sparks.Trader.Api.SoundAlertAction.html": {
    "href": "doc/api/Sparks.Trader.Api.SoundAlertAction.html",
    "title": "SoundAlertAction 类 | SparksTrader文档",
    "keywords": "SoundAlertAction 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class SoundAlertAction : AlertAction 继承 object AlertAction SoundAlertAction 继承成员 AlertAction.ActionType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 SoundAlertAction(Uri, EAlertSoundDuration) public SoundAlertAction(Uri filePath, EAlertSoundDuration duration) 参数 filePath Uri duration EAlertSoundDuration 属性 Duration public EAlertSoundDuration Duration { get; set; } 属性值 EAlertSoundDuration File public Uri File { get; set; } 属性值 Uri"
  },
  "doc/api/Sparks.Trader.Api.StatAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.StatAttribute.html",
    "title": "StatAttribute 类 | SparksTrader文档",
    "keywords": "StatAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class StatAttribute : Attribute 继承 object Attribute StatAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "doc/api/Sparks.Trader.Api.StepAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.StepAttribute.html",
    "title": "StepAttribute 类 | SparksTrader文档",
    "keywords": "StepAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll 加/减step [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class StepAttribute : Attribute 继承 object Attribute StepAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 StepAttribute(double) public StepAttribute(double step) 参数 step double 属性 Step public double Step { get; set; } 属性值 double"
  },
  "doc/api/Sparks.Trader.Api.StrategyAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.StrategyAttribute.html",
    "title": "StrategyAttribute 类 | SparksTrader文档",
    "keywords": "StrategyAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public sealed class StrategyAttribute : ScriptAttribute 继承 object Attribute ScriptAttribute StrategyAttribute 继承成员 ScriptAttribute.Desc ScriptAttribute.Group ScriptAttribute.NetworkFailureAction ScriptAttribute.NetworkRestoreAction Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() 构造函数 StrategyAttribute() public StrategyAttribute() StrategyAttribute(string) public StrategyAttribute(string group) 参数 group string"
  },
  "doc/api/Sparks.Trader.Api.Stroke.html": {
    "href": "doc/api/Sparks.Trader.Api.Stroke.html",
    "title": "Stroke 类 | SparksTrader文档",
    "keywords": "Stroke 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class Stroke 继承 object Stroke 继承成员 object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) 扩展方法 StrokeEx.Apply(Stroke, StrokeAttribute) 构造函数 Stroke() public Stroke() Stroke(Color) public Stroke(Color c) 参数 c Color 属性 Color public Color Color { get; set; } 属性值 Color DashOffset public float DashOffset { get; set; } 属性值 float DashPattern public float[] DashPattern { get; set; } 属性值 float[] LineCap public LineCap LineCap { get; set; } 属性值 LineCap LineJoin public LineJoin LineJoin { get; set; } 属性值 LineJoin MiterLimit public float MiterLimit { get; set; } 属性值 float Size [Range(1, 3.4028234663852886E+38)] public float Size { get; set; } 属性值 float 方法 Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) 参数 obj object The object to compare with the current object. 返回 bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() 返回 int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() 返回 string A string that represents the current object. 运算符 operator ==(Stroke, Stroke) public static bool operator ==(Stroke left, Stroke right) 参数 left Stroke right Stroke 返回 bool operator !=(Stroke, Stroke) public static bool operator !=(Stroke left, Stroke right) 参数 left Stroke right Stroke 返回 bool"
  },
  "doc/api/Sparks.Trader.Api.StrokeAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.StrokeAttribute.html",
    "title": "StrokeAttribute 类 | SparksTrader文档",
    "keywords": "StrokeAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class StrokeAttribute : DefaultValueAttribute 继承 object Attribute DefaultValueAttribute StrokeAttribute 继承成员 DefaultValueAttribute.Equals(object) DefaultValueAttribute.GetHashCode() DefaultValueAttribute.SetValue(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 StrokeAttribute() public StrokeAttribute() StrokeAttribute(string?) public StrokeAttribute(string? color) 参数 color string 属性 Color public Color Color { get; set; } 属性值 Color DashOffset public float DashOffset { get; set; } 属性值 float DashPattern public string DashPattern { get; set; } 属性值 string LineCap public LineCap LineCap { get; set; } 属性值 LineCap LineJoin public LineJoin LineJoin { get; set; } 属性值 LineJoin MiterLimit public float MiterLimit { get; set; } 属性值 float Size public float Size { get; set; } 属性值 float Stroke public Stroke Stroke { get; } 属性值 Stroke Value Gets the default value of the property this attribute is bound to. public override object? Value { get; } 属性值 object An object that represents the default value of the property this attribute is bound to."
  },
  "doc/api/Sparks.Trader.Api.StrokeEx.html": {
    "href": "doc/api/Sparks.Trader.Api.StrokeEx.html",
    "title": "StrokeEx 类 | SparksTrader文档",
    "keywords": "StrokeEx 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public static class StrokeEx 继承 object StrokeEx 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 方法 Apply(ICanvas, Stroke) public static void Apply(this ICanvas canvas, Stroke stroke) 参数 canvas ICanvas stroke Stroke Apply(Stroke, StrokeAttribute) public static void Apply(this Stroke stroke, StrokeAttribute attr) 参数 stroke Stroke attr StrokeAttribute"
  },
  "doc/api/Sparks.Trader.Api.SymbolAlertCondition.html": {
    "href": "doc/api/Sparks.Trader.Api.SymbolAlertCondition.html",
    "title": "SymbolAlertCondition 类 | SparksTrader文档",
    "keywords": "SymbolAlertCondition 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public class SymbolAlertCondition : AlertAction 继承 object AlertAction SymbolAlertCondition 继承成员 AlertAction.ActionType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 属性 Contract public SymbolContract Contract { get; set; } 属性值 SymbolContract State public string State { get; set; } 属性值 string"
  },
  "doc/api/Sparks.Trader.Api.SymbolContract.html": {
    "href": "doc/api/Sparks.Trader.Api.SymbolContract.html",
    "title": "SymbolContract 结构 | SparksTrader文档",
    "keywords": "SymbolContract 结构 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public struct SymbolContract 继承成员 object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) 构造函数 SymbolContract(ESymbolType, string, string, string, ECurrency, string, Guid?, string) public SymbolContract(ESymbolType symbolType, string code, string name, string exchange, ECurrency currency, string providerName = null, Guid? providerId = null, string providerTypeId = null) 参数 symbolType ESymbolType code string name string exchange string currency ECurrency providerName string providerId Guid? providerTypeId string 属性 Code public string Code { readonly get; set; } 属性值 string Currency public ECurrency Currency { readonly get; set; } 属性值 ECurrency Exchange public string Exchange { readonly get; set; } 属性值 string IsProviderUnique [JsonIgnore] public bool IsProviderUnique { get; } 属性值 bool Name public string Name { readonly get; set; } 属性值 string ProviderId [Browsable(false)] public Guid? ProviderId { readonly get; set; } 属性值 Guid? ProviderName [Browsable(false)] public string ProviderName { readonly get; set; } 属性值 string ProviderTypeId [Browsable(false)] public string ProviderTypeId { readonly get; set; } 属性值 string ProviderWideId [JsonIgnore] public string ProviderWideId { get; } 属性值 string SymbolType public ESymbolType SymbolType { readonly get; set; } 属性值 ESymbolType SystemWideId [JsonIgnore] public string SystemWideId { get; } 属性值 string 方法 Equals(SymbolContract) public bool Equals(SymbolContract value) 参数 value SymbolContract 返回 bool Equals(SymbolContract, SymbolContract) public static bool Equals(SymbolContract left, SymbolContract right) 参数 left SymbolContract right SymbolContract 返回 bool Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object o) 参数 o object 返回 bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() 返回 int A 32-bit signed integer that is the hash code for this instance. ToString() Returns the fully qualified type name of this instance. public override string ToString() 返回 string The fully qualified type name. 运算符 operator ==(SymbolContract, SymbolContract) public static bool operator ==(SymbolContract left, SymbolContract right) 参数 left SymbolContract right SymbolContract 返回 bool operator !=(SymbolContract, SymbolContract) public static bool operator !=(SymbolContract left, SymbolContract right) 参数 left SymbolContract right SymbolContract 返回 bool"
  },
  "doc/api/Sparks.Trader.Api.SymbolContractAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.SymbolContractAttribute.html",
    "title": "SymbolContractAttribute 类 | SparksTrader文档",
    "keywords": "SymbolContractAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class SymbolContractAttribute : Attribute 继承 object Attribute SymbolContractAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) 构造函数 SymbolContractAttribute(ESymbolType, string, string, ECurrency, string, string) public SymbolContractAttribute(ESymbolType symbolType, string code, string exchange, ECurrency currency, string providerName = null, string providerId = null) 参数 symbolType ESymbolType code string exchange string currency ECurrency providerName string providerId string 属性 Code public string Code { get; set; } 属性值 string Contract public SymbolContract Contract { get; } 属性值 SymbolContract Currency public ECurrency Currency { get; set; } 属性值 ECurrency Exchange public string Exchange { get; set; } 属性值 string Name public string Name { get; set; } 属性值 string ProviderId public Guid? ProviderId { get; set; } 属性值 Guid? ProviderName public string ProviderName { get; set; } 属性值 string SymbolType public ESymbolType SymbolType { get; set; } 属性值 ESymbolType 方法 ToString() Returns a string that represents the current object. public override string ToString() 返回 string A string that represents the current object."
  },
  "doc/api/Sparks.Trader.Api.SymbolContractSearchAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.SymbolContractSearchAttribute.html",
    "title": "SymbolContractSearchAttribute 类 | SparksTrader文档",
    "keywords": "SymbolContractSearchAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class SymbolContractSearchAttribute : Attribute 继承 object Attribute SymbolContractSearchAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "doc/api/Sparks.Trader.Api.TextEditAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.TextEditAttribute.html",
    "title": "TextEditAttribute 类 | SparksTrader文档",
    "keywords": "TextEditAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class TextEditAttribute : Attribute 继承 object Attribute TextEditAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 TextEditAttribute() public TextEditAttribute() 属性 AcceptsReturn public bool AcceptsReturn { get; set; } 属性值 bool AcceptsTab public bool AcceptsTab { get; set; } 属性值 bool NullText public string NullText { get; set; } 属性值 string ShowNullText public bool ShowNullText { get; set; } 属性值 bool TextWrapping public ETextWrapping TextWrapping { get; set; } 属性值 ETextWrapping"
  },
  "doc/api/Sparks.Trader.Api.TimeFrameAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.TimeFrameAttribute.html",
    "title": "TimeFrameAttribute 类 | SparksTrader文档",
    "keywords": "TimeFrameAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)] public class TimeFrameAttribute : Attribute 继承 object Attribute TimeFrameAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 TimeFrameAttribute(ETimeFrame) public TimeFrameAttribute(ETimeFrame tf) 参数 tf ETimeFrame 属性 TimeFrame public ETimeFrame? TimeFrame { get; set; } 属性值 ETimeFrame?"
  },
  "doc/api/Sparks.Trader.Api.TimeValuesEx.html": {
    "href": "doc/api/Sparks.Trader.Api.TimeValuesEx.html",
    "title": "TimeValuesEx 类 | SparksTrader文档",
    "keywords": "TimeValuesEx 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public static class TimeValuesEx 继承 object TimeValuesEx 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "doc/api/Sparks.Trader.Api.TradeDirectionEx.html": {
    "href": "doc/api/Sparks.Trader.Api.TradeDirectionEx.html",
    "title": "TradeDirectionEx 类 | SparksTrader文档",
    "keywords": "TradeDirectionEx 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public static class TradeDirectionEx 继承 object TradeDirectionEx 继承成员 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 方法 Reverse(ETradeDirection) public static ETradeDirection Reverse(this ETradeDirection t) 参数 t ETradeDirection 返回 ETradeDirection"
  },
  "doc/api/Sparks.Trader.Api.TradeOperation.html": {
    "href": "doc/api/Sparks.Trader.Api.TradeOperation.html",
    "title": "TradeOperation 接口 | SparksTrader文档",
    "keywords": "TradeOperation 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface TradeOperation 属性 IsExecuting True if a trade operation is being executed, false if it completed bool IsExecuting { get; } 属性值 bool 示例 TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 20000, \"myLabel\"); // ... if (!operation.IsExecuting) { Print(\"Trade executed\"); } ShortDescription string ShortDescription { get; } 属性值 string TradeResult The result of a trade operation TradeResult TradeResult { get; } 属性值 TradeResult 示例 TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 20000, \"myLabel\"); // ... if (!operation.IsExecuting && operation.TradeResult.IsSuccessful) { Print(\"Trade {0} executed\", operation.TradeResult.Position.Label); }"
  },
  "doc/api/Sparks.Trader.Api.TradeResult.html": {
    "href": "doc/api/Sparks.Trader.Api.TradeResult.html",
    "title": "TradeResult 接口 | SparksTrader文档",
    "keywords": "TradeResult 接口 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll public interface TradeResult 属性 ErrorCode Error code of un unsuccessful trade ETradeErrorCode ErrorCode { get; } 属性值 ETradeErrorCode 示例 var mySymbol = MarketData.GetSymbol(\"EURUSD\"); TradeResult result = ExecuteMarketOrder(ETradeDirection.Sell, mySymbol, 1); if(!result.IsSuccessful) Print(\"Error: {0}\", result.Error); ErrorMsg object ErrorMsg { get; } 属性值 object IsSuccessful True if the trade is successful, false if there is an error bool IsSuccessful { get; } 属性值 bool 示例 TradeResult result = ExecuteMarketOrder(ETradeDirection.Buy, Symbol, 20000); if (result.IsSuccessful) Print(\"Buy at {0}\", result.Position.EntryPrice); Order The resulting pending order of a trade request IOrder Order { get; } 属性值 IOrder 示例 TradeResult result = PlaceLimitOrder(ETradeDirection.Sell, Symbol, 50000, Symbol.Ask, \"myLabel\", 10, null); if(result.IsSuccessful) Print(\"Order placed. SL: {0}\", result.Order.StopLoss); RequestIds 请求对应的ids IReadOnlyList<string> RequestIds { get; } 属性值 IReadOnlyList<string> Trade The resulting position of a trade request ITrade Trade { get; } 属性值 ITrade 示例 TradeResult result = ExecuteMarketOrder(ETradeDirection.Sell, Symbol, 50000); if (result.IsSuccessful) Print(\"Sell at {0}\", result.Position.EntryPrice);"
  },
  "doc/api/Sparks.Trader.Api.WarnAttribute.html": {
    "href": "doc/api/Sparks.Trader.Api.WarnAttribute.html",
    "title": "WarnAttribute 类 | SparksTrader文档",
    "keywords": "WarnAttribute 类 命名空间 Sparks.Trader.Api 程序集 Sparks.Trader.Api.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Property|AttributeTargets.Field|AttributeTargets.Interface|AttributeTargets.Parameter, Inherited = false)] public class WarnAttribute : Attribute 继承 object Attribute WarnAttribute 继承成员 Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() 构造函数 WarnAttribute(string) public WarnAttribute(string msg) 参数 msg string 属性 Message public string Message { get; set; } 属性值 string"
  },
  "doc/articles/Deploy/WindowsServer2019.html": {
    "href": "doc/articles/Deploy/WindowsServer2019.html",
    "title": "| SparksTrader文档",
    "keywords": "Widnows Server 2019 安装更新问题 Windows Server 2019默认不允许SSL网页放入缓存，这将导致我们的应用程序无法正常安装和更新。通过修改IE的这项配置，就可以了。 打开IE的Internet选项，高级中，将“不将加密的页存盘”取消掉。 注册表项修改 除了手动操作外，也可以直接通过修改注册表实现： Windows Registry Editor Version 5.00 [HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings] \"DisableCachingOfSSLPages\"=dword:00000000 可以将上述代码保存成bat文件直接运行，需要管理员权限。"
  },
  "doc/articles/Howto/如何创建一个策略.html": {
    "href": "doc/articles/Howto/如何创建一个策略.html",
    "title": "如何创建一个策略 | SparksTrader文档",
    "keywords": "如何创建一个策略 在本文及其相应视频中，我们将描述在 Trader Automate 中创建 cBot 的快速方法。我们将创建的 cBot 将实施一个简单的交易策略，称为“三白兵三黑乌鸦”。您可以在我们的知识库中了解有关此策略的更多信息。 在按照我们的说明操作之前，请确保您已从官方网站下载并安装了 Trader 桌面应用程序。启动它，然后导航至 Trader Automate 部分。您可以在左侧面板中找到它。单击“Atuaomte”选项卡，应出现 Trader Automate 部分。 添加新的策略 要创建新的 cBot，只需单击“新建 cBot”按钮即可。如果您看到“新指标”按钮，请打开旁边的下拉菜单并选择“新 cBot”。 您将看到一个新项目添加到 cBot 列表中，其名称为“New cBot”。选择此机器人，右侧的代码编辑器窗口将包含一个代码模板来帮助您入门。 下一步是重命名新的 cBot。为此，请右键单击它并选择“重命名”或按 F2 。我们将使用“三白兵三黑乌鸦”作为 cBot 的新名称。完成后，按 Enter 。您的新 cBot 已成功创建，现在您可以开始编写策略了。 cBot 方法定义您的 cBot 在发生特定事件时的行为方式。开发 Trader cBot 时需要处理四个主要事件；所有四个都由 Trader 提供的四种不同方法处理。这些方法是 OnStart() 、 OnTick() 、 OnBar() 和 OnStop() 。请注意，默认代码模板中缺少 OnBar() 方法。 下表详细定义了这四种方法。 Method Name 方法名称 Definition 定义 OnStart() This method is triggered when a cBot instance starts operating. It is used to initialise any variables you plan to use in your cBot such as indicators, counters, event handlers, or timers. 当cBot实例开始运行时，会触发该方法。它用于初始化您计划在 cBot 中使用的任何变量，例如指示器、计数器、事件处理程序或计时器。 OnTick() This method is triggered on each incoming tick on the trading chart on which a cBot instance is running. Inside the OnTick() method, you can program custom entry and exit conditions as well as any other auxiliary function you need to run when a new tick arrives. 在运行 cBot 实例的交易图表上的每个传入价格变动时都会触发此方法。在 OnTick() 方法内，您可以编写自定义进入和退出条件以及新报价到达时需要运行的任何其他辅助函数。 OnBar() This method is similar to OnTick(); however, it is triggered only when a new bar is drawn on the chart on which your cBot is running. Analogously to OnTick(), you can use it to program custom entry and exit conditions or any other functions that need to run on the formation of each new bar. 该方法与 OnTick() 类似；但是，仅当在 cBot 运行的图表上绘制新柱时才会触发它。与 OnTick() 类似，您可以使用它来编程自定义进入和退出条件或需要在每个新柱形成时运行的任何其他函数。 OnStop() This method is triggered when a cBot instance stops. It is used to perform final operations such as closing positions. 当cBot实例停止时会触发该方法。它用于执行最终操作，例如平仓。 Add the Trading Logic¶ 添加交易逻辑 ¶ We will now add the code for our trading strategy. Our cBot should open a 'Buy' position when three green bars are formed on the chart and a 'Sell' position when there are three consecutive red bars. 我们现在将为我们的交易策略添加代码。当图表上形成三个绿色条时，我们的 cBot 应建立“买入”仓位，当出现三个连续红色条时，我们的 cBot 应建立“卖出”仓位。 首先，我们需要定义 cBot 的参数。这些参数可通过 Trader UI 完全自定义。我们将在 cBot 中定义三个参数。 每笔交易的数量。 以点为单位的止损。 以点为单位的止盈。 将以下代码粘贴到代码编辑器中类声明后的大括号下方 ( public class NewcBot : Robot ) [Parameter(DefaultValue = 1000)] public double Volume { get; set; } [Parameter(DefaultValue = 10)] public double TakeProfit { get; set; } [Parameter(DefaultValue = 10)] public double StopLoss { get; set; } We now need to implement the logic behind our trading strategy. Paste the following code in your OnBar() method. Remember that this method is called every time a new bar is formed. 我们现在需要实现交易策略背后的逻辑。将以下代码粘贴到您的 OnBar() 方法中。请记住，每次形成新柱时都会调用此方法。 //Three White Soldiers if(Bars.ClosePrices.Last(1) > Bars.OpenPrices.Last(1) && Bars.ClosePrices.Last(2) > Bars.OpenPrices.Last(2) && Bars.ClosePrices.Last(3) > Bars.OpenPrices.Last(3)) { ExecuteMarketOrder(TradeType.Buy, SymbolName, Volume, \"\", StopLoss, TakeProfit); } //Three Black Crows if(Bars.ClosePrices.Last(1) < Bars.OpenPrices.Last(1) && Bars.ClosePrices.Last(2) < Bars.OpenPrices.Last(2) && Bars.ClosePrices.Last(3) < Bars.OpenPrices.Last(3)) { ExecuteMarketOrder(TradeType.Sell, SymbolName, Volume, \"\", StopLoss, TakeProfit); } 现在我们将更仔细地检查代码。 Trader 使您可以访问图表历史柱，因此我们可以分别检查最后三个柱是全绿色还是全红色。在上面的 OnBar() 方法中，我们首先检查最后三个条是否都是绿色的。然后我们评估这些条是否都是红色的。 如果两个条件之一成立，我们通过 ExecuteMarketOrder() 方法下市价单。它需要多个输入（参数），其中最重要的是交易方向、交易品种、交易量、止损和止盈。 在我们的例子中，订单方向（ TradeType.Buy 和 TradeType.Sell ）由交易策略条件定义。交易品种名称直接取自 cBot 运行的图表 ( SymbolName )。交易量 ( Volume )、止损 ( Stop Loss ) 和止盈 ( TakeProfit ) 均取自我们定义的 cBot 参数。 构建并运行 cBot 现在我们需要检查 cBot 是否构建成功。默认情况下，构建结果窗口位于代码编辑器的正下方。如果您没有看到它，请单击 Trader UI 最顶部栏中的“布局”按钮，然后选择“构建结果”。 然后，按下 Trader UI 最顶部栏中的“构建”按钮。或者，右键单击您的 cBot，然后在新出现的菜单中单击“构建”，或者只需按 F7 。 Image title 如果构建成功，您将在代码编辑器底部的“构建结果”区域中看到一条绿色消息。 Image title 或者，如果您的代码存在问题，您将看到一条红色消息和所有构建错误的详细摘要。 Image title 成功构建 cBot 后，您就可以开始使用它了。您所需要做的就是在交易图表上添加一个实例。为此，只需单击 cBot 名称右侧的“加号”图标即可。您将看到可以运行 cBot 的所有符号的列表。 Image title 我们将选择欧元兑美元。选择符号后，将添加一个新的 cBot 实例。您将在 cBot 列表中看到一个新项目，其中包含您想要交易的交易品种名称和时间范围。 您还应该看到您在交易图表正下方的“参数”选项卡中编码的参数。 Image title 您可以根据需要更改这些参数，也可以将它们保留为默认值。 此外，您将在 EURUSD 图表顶部看到一个“玩”按钮。 Image title 要启动您的实例，请按此按钮。或者，此按钮的副本也位于左侧 cBot 列表中实例的右侧。这些按钮中的任何一个都将启动 cBot。 单击任一按钮后，您应该看到它变成橙色，这意味着我们的 cBot 实例现已启动并运行。在“日志”选项卡中，您还应该看到一个新行，表明 cBot 现已启动。 回测 我们的 cBot 可能需要很长时间才能在真实交易图表上建仓。我们将进行快速回测，看看它对历史数据的作用。为此，请打开“回测”选项卡。 Image title 使用靠近屏幕顶部的日历滑块选择您想要用于回溯测试的日期范围。启用“可视模式”标志以跟踪回溯测试的结果。 我们将把滑块向后移动一个月。现在点击“播放”按钮即可根据所选历史数据启动 cBot。 之后，您将能够在交易图表正下方和“参数”部分右侧的选项卡中看到正在开仓和/或平仓的新仓位。具体来说，在检测到我们编码的两种模式中的任何一种后，cBot 将下达“买入”订单或“卖出”订单。 运行回测是分析 cBot 是否正常工作的有用方法。 概括 我们希望本文有助于演示如何使用 Trader 创建自动交易机器人。要了解更多信息，请查阅我们丰富的文档或在我们的论坛上发布问题。 您还可以订阅您的 YouTube 频道，以便在我们发布新视频时收到提醒。"
  },
  "doc/articles/Howto/如何创建自定义指标.html": {
    "href": "doc/articles/Howto/如何创建自定义指标.html",
    "title": "如何创建自定义指标 | SparksTrader文档",
    "keywords": "如何创建自定义指标 在本文及其相应视频中，我们将讨论如何在 Trader 中快速创建新的自定义指标。我们将创建一个简单的移动平均线指标，并向您展示如何快速自定义指标参数。 在按照我们的说明操作之前，请确保您已从官方网站下载并安装了 Trader 桌面应用程序。启动它，然后导航至 Automate 部分。为此，请在左侧面板中找到“自动化”选项卡并单击它。您现在应该看到 Automate 界面。 在其中，您会注意到两个选项卡分别名为“本地”和“云”。进入“本地”选项卡以访问本地计算机上安装的指示器。这些指示器位于本地 cBot 列表的正下方。请注意，Trader 预装了多个指标，您可以自由访问和修改。 添加新的自定义指标 要创建新的自定义指标，我们只需单击“新建...”按钮并选择“新指标”。新指标将出现在指标列表的底部，并在右侧面板中显示代码模板。 下一步是更改指标的默认名称。为此，请右键单击它并按“重命名”，或者选择它并按 F2 。我们将输入“简单移动平均线”作为指标的新名称。完成后，按 Enter 。此时，我们已准备好开始编写自定义指标的逻辑和公式。 查看指标结构 在开始之前，我们将快速浏览一下代码编辑器窗口中显示的指标代码结构。该结构包括默认参数设置以及在图表上计算和显示指标的方法。 首先，每个指标都有一个包含其类属性的部分。您可以在此处配置指标的访问权限、指标在图表上的显示位置、指标使用的时区、指标缩放比例以及其他一些高级设置。 您还会注意到，每个新指标代码模板都定义了一个名为 NewIndicator 的类，其中包含所有指标事件和任何自定义方法。类名声明后跟 : Indicator 。这意味着 NewIndicator 类继承自 Indicator 基类，而该基类又包含我们在构建自定义指标时将访问的所有预定义对象。 我们的技术文档中提供了对面向对象编程中的指标代码结构和继承原则的更详细回顾。 在下面的部分中，您将看到包含所有默认指标设置的代码块。最初，此部分仅包含以下代码。 /// <summary> /// IsOverlay=true, 这是个主图指标，输出数据将绘制在主图上 /// Group = \"Trends\", 指标分组 /// </summary> [Indicator(IsOverlay=true, Group = \"Trends\")] public class MVA : Indicator { #region 用户参数 /// <summary> /// 指标公式的数据源 /// DefaultValue(\"Closes\"), 默认值数据源为IBars的Closes /// </summary> [Parameter, Display(Name = \"Source\", GroupName = \"Calc\"), DefaultValue(\"Closes\")] public IDatas Source { get; set; } /// <summary> /// 指标中使用的周期数 /// Range(1, int.MaxValue) 1到int.MaxValue的周期范围 /// DefaultValue(14), 默认周期为14 /// </summary> [Parameter, Display(Name = \"Periods\", GroupName = \"Calc\"), Range(1, int.MaxValue), Step(1), DefaultValue(14)] public int Periods { get; set; } /// <summary> /// 指标输出结果绘制线 /// </summary> [Output, Display(Name = \"Result\", GroupName = \"Out\"), Stroke(\"#b667c5\")] public IIndicatorDatas Result { get; set; } #endregion /// <summary> /// 当指标附加到图表时，将调用此事件方法。它用于初始化您计划在指标中使用的任何变量。您还可以定义和引用其他指标，以使用其他指标的公式创建单个指标 /// </summary> protected override void OnStart() { } /// <summary> /// 在每次传入数据时都会调用此方法。在此方法中，您可以编写处理传入数据的逻辑，以计算指标应显示的下一条绘制线 /// </summary> /// <param name=\"source\"></param> /// <param name=\"index\"></param> protected override void OnData(ISource source, int index) { /// 如果当前数据源不是我们指定的数据源，则返回 if (source != Source) return; /// 如果当前索引小于第一个有意义的指标值的索引，则返回 if (index < First) return; int startIndex = index - Periods + 1; //此代码将指标计算的结果分配给我们之前定义的 Result 参数。 Result[index] = Source.Avg(startIndex, index); } /// <summary> /// 当指标停止或者从图表中移除时，将调用此方法。在此方法中，您可以清理任何资源，例如事件订阅或缓存的数据 /// </summary> protected override void OnStop() { } /// <summary> /// 第一个有意义的指标值的索引 /// </summary> protected int First => Source.FirstNotNanIndex == -1 ? int.MaxValue : Source.FirstNotNanIndex + Periods - 1; } 在参数声明的正下方，您应该看到指标方法。将方法视为指标启动时以及将新价格数据输入指标时执行的某些事件。下表定义了三种关键指标方法。 |方法名称| 定义| |OnStart()| 当指标附加到图表时，将调用此事件方法。它用于初始化您计划在指标中使用的任何变量。您还可以定义和引用其他指标，以使用其他指标的公式创建单个指标。| |OnData()| 在每次传入数据时都会调用此方法。在此方法中，您可以编写处理传入数据的逻辑，以计算指标应显示的下一条绘制线。| |OnStop()| 当指标停止或者从图表中移除时，将调用此方法。在此方法中，您可以清理任何资源，例如事件订阅或缓存的数据| 构建并测试指标 一旦我们完成了指标代码的编写，我们就可以单击位于 cTrader UI 最顶部栏中的“构建”按钮。或者，右键单击您的指标并在新打开的菜单中选择“构建”，或者只需按 Ctrl + B 。 如果构建成功，您将在代码编辑器底部的“构建结果”区域中看到一条绿色消息。 但是，如果您的代码存在问题，您将看到一条红色消息和所有构建错误的详细摘要。 成功构建指标后，我们现在可以继续创建实例。最简单的方法是右键单击指示器并选择“添加实例”选项。 这将为“EURUSD”的“h1”图表创建一个新的指标实例。但是，您只需单击实例并打开相关菜单即可更改图表类型、时间范围和符号。 新出现的“参数”选项卡应显示我们之前编码的三个可自定义参数。您可以将它们保留原样或直接在 cTrader UI 中更改它们的值。 交易图表现在应该显示指标输出。在我们的例子中，这将是一条显示简单移动平均线的绿松石线。 如果右键单击该线，您将看到一个新窗口，允许自定义指标参数。例如，我们可以将输出线的颜色从绿松石色切换为蓝色。我们还可以调整线条的粗细。要保存更改，请单击“确定”。 请注意，cTrader 允许在实例输出和自定义指标的代码编辑器窗口之间快速切换。这使其成为快速测试某些指标参数或任何自定义计算逻辑的理想工具。 将指标添加到实时图表 现在，我们将切换到 cTrader 中的“交易”选项卡，将自定义指标附加到实时图表。打开您想要分析的交易品种的图表。 在顶部的菜单中，单击“指标”图标以打开一个新部分。 然后，选择“自定义”，然后在新出现的菜单中选择我们创建的自定义指标（“简单移动平均线”）。 您将看到一个新窗口，允许您自定义指标参数。选择您喜欢的值后，单击“确定”将指标添加到所选交易品种的图表中。 要返回指标设置窗口，只需右键单击指标输出即可。在我们的例子中，我们可以右键单击绿松石线。或者，单击将鼠标悬停在图表上的指标名称上时出现的“属性”图标。 将出现指标设置窗口，您将能够更改输出线条的颜色及其粗细。 概括 我们希望本文有助于演示如何使用 cTrader 创建自定义指标。要了解更多信息，请查阅我们丰富的文档或在我们的论坛上发布问题。 您还可以订阅您的 YouTube 频道，以便在我们发布新视频时收到提醒。 https://help.ctrader.com/ctrader-automate/articles/for-developers/create-a-custom-indicator/"
  },
  "doc/articles/Howto/如何回测策略.html": {
    "href": "doc/articles/Howto/如何回测策略.html",
    "title": "如何回测策略 | SparksTrader文档",
    "keywords": "如何回测策略 在本文及其相应视频中，我们将讨论如何回测 cBot。您将了解在哪里可以访问回溯测试、如何配置回溯测试设置以及如何解释回溯测试的结果。 Trader 中的回测 ¶ cBot 是完全可定制的交易机器人，您可以将其配置为在遇到某些市场走势和事件（例如 MACD 交叉）时执行各种交易操作。 然而，在编写 cBot 代码时，第一次尝试就一切顺利可能具有挑战性。在大多数情况下，您需要先完善 cBot，然后再让它代表您进行交易。 这就是回溯测试的用武之地。将回溯测试视为一个游乐场，您可以在其中让 cBot 根据历史市场数据进行交易，而无需冒任何有形风险。因此，回溯测试对于评估 cBot 是否能够在不冒交易账户中任何真实资金风险的情况下实现预期结果非常有价值。 我们强烈建议您对您自己创建或通过其他渠道获取的任何 cBot 进行彻底的回溯测试。 如何在 Trader 中访问回测 ¶ 要进行回溯测试，首先，选择您想要评估的 cBot 的现有实例。在用户界面最顶部的栏（包含“后退”按钮的栏）下方，您应该会看到几个选项卡，其中第一个选项卡包含当前所选实例正在运行的交易图表。 “回测”选项卡应该位于其右侧。点击它可以切换到回测区域。 Image title 打开此选项卡后，您应该看到以下界面。 Image title 如何设置回测周期 ¶ 如前所述，回溯测试允许您根据历史市场数据运行 cBot 实例。您有多种选择来定义回溯测试过程应涵盖的确切时间段。 使用滑块 ¶ 日历滑块位于靠近“回溯测试”选项卡顶部的位置。 Image title 将两个灰色“点”拖动到滑块上以指定后续回测的数据范围。在上面的屏幕截图中，我们拖动了其中一个“点”来覆盖大约等于两年的时间段。 使用菜单 ¶ 您还可以使用滑块左侧和右侧的日历下拉菜单来选择精确的日期范围。 Image title 为了确保我们的回测期正好是两年，我们可以打开左侧的菜单，选择2020年11月30日 th 作为新的开始日期。 如何配置回测设置 ¶ 在执行回溯测试之前，单击最左侧日历菜单左侧的“齿轮”图标。您应该看到以下设置。 Image title 打开此部分后，执行以下操作。 在“起始资金”字段中，指定您的 cBot 启动的初始资金。 打开“佣金”菜单，然后选择（或输入）您的 cBot 在交易量达到 100 万单位后将支付的佣金。 在“数据”菜单中，设置回测历史数据的来源。一般来说，从服务器接收 m1 数据是准确性和回测资源密集度之间的一个很好的折衷方案。请注意，您还可以从本地存储的 .CSV 文件上传自定义数据。 在“点差”子部分中选择固定点差或随机点差。单击“实时”将固定点差（如果选择）与当前交易品种点差进行匹配。 请参阅本教程，了解有关回溯测试设置以及它们如何影响回溯测试结果的更多信息。 如何选择回测模式 ¶ 您可以选择查看回溯测试的结果（例如，您的 cBot 所建仓位）。此功能对于检测 cBot 未按预期运行的某些事件和条件特别有用。 要访问它，请启用日历滑块左侧下方的“视觉模式”标志。在“速度”菜单中，选择播放所选交易图表的速度。请注意，在进行回溯测试时，您始终可以更改播放速度。 Image title 或者，禁用“视觉模式”标志。您将收到一份包含其结论的一次性报告，而不是实时观看回溯测试。 目前，我们将禁用视觉模式功能。 如何启动回测 ¶ 要使用给定设置和所选模式执行回测，请单击最右侧日历菜单右侧的“播放”按钮。 Trader 将开始加载所需的历史数据。此过程可能需要几分钟，具体取决于您选择的时间段以及运行 Trader 的硬件。 就我们而言，这个过程相对较快，因为我们只要求提供两年的信息。当进行回溯测试时，您将看到“视觉模式”标志右侧的条逐渐从左向右移动。 当它完全向右移动时，回测过程将结束。 如何查看回测结果 ¶ 您可以使用多种方法来判断回测的结果。回测结束后，交易图表中间顶部的数字将汇总您的 cBot 产生的净利润总额。 Image title 在我们的例子中，cBot 的净利润达到了惊人的 503%。 评估 cBot 性能的另一种方法是切换到交易图表下方交易面板中的“权益”选项卡。您将看到一个图表，其中 X 轴显示您的 cBot 已进行的交易总数，Y 轴显示资金。 黄线将跟踪您的 cBot 余额，而灰线将跟踪其净值。 Image title 我们可以看到我们的 cBot 在整个回溯测试中表现良好，但在某些情况下我们可能需要在让它获得真实资金之前进行纠正。 最后但并非最不重要的一点是，“交易统计”选项卡将显示有关 cBot 执行的所有交易操作的累积统计数据。 Image title 我们可以看到我们的总回报是巨大的。该机器人总共进行了 271 笔获胜交易，其中一笔交易就产生了总回报的很大一部分（33,009.55）！ cBot 显然具有进行冒险游戏的潜力。 概括 ¶ 回溯测试是确保您的 cBot 按预期运行的好方法。使用详细的统计数据和股票图表，您可以查明您正在测试的机器人做出正确（或错误）动作的价格时刻。回溯测试也是完全可定制的，允许您在截然不同的条件下训练您的机器人。"
  },
  "doc/articles/Howto/如何使用指标.html": {
    "href": "doc/articles/Howto/如何使用指标.html",
    "title": "如何使用指标 | SparksTrader文档",
    "keywords": "如何使用指标 指标是图形辅助工具，通常用于检测某些市场走势模式和交易机会（例如支撑位和阻力位）。 例如，布林带通常用于衡量波动性并检测双底或 M 顶等经典模式。另外，Ichimoku Kinko Hyo 指标是检测主要支撑位和阻力位的工具。 在本文及其相应视频中，我们将向您展示如何在 SparksTrader 中使用指标。 向图表添加指标 在 SparksTrader 中，您可以通过执行以下操作之一将指标添加到图表中。 单击位于最顶部控制行的“指标”图标，然后从新打开的部分中选择您想要添加的指标。 右键单击图表上的任意位置，然后在新出现的上下文菜单的“指标”部分中选择一个指标。 请注意，根据指标设置，其输​​出将覆盖在图表上或显示在单独的部分中。 如何管理添加的指标 添加指标后，SparksTrader 将在左上角（交易图表本身或其下方部分）显示一个新工具栏。 将鼠标指针悬停在此工具栏上可查看指标名称后面的三个图标以及参数值和指标输出。 参数值是根据指标不同而不同的特定设置。例如，在 MACD 交叉中，您可以设置源、长周期、短周期、信号周期和偏移的值。在自定义指标中，您不仅限于预设参数。 指标输出显示图表所反映的指标的当前值。 单击“隐藏/显示”图标可使指标在交易图表上不可见或可见。如果指标显示在单独的部分中，则单击“隐藏”图标后整个部分将变为空。 单击“属性”图标可修改指标参数，将出现一个新窗口来进行此操作。您还可以使用颜色、线条类型和线条粗细来更改默认可视化效果。在同一窗口中，通过单击相应的按钮重置参数值或从工作区完全删除指标。如果指标名称右侧的“视频”图标处于活动状态，您可以打开相关教程来了解有关该指标的更多信息。自定义指标后，单击“确定”。 如果您右键单击交易图表上或其下方部分的指标线，将会出现相同的“修改指标”窗口。 “关闭指标”图标会从交易图表中删除该指标。对于显示在单独部分的指标，单击“关闭指标”图标后，整个部分将被删除。 如果返回到最顶部的控制行，您可以从此工具栏管理指标。将鼠标悬停在“图纸/指示器”图标上时，下拉菜单将选择删除所有指示器或隐藏它们。 如果您点击“图纸/指标”图标或使用热键 Ctrl + I ，您可以通过点击相同的图标来管理一个窗口中的所有指标，例如“隐藏/显示”、“设置”和“删除”。按“删除所有指标”按钮即可一键删除所有指标。 如何使用自定义指标 除了 SparksTrader 上可用的内置指标以及可从外部源下载为“.spx”文件的指标外，您还可以创建自定义指标并将其直接添加到交易图表中。 您可以查看详细指南并观看视频，了解如何创建自定义指标、保存并构建它、运行新实例以及自定义参数值。在这里，您还可以深入了解如何通过 C# 编辑自定义指标中的示例代码。 创建并构建自定义指标后，您可以返回“交易”应用程序，将自定义指标添加到交易图表中。现在，从指标组列表中选择“自定义”。 要管理和更改自定义指标的属性，请执行本指南上一节中所述的相同操作。同样，可以通过图表区域左上角的工具栏、右键单击指标线以及最顶部控制行中的“绘图/指标”图标来管理自定义指标。 总之，SparksTrader 允许在交易图表区域轻松添加和管理指标。您还可以创建和部署自定义指标，以有效检测交易机会和市场走势模式。"
  },
  "doc/articles/Howto/如何优化策略.html": {
    "href": "doc/articles/Howto/如何优化策略.html",
    "title": "如何优化策略 | SparksTrader文档",
    "keywords": "如何优化策略 在 cTrader 中，可以创建具有任意数量可影响其行为的可自定义参数的 cBot，例如订单保护级别或默认订单量。这就提出了一个问题：交易者如何准确地确定这些参数的最佳值。幸运的是，cTrader 提供了一个可以进行优化的内置工具，为交易者节省了宝贵的时间。 在本用户指南中，我们重点关注用户如何优化其 cBot，并演示为什么 cBot 优化对于任何算法开发人员都至关重要。 cBot 优化如何工作 ¶ 将优化视为一系列回测。每次回测“通过”都发生在相同的数据上，但对 cBot 中编码的任何参数使用不同的值。 考虑一个 cBot，它可以对快/慢周期移动平均线穿过相反移动平均线（例如，快速移动平均线穿过慢速移动平均线）的情况做出反应。我们希望能够自定义 cBot 接收数据的快/慢周期数。 因此，我们的 cBot 应具有以下两个参数。 [Parameter(\"Slow Periods\", Group = \"Moving Average\", DefaultValue = 10)] public int SlowPeriods { get; set; } [Parameter(\"Fast Periods\", Group = \"Moving Average\", DefaultValue = 5)] public int FastPeriods { get; set; } 为了定义“最佳”参数值，我们需要广泛测试 cBot 在各种市场条件下以及为上述两个参数指定不同值时的工作方式。如果我们手动执行这些测试，他们会花费大量时间而无法提供易于解释的结果集。 幸运的是，我们可以让 cTrader 自动运行这些测试，并在得出结论时为我们提供某些参数值，使 cBot 能够实现最佳结果。此过程称为 cBot 优化。 如何访问 cBot 优化 ¶ 要访问 cBot 优化，请执行以下操作。 首先，选择您想要优化的 cBot 实例。如有必要，可以通过单击“加号”图标并选择一个符号来创建新实例，或者在单击“三点”图标后打开的上下文菜单中选择“添加实例”。 然后，切换到“回测”选项卡右侧的“优化”选项卡。此选项卡中的中央屏幕应如下所示。 如何配置优化设置和 cBot 参数 ¶ 由于优化是一系列回测，因此您可以配置与常规回测相同的设置。为此，请单击“齿轮”图标并更改新打开的菜单中的值。 要选择 cTrader 需要优化的确切参数，请单击“齿轮”图标右侧的“参数”按钮。 在此小节中，启用或禁用每个参数名称左侧的标志，以在优化过程中包含/排除这些参数。请注意，无论配置如何，所有 cBot 都存在“时间范围”参数。 我们希望通过优化来确定 cBot 在启动时考虑的慢速和快速周期的最佳值。然而，我们还不想尝试其他移动平均线类型。 如何定义优化标准和算法 ¶ 可以确定 cTrader 将使用哪些确切标准来在它将进行的回测过程中选择最佳参数值。 为此，请单击“向上线”图标代表的“条件”按钮。您将看到以下部分。 每个标准的设置包括两个菜单。在左侧菜单中，选择是否应最小化或最大化标准。在右侧的菜单中，从一组预定义选项中选择应最小化或最大化的标准。可以通过单击“添加标准”来添加新标准。 在上面的屏幕截图中，我们希望 cTrader 最大化我们的净利润和 cBot 的获胜交易数量。同时，我们希望最大限度地减少最大股本提取百分比。 为了简洁起见，本文不介绍自定义优化标准和 GetFitness() 方法。要了解有关它们的更多信息，请参阅我们的技术文档。 要选择特定的优化算法，请单击“标准”按钮右侧的“算法”按钮。应打开以下小节。 穷举搜索算法精度很高，但资源密集。当选择“网格”选项时，cTrader 创建所有可能参数值的网格，并运行测试它们所需的所有回测。虽然此过程很彻底，但可能需要一些时间。 幸运的是，cTrader 包含“遗传算法”选项。该算法通过将每次传递视为个体、将 cBot 参数视为“基因”、将优化标准的拟合程度视为适应性来模拟自然选择。一旦检测到某些参数值的任何变化都会导致 cBot 有效性收益递减，遗传算法就会停止。 由于遗传算法比穷举搜索占用的资源更少，同时仍能产生准确的结果，因此我们建议选择这种优化方法。 如何分配资源并执行 cBot 优化 ¶ 要执行 cBot 优化，请选择 cTrader 将运行回溯测试的历史数据范围。为此，请使用“优化”选项卡顶部的日历滑块或其左侧和右侧的菜单。 请注意，优化是一个资源密集型过程，可能需要一些时间才能完成。由于我们希望较快地收到结果，因此我们选择一年作为优化周期。 cTrader 还允许确定分配给优化过程的 CPU 资源的准确百分比。要自定义此设置，请单击最左侧日历菜单左侧的“资源”按钮。 在新出现的部分中，拖动滑块以增加或减少 CPU 消耗。 完成资源分配后，您应该准备好继续优化。为此，请单击最右侧日历菜单右侧的“播放”按钮。 cTrader 加载历史数据后，您将看到实时添加到中央屏幕的优化过程。 在网格顶部，您还将看到当前的通过次数、已用时间和剩余优化时间。 任何已完成的通行证都将标有绿色复选标记。您的 cBot 到达停止位置的所有通道都将标有灰色复选标记。 您可以保存和加载优化结果，这样您就可以在不同的设备上携带它们。要了解更多信息，请点击这里。 如何解释和应用优化结果 ¶ 在中央网格中，cTrader 将显示每次回测通过的多个指标，包括您的 cBot 已进行的获胜交易数量以及最大净值回撤百分比。 特别值得注意的是“健身”列，显示每次通过的健身得分。将适应度分数视为评估传递最大化/最小化您选择的优化标准的程度的指标。健身得分越高，表明与这些标准的契合度越高。 要快速选择健康得分最高的通行证，只需启用位于中央网格上方的“自动选择最佳通行证”标志即可。请注意，您可以在优化发生时启用“自动选择最佳通过”标志，cTrader 将动态搜索可能的最佳参数值。 正如您在“健身”列中所看到的，与所有其他通道相比，第 33 号通道提供了最佳的健身得分。 我们可以安全地单击第 33 步旁边的“应用”，此过程中使用的参数值将立即应用于我们的 cBot 实例。 “慢周期”和“快周期”参数的默认值分别等于 10 和 5。 与回溯测试的情况一样，“TradeWatch”显示将提供权益图表和详细的交易统计数据，总结我们的 cBot 在特定过程中所采取的操作。请注意，权益图表仅显示来自中央网格的 20 次最佳传球。 稳步增加的“余额”和“净值”行只是强化了这样一个事实：第 33 遍为我们的 cBot 有效运行提供了必要的参数值。 概括 ¶ 简而言之，cBot 优化是一个强大的工具，可确保您的自动交易顾问配置正确。我们强烈建议使用不同的标准进行多轮优化，以了解哪些参数值最适合您自己开发的或从其他开发人员处获得的 cBot。"
  },
  "doc/articles/Howto/如何在策略中使用指标.html": {
    "href": "doc/articles/Howto/如何在策略中使用指标.html",
    "title": "如何在策略中使用指标 | SparksTrader文档",
    "keywords": "如何在策略中使用指标 在本文（以及上面的视频）中，我们解释了如何在 cBot 中使用内置指标。在 cBot 中使用指标通常有多种目的，最值得注意的是让 cBot 根据指标输出做出交易决策。为了证明这一点，我们将开发一个基于相对强弱指标 (RSI) 的简单自动交易策略。 创建一个新的 cBot ¶ 要创建新的 cBot，请切换到“自动化”应用程序并单击“新建 cBot”。 我们将 cBot 重命名为“RSI cBot”。以下是我们的自动交易策略的运作方式。 当 RSI 指标低于预定义阈值时，机器人将进入买入头寸。 当 RSI 指标高于预定义阈值时，机器人将进入卖出头寸。 定义和初始化指标 ¶ 我们需要做的第一件事是在 cBot 类中定义 RSI 指标。为此，我们声明一个新字段。 private RelativeStrengthIndicator rsi; Using Private Class Members 我们可以安全地将 rsi 字段设为私有，因为它只会在我们的 cBot 中使用。 所有 cTrader 指标都需要在我们使用之前进行初始化。最好在 OnStart() 方法主体中完成此操作，以便 cBot 在开始运行后可以访问指示器输出。 cTrader 提供了一个方便的类，允许您使用现成的构造函数轻松初始化内置指标。在了解这是如何完成之前，我们将添加初始化 RSI 指标所需的两个参数。 [Parameter(\"Source\", Group = \"RSI\")] public DataSeries Source { get; set; } [Parameter(\"Periods\", Group = \"RSI\", DefaultValue = 14)] public int Periods { get; set; } Now that we have added our parameters, we are ready to initialise the indicator. 现在我们已经添加了参数，我们准备初始化指标。 protected override void OnStart() { rsi = Indicators.RelativeStrengthIndex(Source, Periods); } 实现交易逻辑 ¶ 由于我们已经初始化了该指标，因此我们可以调用它并在我们的交易逻辑中使用它。对于 RSI 指标，我们可以使用 Results 集合读取输出。 为此，我们将使用 OnBar() 方法并实现以下条件。 如果当前 RSI 值低于 RSI 买入阈值，则进入新的买入头寸。 如果当前 RSI 值高于 RSI 卖出阈值，则进入新的卖出头寸。 因为我们依赖预定义的阈值来执行交易逻辑，所以我们将向 cBot 添加两个参数。 [Parameter(\"Buy Level\", Group = \"RSI\", DefaultValue = 30)] public int BuyLevel { get; set; } [Parameter(\"Sell Level\", Group = \"RSI\", DefaultValue = 70)] public int SellLevel { get; set; } 接下来，我们将在 cBot 代码中实现我们的条件。 protected override void OnBarClosed() { if (rsi.Result.LastValue < BuyLevel) { // Enter buy position } else if (rsi.Result.LastValue > SellLevel) { // Enter sell position } } 是时候实现执行交易订单的辅助方法了。这样做是为了在代码中创建额外的抽象级别，从而提高可读性和可重用性。 我们首先添加一个 cBot 参数，该参数将允许用户确定交易量。 [Parameter(\"Quantity (Lots)\", Group = \"Volume\", DefaultValue = 1, MinValue = 0.01, Step = 0.01)] public double Quantity { get; set; } 之后，我们将添加 Open() 和 Close() 方法，用于进入新仓位并关闭 cBot 在给定方向上打开的所有仓位。 private void Open(TradeType tradeType) { var position = Positions.Find(\"SampleRSI\", SymbolName, tradeType); var volumeInUnits = Symbol.QuantityToVolumeInUnits(Quantity); if (position == null) ExecuteMarketOrder(tradeType, SymbolName, volumeInUnits, \"RSI cBot\"); } private void Close(TradeType tradeType) { foreach (var position in Positions.FindAll(\"SampleRSI\", SymbolName, tradeType)) ClosePosition(position); } 我们可以使用我们的辅助方法来完成自动化交易策略。 protected override void OnTick() { if (rsi.Result.LastValue < BuyLevel) { Close(TradeType.Sell); Open(TradeType.Buy); } else if (rsi.Result.LastValue > SellLevel) { Close(TradeType.Buy); Open(TradeType.Sell); } } 回测 cBot ¶ 完成 cBot 编码后，我们可以构建它并切换到“回测”选项卡以查看它在历史数据上的表现。要了解有关回溯测试的更多信息，请单击此处。 我们还可以将相对强弱指标附加到当前图表，以查看机器人执行的交易是否与预期的入场点相匹配。 要了解有关使用和开发 cBot 的更多信息，请随意浏览文档的其他部分并订阅我们的 YouTube 频道，以便在我们发布新视频时收到通知。"
  },
  "doc/articles/Provider/IB.html": {
    "href": "doc/articles/Provider/IB.html",
    "title": "IB盈透(Interactive Brokers) | SparksTrader文档",
    "keywords": "IB盈透(Interactive Brokers) Provider设置 HostIp | 主机ip IB tws或者IBGateway运行的主机的ip，一般如果是本机运行，填localhost或者127.0.0.1就行。 port | Api连接端口 IB tws或者IBGateway挂载的端口，从设置界面的API选项页获得。 TWS Api端口 IB Gateway Api端口 ClientId 连接到tws或者gateway的客户端id，如果只有一个客户端连接，填0即可。如果有多个，则需要填写不同的id以作区分。 注意事项 设置每日自动重启 IB规定，不论使用tws还是IBGateway程序，每天必须自动退出，或者自动重启。为了避免长时间未重启，程序可能会不稳定。 对于我们的需求，应该设置其在非交易时段自动重启。 如果没有修改成自动重启，SparksTrader无法自动登录tws或者IBGateway，也就无法自动重连成功了。 TWS自动重启 当tws自动重启后，sparkstrader会尝试进行重连。 IBGateway自动重启 账户多地登录 IB不支持账户的多地登录，登录1个以上tws，IBGateway，甚至于登录网站平台，都会导致现有登录连接的数据中断。 所以，当交易时，请注意保持只在一个地方进行登录，以免造成不可挽回的后果。"
  },
  "doc/articles/Provider/Provider.html": {
    "href": "doc/articles/Provider/Provider.html",
    "title": "| SparksTrader文档",
    "keywords": "hello"
  },
  "index.html": {
    "href": "index.html",
    "title": "SparksTrader 使用文档 | SparksTrader文档",
    "keywords": "SparksTrader 使用文档 简介 SparksTrader 是一体化解决方案，让交易者有机会使用各种自动交易工具，包括自定义指标和策略, 同时可以应用到各类交易通道上。 自定义指标 自定义指标是另一种类型的扩展，您可以自己开发和/或从其他开发人员那里购买。自定义指标可用于使用价格数据、图表绘图、账户属性等在 图表上运行计算。 策略 策略即为在 SparksTrader 内部运行并自主执行和管理交易操作的程序。 策略 可以被设计为执行几乎任何交易活动，例如根据特定条件修改现有头寸或下挂单。 如何开始开发 SparksTrader 算法 要开发自定义指标或cBot，您需要使用C#编程语言和.NET平台。 创建指标或 cBot 需要对 C# 和 .NET 有基本了解。 目前版本支持.net 7.0."
  },
  "README.html": {
    "href": "README.html",
    "title": "Sparks | SparksTrader文档",
    "keywords": "Sparks"
  }
}